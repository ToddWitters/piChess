!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A1	.\constants.h	66;"	d
A2	.\constants.h	57;"	d
A3	.\constants.h	48;"	d
A4	.\constants.h	39;"	d
A5	.\constants.h	30;"	d
A6	.\constants.h	21;"	d
A7	.\constants.h	12;"	d
A8	.\constants.h	3;"	d
ADD_TO_END	.\menu.h	12;"	d
ALL_EVASIONS	.\Stockfish-master\src\movepick.cpp	/^    EVASION, ALL_EVASIONS,$/;"	e	enum:__anon26::Stages	file:
ALL_PIECES	.\Stockfish-master\src\types.h	/^  ALL_PIECES = 0,$/;"	e	enum:PieceType
ANY_CASTLING	.\Stockfish-master\src\types.h	/^  ANY_CASTLING = WHITE_OO | WHITE_OOO | BLACK_OO | BLACK_OOO,$/;"	e	enum:CastlingRight
ASSERT	.\debug.h	15;"	d
ASSERT	.\debug.h	22;"	d
AdjacentFilesBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard AdjacentFilesBB[FILE_NB];$/;"	v
B1	.\constants.h	67;"	d
B2	.\constants.h	58;"	d
B3	.\constants.h	49;"	d
B4	.\constants.h	40;"	d
B5	.\constants.h	31;"	d
B6	.\constants.h	22;"	d
B7	.\constants.h	13;"	d
B8	.\constants.h	4;"	d
BAD_CAPTURES	.\Stockfish-master\src\movepick.cpp	/^    MAIN_SEARCH, GOOD_CAPTURES, KILLERS, GOOD_QUIETS, BAD_QUIETS, BAD_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
BAD_QUIETS	.\Stockfish-master\src\movepick.cpp	/^    MAIN_SEARCH, GOOD_CAPTURES, KILLERS, GOOD_QUIETS, BAD_QUIETS, BAD_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
BB	.\types.h	6;"	d
BCK2835_LIBRARY_BUILD	.\bcm2835.c	21;"	d	file:
BCM2835_BLOCK_SIZE	.\bcm2835.h	512;"	d
BCM2835_BSC0_BASE	.\bcm2835.h	438;"	d
BCM2835_BSC1_BASE	.\bcm2835.h	442;"	d
BCM2835_BSC_A	.\bcm2835.h	799;"	d
BCM2835_BSC_C	.\bcm2835.h	796;"	d
BCM2835_BSC_CLKT	.\bcm2835.h	803;"	d
BCM2835_BSC_C_CLEAR_1	.\bcm2835.h	811;"	d
BCM2835_BSC_C_CLEAR_2	.\bcm2835.h	812;"	d
BCM2835_BSC_C_I2CEN	.\bcm2835.h	806;"	d
BCM2835_BSC_C_INTD	.\bcm2835.h	809;"	d
BCM2835_BSC_C_INTR	.\bcm2835.h	807;"	d
BCM2835_BSC_C_INTT	.\bcm2835.h	808;"	d
BCM2835_BSC_C_READ	.\bcm2835.h	813;"	d
BCM2835_BSC_C_ST	.\bcm2835.h	810;"	d
BCM2835_BSC_DEL	.\bcm2835.h	802;"	d
BCM2835_BSC_DIV	.\bcm2835.h	801;"	d
BCM2835_BSC_DLEN	.\bcm2835.h	798;"	d
BCM2835_BSC_FIFO	.\bcm2835.h	800;"	d
BCM2835_BSC_FIFO_SIZE	.\bcm2835.h	827;"	d
BCM2835_BSC_S	.\bcm2835.h	797;"	d
BCM2835_BSC_S_CLKT	.\bcm2835.h	816;"	d
BCM2835_BSC_S_DONE	.\bcm2835.h	824;"	d
BCM2835_BSC_S_ERR	.\bcm2835.h	817;"	d
BCM2835_BSC_S_RXD	.\bcm2835.h	820;"	d
BCM2835_BSC_S_RXF	.\bcm2835.h	818;"	d
BCM2835_BSC_S_RXR	.\bcm2835.h	822;"	d
BCM2835_BSC_S_TA	.\bcm2835.h	825;"	d
BCM2835_BSC_S_TXD	.\bcm2835.h	821;"	d
BCM2835_BSC_S_TXE	.\bcm2835.h	819;"	d
BCM2835_BSC_S_TXW	.\bcm2835.h	823;"	d
BCM2835_CLOCK_BASE	.\bcm2835.h	432;"	d
BCM2835_CORE_CLK_HZ	.\bcm2835.h	408;"	d
BCM2835_GPAFEN0	.\bcm2835.h	546;"	d
BCM2835_GPAFEN1	.\bcm2835.h	547;"	d
BCM2835_GPAREN0	.\bcm2835.h	544;"	d
BCM2835_GPAREN1	.\bcm2835.h	545;"	d
BCM2835_GPCLR0	.\bcm2835.h	530;"	d
BCM2835_GPCLR1	.\bcm2835.h	531;"	d
BCM2835_GPEDS0	.\bcm2835.h	534;"	d
BCM2835_GPEDS1	.\bcm2835.h	535;"	d
BCM2835_GPFEN0	.\bcm2835.h	538;"	d
BCM2835_GPFEN1	.\bcm2835.h	539;"	d
BCM2835_GPFSEL0	.\bcm2835.h	522;"	d
BCM2835_GPFSEL1	.\bcm2835.h	523;"	d
BCM2835_GPFSEL2	.\bcm2835.h	524;"	d
BCM2835_GPFSEL3	.\bcm2835.h	525;"	d
BCM2835_GPFSEL4	.\bcm2835.h	526;"	d
BCM2835_GPFSEL5	.\bcm2835.h	527;"	d
BCM2835_GPHEN0	.\bcm2835.h	540;"	d
BCM2835_GPHEN1	.\bcm2835.h	541;"	d
BCM2835_GPIO_BASE	.\bcm2835.h	434;"	d
BCM2835_GPIO_FSEL_ALT0	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_ALT0  = 0x04,   \/*!< Alternate function 0 0b100 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_ALT1	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_ALT1  = 0x05,   \/*!< Alternate function 1 0b101 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_ALT2	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_ALT2  = 0x06,   \/*!< Alternate function 2 0b110, *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_ALT3	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_ALT3  = 0x07,   \/*!< Alternate function 3 0b111 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_ALT4	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_ALT4  = 0x03,   \/*!< Alternate function 4 0b011 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_ALT5	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_ALT5  = 0x02,   \/*!< Alternate function 5 0b010 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_INPT	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_INPT  = 0x00,   \/*!< Input 0b000 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_MASK	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_MASK  = 0x07    \/*!< Function select bits mask 0b111 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_FSEL_OUTP	.\bcm2835.h	/^    BCM2835_GPIO_FSEL_OUTP  = 0x01,   \/*!< Output 0b001 *\/$/;"	e	enum:__anon2
BCM2835_GPIO_PADS	.\bcm2835.h	430;"	d
BCM2835_GPIO_PUD_DOWN	.\bcm2835.h	/^    BCM2835_GPIO_PUD_DOWN    = 0x01,   \/*!< Enable Pull Down control 0b01 *\/$/;"	e	enum:__anon3
BCM2835_GPIO_PUD_OFF	.\bcm2835.h	/^    BCM2835_GPIO_PUD_OFF     = 0x00,   \/*!< Off ? disable pull-up\/down 0b00 *\/$/;"	e	enum:__anon3
BCM2835_GPIO_PUD_UP	.\bcm2835.h	/^    BCM2835_GPIO_PUD_UP      = 0x02    \/*!< Enable Pull Up control 0b10  *\/$/;"	e	enum:__anon3
BCM2835_GPIO_PWM	.\bcm2835.h	440;"	d
BCM2835_GPLEN0	.\bcm2835.h	542;"	d
BCM2835_GPLEN1	.\bcm2835.h	543;"	d
BCM2835_GPLEV0	.\bcm2835.h	532;"	d
BCM2835_GPLEV1	.\bcm2835.h	533;"	d
BCM2835_GPPUD	.\bcm2835.h	548;"	d
BCM2835_GPPUDCLK0	.\bcm2835.h	549;"	d
BCM2835_GPPUDCLK1	.\bcm2835.h	550;"	d
BCM2835_GPREN0	.\bcm2835.h	536;"	d
BCM2835_GPREN1	.\bcm2835.h	537;"	d
BCM2835_GPSET0	.\bcm2835.h	528;"	d
BCM2835_GPSET1	.\bcm2835.h	529;"	d
BCM2835_H	.\bcm2835.h	381;"	d
BCM2835_HAVE_DMB	.\bcm2835.h	394;"	d
BCM2835_I2C_CLOCK_DIVIDER_148	.\bcm2835.h	/^    BCM2835_I2C_CLOCK_DIVIDER_148    = 148        \/*!< 148 = 59ns = 1.689 MHz *\/$/;"	e	enum:__anon10
BCM2835_I2C_CLOCK_DIVIDER_150	.\bcm2835.h	/^    BCM2835_I2C_CLOCK_DIVIDER_150    = 150,       \/*!< 150 = 60ns = 1.666 MHz (default at reset) *\/$/;"	e	enum:__anon10
BCM2835_I2C_CLOCK_DIVIDER_2500	.\bcm2835.h	/^    BCM2835_I2C_CLOCK_DIVIDER_2500   = 2500,      \/*!< 2500 = 10us = 100 kHz *\/$/;"	e	enum:__anon10
BCM2835_I2C_CLOCK_DIVIDER_626	.\bcm2835.h	/^    BCM2835_I2C_CLOCK_DIVIDER_626    = 626,       \/*!< 622 = 2.504us = 399.3610 kHz *\/$/;"	e	enum:__anon10
BCM2835_I2C_REASON_ERROR_CLKT	.\bcm2835.h	/^    BCM2835_I2C_REASON_ERROR_CLKT    = 0x02,      \/*!< Received Clock Stretch Timeout *\/$/;"	e	enum:__anon11
BCM2835_I2C_REASON_ERROR_DATA	.\bcm2835.h	/^    BCM2835_I2C_REASON_ERROR_DATA    = 0x04       \/*!< Not all data is sent \/ received *\/$/;"	e	enum:__anon11
BCM2835_I2C_REASON_ERROR_NACK	.\bcm2835.h	/^    BCM2835_I2C_REASON_ERROR_NACK    = 0x01,      \/*!< Received a NACK *\/$/;"	e	enum:__anon11
BCM2835_I2C_REASON_OK	.\bcm2835.h	/^    BCM2835_I2C_REASON_OK   	     = 0x00,      \/*!< Success *\/$/;"	e	enum:__anon11
BCM2835_PADS_GPIO_0_27	.\bcm2835.h	579;"	d
BCM2835_PADS_GPIO_28_45	.\bcm2835.h	580;"	d
BCM2835_PADS_GPIO_46_53	.\bcm2835.h	581;"	d
BCM2835_PAD_DRIVE_10mA	.\bcm2835.h	591;"	d
BCM2835_PAD_DRIVE_12mA	.\bcm2835.h	592;"	d
BCM2835_PAD_DRIVE_14mA	.\bcm2835.h	593;"	d
BCM2835_PAD_DRIVE_16mA	.\bcm2835.h	594;"	d
BCM2835_PAD_DRIVE_2mA	.\bcm2835.h	587;"	d
BCM2835_PAD_DRIVE_4mA	.\bcm2835.h	588;"	d
BCM2835_PAD_DRIVE_6mA	.\bcm2835.h	589;"	d
BCM2835_PAD_DRIVE_8mA	.\bcm2835.h	590;"	d
BCM2835_PAD_GROUP_GPIO_0_27	.\bcm2835.h	/^    BCM2835_PAD_GROUP_GPIO_0_27         = 0, \/*!< Pad group for GPIO pads 0 to 27 *\/$/;"	e	enum:__anon4
BCM2835_PAD_GROUP_GPIO_28_45	.\bcm2835.h	/^    BCM2835_PAD_GROUP_GPIO_28_45        = 1, \/*!< Pad group for GPIO pads 28 to 45 *\/$/;"	e	enum:__anon4
BCM2835_PAD_GROUP_GPIO_46_53	.\bcm2835.h	/^    BCM2835_PAD_GROUP_GPIO_46_53        = 2  \/*!< Pad group for GPIO pads 46 to 53 *\/$/;"	e	enum:__anon4
BCM2835_PAD_HYSTERESIS_ENABLED	.\bcm2835.h	586;"	d
BCM2835_PAD_PASSWRD	.\bcm2835.h	584;"	d
BCM2835_PAD_SLEW_RATE_UNLIMITED	.\bcm2835.h	585;"	d
BCM2835_PAGE_SIZE	.\bcm2835.h	510;"	d
BCM2835_PERI_BASE	.\bcm2835.h	421;"	d
BCM2835_PERI_SIZE	.\bcm2835.h	423;"	d
BCM2835_PWM0_DATA	.\bcm2835.h	875;"	d
BCM2835_PWM0_ENABLE	.\bcm2835.h	900;"	d
BCM2835_PWM0_MS_MODE	.\bcm2835.h	893;"	d
BCM2835_PWM0_OFFSTATE	.\bcm2835.h	897;"	d
BCM2835_PWM0_RANGE	.\bcm2835.h	874;"	d
BCM2835_PWM0_REPEATFF	.\bcm2835.h	898;"	d
BCM2835_PWM0_REVPOLAR	.\bcm2835.h	896;"	d
BCM2835_PWM0_SERIAL	.\bcm2835.h	899;"	d
BCM2835_PWM0_USEFIFO	.\bcm2835.h	895;"	d
BCM2835_PWM1_DATA	.\bcm2835.h	878;"	d
BCM2835_PWM1_ENABLE	.\bcm2835.h	891;"	d
BCM2835_PWM1_MS_MODE	.\bcm2835.h	885;"	d
BCM2835_PWM1_OFFSTATE	.\bcm2835.h	888;"	d
BCM2835_PWM1_RANGE	.\bcm2835.h	877;"	d
BCM2835_PWM1_REPEATFF	.\bcm2835.h	889;"	d
BCM2835_PWM1_REVPOLAR	.\bcm2835.h	887;"	d
BCM2835_PWM1_SERIAL	.\bcm2835.h	890;"	d
BCM2835_PWM1_USEFIFO	.\bcm2835.h	886;"	d
BCM2835_PWMCLK_CNTL	.\bcm2835.h	881;"	d
BCM2835_PWMCLK_DIV	.\bcm2835.h	882;"	d
BCM2835_PWM_CLEAR_FIFO	.\bcm2835.h	894;"	d
BCM2835_PWM_CLOCK_DIVIDER_1	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_1     = 1        \/*!< 1 = 4.6875kHz, same as divider 4096 *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_1024	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_1024  = 1024,    \/*!< 1024 = 18.75kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_128	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_128   = 128,     \/*!< 128 = 150kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_16	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_16    = 16,      \/*!< 16 = 1.2MHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_2	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_2     = 2,       \/*!< 2 = 9.6MHz, fastest you can get *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_2048	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_2048  = 2048,    \/*!< 2048 = 9.375kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_256	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_256   = 256,     \/*!< 256 = 75kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_32	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_32    = 32,      \/*!< 32 = 600.0kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_4	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_4     = 4,       \/*!< 4 = 4.8MHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_512	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_512   = 512,     \/*!< 512 = 37.5kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_64	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_64    = 64,      \/*!< 64 = 300kHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CLOCK_DIVIDER_8	.\bcm2835.h	/^    BCM2835_PWM_CLOCK_DIVIDER_8     = 8,       \/*!< 8 = 2.4MHz *\/$/;"	e	enum:__anon12
BCM2835_PWM_CONTROL	.\bcm2835.h	871;"	d
BCM2835_PWM_DMAC	.\bcm2835.h	873;"	d
BCM2835_PWM_FIF1	.\bcm2835.h	876;"	d
BCM2835_PWM_PASSWRD	.\bcm2835.h	883;"	d
BCM2835_PWM_STATUS	.\bcm2835.h	872;"	d
BCM2835_REGBASE_BSC0	.\bcm2835.h	/^    BCM2835_REGBASE_BSC0 = 7, \/*!< Base of the BSC0 registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_BSC1	.\bcm2835.h	/^    BCM2835_REGBASE_BSC1 = 8  \/*!< Base of the BSC1 registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_CLK	.\bcm2835.h	/^    BCM2835_REGBASE_CLK  = 4, \/*!< Base of the CLK registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_GPIO	.\bcm2835.h	/^    BCM2835_REGBASE_GPIO = 2, \/*!< Base of the GPIO registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_PADS	.\bcm2835.h	/^    BCM2835_REGBASE_PADS = 5, \/*!< Base of the PADS registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_PWM	.\bcm2835.h	/^    BCM2835_REGBASE_PWM  = 3, \/*!< Base of the PWM registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_SPI0	.\bcm2835.h	/^    BCM2835_REGBASE_SPI0 = 6, \/*! Base of the SPI0 registers. *\/$/;"	e	enum:__anon1
BCM2835_REGBASE_ST	.\bcm2835.h	/^    BCM2835_REGBASE_ST   = 1, \/*!< Base of the ST (System Timer) registers. *\/$/;"	e	enum:__anon1
BCM2835_SPI0_BASE	.\bcm2835.h	436;"	d
BCM2835_SPI0_CLK	.\bcm2835.h	700;"	d
BCM2835_SPI0_CS	.\bcm2835.h	698;"	d
BCM2835_SPI0_CS_ADCS	.\bcm2835.h	720;"	d
BCM2835_SPI0_CS_CLEAR	.\bcm2835.h	726;"	d
BCM2835_SPI0_CS_CLEAR_RX	.\bcm2835.h	727;"	d
BCM2835_SPI0_CS_CLEAR_TX	.\bcm2835.h	728;"	d
BCM2835_SPI0_CS_CPHA	.\bcm2835.h	730;"	d
BCM2835_SPI0_CS_CPOL	.\bcm2835.h	729;"	d
BCM2835_SPI0_CS_CS	.\bcm2835.h	731;"	d
BCM2835_SPI0_CS_CSPOL	.\bcm2835.h	725;"	d
BCM2835_SPI0_CS_CSPOL0	.\bcm2835.h	710;"	d
BCM2835_SPI0_CS_CSPOL1	.\bcm2835.h	709;"	d
BCM2835_SPI0_CS_CSPOL2	.\bcm2835.h	708;"	d
BCM2835_SPI0_CS_DMAEN	.\bcm2835.h	723;"	d
BCM2835_SPI0_CS_DMA_LEN	.\bcm2835.h	707;"	d
BCM2835_SPI0_CS_DONE	.\bcm2835.h	715;"	d
BCM2835_SPI0_CS_INTD	.\bcm2835.h	722;"	d
BCM2835_SPI0_CS_INTR	.\bcm2835.h	721;"	d
BCM2835_SPI0_CS_LEN	.\bcm2835.h	718;"	d
BCM2835_SPI0_CS_LEN_LONG	.\bcm2835.h	706;"	d
BCM2835_SPI0_CS_LMONO	.\bcm2835.h	717;"	d
BCM2835_SPI0_CS_REN	.\bcm2835.h	719;"	d
BCM2835_SPI0_CS_RXD	.\bcm2835.h	714;"	d
BCM2835_SPI0_CS_RXF	.\bcm2835.h	711;"	d
BCM2835_SPI0_CS_RXR	.\bcm2835.h	712;"	d
BCM2835_SPI0_CS_TA	.\bcm2835.h	724;"	d
BCM2835_SPI0_CS_TE_EN	.\bcm2835.h	716;"	d
BCM2835_SPI0_CS_TXD	.\bcm2835.h	713;"	d
BCM2835_SPI0_DC	.\bcm2835.h	703;"	d
BCM2835_SPI0_DLEN	.\bcm2835.h	701;"	d
BCM2835_SPI0_FIFO	.\bcm2835.h	699;"	d
BCM2835_SPI0_LTOH	.\bcm2835.h	702;"	d
BCM2835_SPI_BIT_ORDER_LSBFIRST	.\bcm2835.h	/^    BCM2835_SPI_BIT_ORDER_LSBFIRST = 0,  \/*!< LSB First *\/$/;"	e	enum:__anon6
BCM2835_SPI_BIT_ORDER_MSBFIRST	.\bcm2835.h	/^    BCM2835_SPI_BIT_ORDER_MSBFIRST = 1   \/*!< MSB First *\/$/;"	e	enum:__anon6
BCM2835_SPI_CLOCK_DIVIDER_1	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_1     = 1        \/*!< 1 = 262.144us = 3.814697260kHz, same as 0\/65536 *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_1024	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_1024  = 1024,    \/*!< 1024 = 4.096us = 244.140625kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_128	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_128   = 128,     \/*!< 128 = 512ns = = 1.953125MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_16	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_16    = 16,      \/*!< 16 = 64ns = 15.625MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_16384	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_16384 = 16384,   \/*!< 16384 = 65.536us = 15.25878906kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_2	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_2     = 2,       \/*!< 2 = 8ns = 125MHz, fastest you can get *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_2048	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_2048  = 2048,    \/*!< 2048 = 8.192us = 122.0703125kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_256	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_256   = 256,     \/*!< 256 = 1.024us = 976.5625MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_32	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_32    = 32,      \/*!< 32 = 128ns = 7.8125MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_32768	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_32768 = 32768,   \/*!< 32768 = 131.072us = 7.629394531kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_4	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_4     = 4,       \/*!< 4 = 16ns = 62.5MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_4096	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_4096  = 4096,    \/*!< 4096 = 16.384us = 61.03515625kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_512	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_512   = 512,     \/*!< 512 = 2.048us = 488.28125kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_64	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_64    = 64,      \/*!< 64 = 256ns = 3.90625MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_65536	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_65536 = 0,       \/*!< 65536 = 262.144us = 3.814697260kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_8	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_8     = 8,       \/*!< 8 = 32ns = 31.25MHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CLOCK_DIVIDER_8192	.\bcm2835.h	/^    BCM2835_SPI_CLOCK_DIVIDER_8192  = 8192,    \/*!< 8192 = 32.768us = 30\/51757813kHz *\/$/;"	e	enum:__anon9
BCM2835_SPI_CS0	.\bcm2835.h	/^    BCM2835_SPI_CS0 = 0,     \/*!< Chip Select 0 *\/$/;"	e	enum:__anon8
BCM2835_SPI_CS1	.\bcm2835.h	/^    BCM2835_SPI_CS1 = 1,     \/*!< Chip Select 1 *\/$/;"	e	enum:__anon8
BCM2835_SPI_CS2	.\bcm2835.h	/^    BCM2835_SPI_CS2 = 2,     \/*!< Chip Select 2 (ie pins CS1 and CS2 are asserted) *\/$/;"	e	enum:__anon8
BCM2835_SPI_CS_NONE	.\bcm2835.h	/^    BCM2835_SPI_CS_NONE = 3  \/*!< No CS, control it yourself *\/$/;"	e	enum:__anon8
BCM2835_SPI_MODE0	.\bcm2835.h	/^    BCM2835_SPI_MODE0 = 0,  \/*!< CPOL = 0, CPHA = 0 *\/$/;"	e	enum:__anon7
BCM2835_SPI_MODE1	.\bcm2835.h	/^    BCM2835_SPI_MODE1 = 1,  \/*!< CPOL = 0, CPHA = 1 *\/$/;"	e	enum:__anon7
BCM2835_SPI_MODE2	.\bcm2835.h	/^    BCM2835_SPI_MODE2 = 2,  \/*!< CPOL = 1, CPHA = 0 *\/$/;"	e	enum:__anon7
BCM2835_SPI_MODE3	.\bcm2835.h	/^    BCM2835_SPI_MODE3 = 3   \/*!< CPOL = 1, CPHA = 1 *\/$/;"	e	enum:__anon7
BCM2835_ST_BASE	.\bcm2835.h	428;"	d
BCM2835_ST_CHI	.\bcm2835.h	865;"	d
BCM2835_ST_CLO	.\bcm2835.h	864;"	d
BCM2835_ST_CS	.\bcm2835.h	863;"	d
BCM2835_VERSION	.\bcm2835.h	385;"	d
BISHOP	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
BISHOP	.\types.h	/^	BISHOP,$/;"	e	enum:piece_e
BITBOARD_H_INCLUDED	.\Stockfish-master\src\bitboard.h	22;"	d
BITCOUNT_H_INCLUDED	.\Stockfish-master\src\bitcount.h	22;"	d
BIT_B	.\display.c	70;"	d	file:
BIT_C	.\display.c	67;"	d	file:
BIT_D	.\display.c	64;"	d	file:
BIT_DL	.\display.c	81;"	d	file:
BIT_F	.\display.c	87;"	d	file:
BIT_ID	.\display.c	57;"	d	file:
BIT_N	.\display.c	84;"	d	file:
BIT_RL	.\display.c	77;"	d	file:
BIT_S	.\display.c	60;"	d	file:
BIT_SC	.\display.c	74;"	d	file:
BLACK	.\Stockfish-master\src\types.h	/^  WHITE, BLACK, NO_COLOR, COLOR_NB = 2$/;"	e	enum:Color
BLACK	.\types.h	/^	BLACK,$/;"	e	enum:color_e
BLACK_CASTLE_LONG	.\types.h	55;"	d
BLACK_CASTLE_SHORT	.\types.h	54;"	d
BLACK_OO	.\Stockfish-master\src\types.h	/^  BLACK_OO  = WHITE_OO << 2,$/;"	e	enum:CastlingRight
BLACK_OOO	.\Stockfish-master\src\types.h	/^  BLACK_OOO = WHITE_OO << 3,$/;"	e	enum:CastlingRight
BMC2835_RPI2_DT_FILENAME	.\bcm2835.h	411;"	d
BMC2835_RPI2_DT_PERI_BASE_ADDRESS_OFFSET	.\bcm2835.h	413;"	d
BMC2835_RPI2_DT_PERI_SIZE_OFFSET	.\bcm2835.h	415;"	d
BOOK_ALREADY_CLOSED	.\book.h	/^  BOOK_ALREADY_CLOSED,$/;"	e	enum:__anon14
BOOK_FILE_NOT_FOUND	.\book.h	/^  BOOK_FILE_NOT_FOUND,$/;"	e	enum:__anon14
BOOK_MOVE_ALREADY_EXISTS	.\book.h	/^  BOOK_MOVE_ALREADY_EXISTS,$/;"	e	enum:__anon14
BOOK_NOT_OPEN	.\book.h	/^  BOOK_NOT_OPEN,$/;"	e	enum:__anon14
BOOK_NO_ERROR	.\book.h	/^  BOOK_NO_ERROR,$/;"	e	enum:__anon14
BOOK_POSITION_NOT_FOUND	.\book.h	/^  BOOK_POSITION_NOT_FOUND$/;"	e	enum:__anon14
BOOK_REPLACED	.\book.h	/^  BOOK_REPLACED,$/;"	e	enum:__anon14
BOUND_EXACT	.\Stockfish-master\src\types.h	/^  BOUND_EXACT = BOUND_UPPER | BOUND_LOWER$/;"	e	enum:Bound
BOUND_LOWER	.\Stockfish-master\src\types.h	/^  BOUND_LOWER,$/;"	e	enum:Bound
BOUND_NONE	.\Stockfish-master\src\types.h	/^  BOUND_NONE,$/;"	e	enum:Bound
BOUND_UPPER	.\Stockfish-master\src\types.h	/^  BOUND_UPPER,$/;"	e	enum:Bound
BRD_NO_ERROR	.\types.h	/^    BRD_NO_ERROR,$/;"	e	enum:boardErr_e
BSFTable	.\Stockfish-master\src\bitboard.cpp	/^  Square BSFTable[SQUARE_NB];   \/\/ To implement software bitscan$/;"	m	namespace:__anon18	file:
BSWAP32	.\Stockfish-master\src\syzygy\tbcore.h	33;"	d
BSWAP32	.\Stockfish-master\src\syzygy\tbcore.h	36;"	d
BSWAP64	.\Stockfish-master\src\syzygy\tbcore.h	34;"	d
BSWAP64	.\Stockfish-master\src\syzygy\tbcore.h	37;"	d
BUSY_FLAG_MASK	.\display.c	94;"	d	file:
BUTTON_H	.\button.h	2;"	d
BUTTON_PORT	.\gpio.h	19;"	d
BUTTON_SWITCH_INT_PIN	.\gpio.h	38;"	d
B_BISHOP	.\Stockfish-master\src\types.h	/^  B_PAWN = 9, B_KNIGHT, B_BISHOP, B_ROOK, B_QUEEN, B_KING,$/;"	e	enum:Piece
B_BLINK_OFF	.\display.c	72;"	d	file:
B_BLINK_ON	.\display.c	71;"	d	file:
B_DOWN_MASK	.\gpio.h	23;"	d
B_KING	.\Stockfish-master\src\types.h	/^  B_PAWN = 9, B_KNIGHT, B_BISHOP, B_ROOK, B_QUEEN, B_KING,$/;"	e	enum:Piece
B_KNIGHT	.\Stockfish-master\src\types.h	/^  B_PAWN = 9, B_KNIGHT, B_BISHOP, B_ROOK, B_QUEEN, B_KING,$/;"	e	enum:Piece
B_LEFT_MASK	.\gpio.h	24;"	d
B_MASK	.\gpio.h	27;"	d
B_PAWN	.\Stockfish-master\src\types.h	/^  B_PAWN = 9, B_KNIGHT, B_BISHOP, B_ROOK, B_QUEEN, B_KING,$/;"	e	enum:Piece
B_PRESSED	.\switch.h	/^   B_PRESSED$/;"	e	enum:buttonPress_e
B_PRESS_MASK	.\gpio.h	21;"	d
B_QUEEN	.\Stockfish-master\src\types.h	/^  B_PAWN = 9, B_KNIGHT, B_BISHOP, B_ROOK, B_QUEEN, B_KING,$/;"	e	enum:Piece
B_RELEASED	.\switch.h	/^   B_RELEASED,$/;"	e	enum:buttonPress_e
B_RIGHT_MASK	.\gpio.h	25;"	d
B_ROOK	.\Stockfish-master\src\types.h	/^  B_PAWN = 9, B_KNIGHT, B_BISHOP, B_ROOK, B_QUEEN, B_KING,$/;"	e	enum:Piece
B_UP_MASK	.\gpio.h	22;"	d
Backward	.\Stockfish-master\src\pawns.cpp	/^  const Score Backward[2] = { S(67, 42), S(49, 24) };$/;"	m	namespace:__anon27	file:
BetweenBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard BetweenBB[SQUARE_NB][SQUARE_NB];$/;"	v
BishopAttacks	.\Stockfish-master\src\bitboard.cpp	/^Bitboard* BishopAttacks[SQUARE_NB];$/;"	v
BishopCheck	.\Stockfish-master\src\evaluate.cpp	/^  const int BishopCheck       = 6;$/;"	m	namespace:__anon21	file:
BishopMagics	.\Stockfish-master\src\bitboard.cpp	/^Bitboard  BishopMagics [SQUARE_NB];$/;"	v
BishopMasks	.\Stockfish-master\src\bitboard.cpp	/^Bitboard  BishopMasks  [SQUARE_NB];$/;"	v
BishopPawns	.\Stockfish-master\src\evaluate.cpp	/^  const Score BishopPawns         = S( 8, 12);$/;"	m	namespace:__anon21	file:
BishopShifts	.\Stockfish-master\src\bitboard.cpp	/^unsigned  BishopShifts [SQUARE_NB];$/;"	v
BishopTable	.\Stockfish-master\src\bitboard.cpp	/^  Bitboard BishopTable[0x1480]; \/\/ To store bishop attacks$/;"	m	namespace:__anon18	file:
BitCountType	.\Stockfish-master\src\bitcount.h	/^enum BitCountType {$/;"	g
BitReverseTable256	.\util.c	/^static const unsigned char BitReverseTable256[] =$/;"	v	file:
Bitbases	.\Stockfish-master\src\bitboard.h	/^namespace Bitbases {$/;"	n
Bitboard	.\Stockfish-master\src\types.h	/^typedef uint64_t Bitboard;$/;"	t
Bitboards	.\Stockfish-master\src\bitboard.h	/^namespace Bitboards {$/;"	n
Bonus	.\Stockfish-master\src\psqt.cpp	/^const Score Bonus[][RANK_NB][int(FILE_NB) \/ 2] = {$/;"	m	namespace:PSQT	file:
Bound	.\Stockfish-master\src\types.h	/^enum Bound {$/;"	g
C1	.\constants.h	68;"	d
C2	.\constants.h	59;"	d
C3	.\constants.h	50;"	d
C4	.\constants.h	41;"	d
C5	.\constants.h	32;"	d
C6	.\constants.h	23;"	d
C7	.\constants.h	14;"	d
C8	.\constants.h	5;"	d
CAPS_ALL	.\Archive\displayStrings.h	/^   CAPS_ALL$/;"	e	enum:displayCap_e
CAPS_FIRST	.\Archive\displayStrings.h	/^   CAPS_FIRST,$/;"	e	enum:displayCap_e
CAPS_NONE	.\Archive\displayStrings.h	/^   CAPS_NONE,$/;"	e	enum:displayCap_e
CAPTURES	.\Stockfish-master\src\movegen.h	/^  CAPTURES,$/;"	e	enum:GenType
CASTLING	.\Stockfish-master\src\types.h	/^  CASTLING  = 3 << 14$/;"	e	enum:MoveType
CASTLING_RIGHT_NB	.\Stockfish-master\src\types.h	/^  CASTLING_RIGHT_NB = 16$/;"	e	enum:CastlingRight
CASTLING_SIDE_NB	.\Stockfish-master\src\types.h	/^  KING_SIDE, QUEEN_SIDE, CASTLING_SIDE_NB = 2$/;"	e	enum:CastlingSide
CHECKMATE	.\moves.h	3;"	d
CHECKS	.\Stockfish-master\src\movepick.cpp	/^    QSEARCH_WITH_CHECKS, QCAPTURES_1, CHECKS,$/;"	e	enum:__anon26::Stages	file:
CLEAR_DISP	.\display.c	54;"	d	file:
CLR_E	.\display.c	29;"	d	file:
CLR_RS	.\display.c	31;"	d	file:
CLR_RW	.\display.c	33;"	d	file:
CMD_DISPLAY_CTRL	.\display.c	63;"	d	file:
CMD_ENTRY_MODE	.\display.c	56;"	d	file:
CMD_FUNC_SET	.\display.c	80;"	d	file:
CMD_SET_CG_ADDR	.\display.c	90;"	d	file:
CMD_SET_DD_ADDR	.\display.c	91;"	d	file:
CMD_SHIFT_CTRL	.\display.c	73;"	d	file:
CNT_32	.\Stockfish-master\src\bitcount.h	/^  CNT_32,$/;"	e	enum:BitCountType
CNT_32_MAX15	.\Stockfish-master\src\bitcount.h	/^  CNT_32_MAX15,$/;"	e	enum:BitCountType
CNT_64	.\Stockfish-master\src\bitcount.h	/^  CNT_64,$/;"	e	enum:BitCountType
CNT_64_MAX15	.\Stockfish-master\src\bitcount.h	/^  CNT_64_MAX15,$/;"	e	enum:BitCountType
CNT_HW_POPCNT	.\Stockfish-master\src\bitcount.h	/^  CNT_HW_POPCNT$/;"	e	enum:BitCountType
COLOR_NB	.\Stockfish-master\src\types.h	/^  WHITE, BLACK, NO_COLOR, COLOR_NB = 2$/;"	e	enum:Color
COLOR_NONE	.\types.h	/^	COLOR_NONE$/;"	e	enum:color_e
CTRL_PORT_REG_ADDR	.\display.c	18;"	d	file:
C_CURSOR_OFF	.\display.c	69;"	d	file:
C_CURSOR_ON	.\display.c	68;"	d	file:
CacheLineSize	.\Stockfish-master\src\tt.h	/^  static const int CacheLineSize = 64;$/;"	m	class:TranspositionTable
Cardinality	.\Stockfish-master\src\search.cpp	/^  int Cardinality;$/;"	m	namespace:Tablebases	file:
CaseInsensitiveLess	.\Stockfish-master\src\uci.h	/^struct CaseInsensitiveLess {$/;"	s	namespace:UCI
CastlingRight	.\Stockfish-master\src\types.h	/^enum CastlingRight {$/;"	g
CastlingSide	.\Stockfish-master\src\types.h	/^enum CastlingSide {$/;"	g
CenterBind	.\Stockfish-master\src\pawns.cpp	/^  const Score CenterBind = S(16, 0);$/;"	m	namespace:__anon27	file:
CheckInfo	.\Stockfish-master\src\position.cpp	/^CheckInfo::CheckInfo(const Position& pos) {$/;"	f	class:CheckInfo
CheckInfo	.\Stockfish-master\src\position.h	/^struct CheckInfo {$/;"	s
Checked	.\Stockfish-master\src\evaluate.cpp	/^  const Score Checked             = S(20, 20);$/;"	m	namespace:__anon21	file:
Cluster	.\Stockfish-master\src\tt.h	/^  struct Cluster {$/;"	s	class:TranspositionTable
ClusterSize	.\Stockfish-master\src\tt.h	/^  static const int ClusterSize = 3;$/;"	m	class:TranspositionTable
Color	.\Stockfish-master\src\types.h	/^enum Color {$/;"	g
ConditionVariable	.\Stockfish-master\src\thread_win32.h	/^typedef std::condition_variable ConditionVariable;$/;"	t
ConditionVariable	.\Stockfish-master\src\thread_win32.h	/^typedef std::condition_variable_any ConditionVariable;$/;"	t
Connected	.\Stockfish-master\src\pawns.cpp	/^  Score Connected[2][2][2][RANK_NB];$/;"	m	namespace:__anon27	file:
CounterMovesHistory	.\Stockfish-master\src\search.cpp	/^  CounterMovesHistoryStats CounterMovesHistory;$/;"	m	namespace:__anon29	file:
CounterMovesHistoryStats	.\Stockfish-master\src\movepick.h	/^typedef Stats<CounterMovesStats> CounterMovesHistoryStats;$/;"	t
CounterMovesStats	.\Stockfish-master\src\movepick.h	/^typedef Stats<Value,  true> CounterMovesStats;$/;"	t
D1	.\constants.h	69;"	d
D2	.\constants.h	60;"	d
D3	.\constants.h	51;"	d
D4	.\constants.h	42;"	d
D5	.\constants.h	33;"	d
D6	.\constants.h	24;"	d
D7	.\constants.h	15;"	d
D8	.\constants.h	6;"	d
DATA_PORT_REG_ADDR	.\display.c	17;"	d	file:
DEBUG_H	.\debug.h	2;"	d
DEBUG_PRINT	.\debug.h	18;"	d
DEBUG_PRINT	.\debug.h	23;"	d
DEBUG_ShowDisplayContents	.\display.c	/^void DEBUG_ShowDisplayContents( void )$/;"	f
DECODE_MODE_COMMAND	.\led.h	7;"	d
DEFVALA_ADDR	.\gpio.h	58;"	d
DEFVALB_ADDR	.\gpio.h	59;"	d
DELTA_E	.\Stockfish-master\src\types.h	/^  DELTA_E =  1,$/;"	e	enum:Square
DELTA_N	.\Stockfish-master\src\types.h	/^  DELTA_N =  8,$/;"	e	enum:Square
DELTA_NE	.\Stockfish-master\src\types.h	/^  DELTA_NE = DELTA_N + DELTA_E,$/;"	e	enum:Square
DELTA_NN	.\Stockfish-master\src\types.h	/^  DELTA_NN = DELTA_N + DELTA_N,$/;"	e	enum:Square
DELTA_NW	.\Stockfish-master\src\types.h	/^  DELTA_NW = DELTA_N + DELTA_W$/;"	e	enum:Square
DELTA_S	.\Stockfish-master\src\types.h	/^  DELTA_S = -8,$/;"	e	enum:Square
DELTA_SE	.\Stockfish-master\src\types.h	/^  DELTA_SE = DELTA_S + DELTA_E,$/;"	e	enum:Square
DELTA_SS	.\Stockfish-master\src\types.h	/^  DELTA_SS = DELTA_S + DELTA_S,$/;"	e	enum:Square
DELTA_SW	.\Stockfish-master\src\types.h	/^  DELTA_SW = DELTA_S + DELTA_W,$/;"	e	enum:Square
DELTA_W	.\Stockfish-master\src\types.h	/^  DELTA_W = -1,$/;"	e	enum:Square
DEPTH_MAX	.\Stockfish-master\src\types.h	/^  DEPTH_MAX  = MAX_PLY$/;"	e	enum:Depth
DEPTH_NONE	.\Stockfish-master\src\types.h	/^  DEPTH_NONE = -6,$/;"	e	enum:Depth
DEPTH_QS_CHECKS	.\Stockfish-master\src\types.h	/^  DEPTH_QS_CHECKS     =  0,$/;"	e	enum:Depth
DEPTH_QS_NO_CHECKS	.\Stockfish-master\src\types.h	/^  DEPTH_QS_NO_CHECKS  = -1,$/;"	e	enum:Depth
DEPTH_QS_RECAPTURES	.\Stockfish-master\src\types.h	/^  DEPTH_QS_RECAPTURES = -5,$/;"	e	enum:Depth
DEPTH_ZERO	.\Stockfish-master\src\types.h	/^  DEPTH_ZERO          =  0,$/;"	e	enum:Depth
DIAG_H	.\diag.h	2;"	d
DIAG_log	.\diag.c	/^void DIAG_log(char *filename, char *msg, ...)$/;"	f
DIAG_print	.\diag.c	/^void DIAG_print(char *msg, ...)$/;"	f
DIR_NONE	.\types.h	/^	DIR_NONE$/;"	e	enum:dir_e
DISPLAY_CTRL	.\display.c	99;"	d	file:
DISPLAY_STACK_DEPTH	.\display.c	14;"	d	file:
DISPLAY_TEST_COMMAND	.\led.h	22;"	d
DLOG	.\diag.h	11;"	d
DLOG	.\diag.h	13;"	d
DL_4_BITS	.\display.c	83;"	d	file:
DL_8_BITS	.\display.c	82;"	d	file:
DPRINT	.\diag.h	5;"	d
DPRINT	.\diag.h	7;"	d
DRAW	.\Stockfish-master\src\bitbase.cpp	/^    DRAW    = 2,$/;"	e	enum:__anon16::Result	file:
DTZDIR	.\Stockfish-master\src\syzygy\tbcore.h	43;"	d
DTZEntry_pawn	.\Stockfish-master\src\syzygy\tbcore.h	/^struct DTZEntry_pawn {$/;"	s
DTZEntry_piece	.\Stockfish-master\src\syzygy\tbcore.h	/^struct DTZEntry_piece {$/;"	s
DTZSUFFIX	.\Stockfish-master\src\syzygy\tbcore.h	41;"	d
DTZTableEntry	.\Stockfish-master\src\syzygy\tbcore.h	/^struct DTZTableEntry {$/;"	s
DTZ_ENTRIES	.\Stockfish-master\src\syzygy\tbcore.cpp	51;"	d	file:
DTZ_MAGIC	.\Stockfish-master\src\syzygy\tbcore.h	/^const ubyte DTZ_MAGIC[4] = { 0xd7, 0x66, 0x0c, 0xa5 };$/;"	v
DTZ_table	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static struct DTZTableEntry DTZ_table[DTZ_ENTRIES];$/;"	v	typeref:struct:DTZTableEntry	file:
D_DISPLAY_OFF	.\display.c	66;"	d	file:
D_DISPLAY_ON	.\display.c	65;"	d	file:
DarkSquares	.\Stockfish-master\src\bitboard.h	/^const Bitboard DarkSquares = 0xAA55AA55AA55AA55ULL;$/;"	v
DeBruijn32	.\Stockfish-master\src\bitboard.cpp	/^  const uint32_t DeBruijn32 = 0x783A9B23;$/;"	m	namespace:__anon18	file:
DeBruijn64	.\Stockfish-master\src\bitboard.cpp	/^  const uint64_t DeBruijn64 = 0x3F79D71B4CB0A89ULL;$/;"	m	namespace:__anon18	file:
Defaults	.\Stockfish-master\src\benchmark.cpp	/^const vector<string> Defaults = {$/;"	m	namespace:__anon15	file:
Depth	.\Stockfish-master\src\types.h	/^enum Depth {$/;"	g
DistanceRingBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard DistanceRingBB[SQUARE_NB][8];$/;"	v
Doubled	.\Stockfish-master\src\pawns.cpp	/^  const Score Doubled[FILE_NB] = {$/;"	m	namespace:__anon27	file:
DrawValue	.\Stockfish-master\src\search.cpp	/^  Value DrawValue[COLOR_NB];$/;"	m	namespace:__anon29	file:
E1	.\constants.h	70;"	d
E2	.\constants.h	61;"	d
E3	.\constants.h	52;"	d
E4	.\constants.h	43;"	d
E5	.\constants.h	34;"	d
E6	.\constants.h	25;"	d
E7	.\constants.h	16;"	d
E8	.\constants.h	7;"	d
EAST	.\types.h	/^	EAST,$/;"	e	enum:dir_e
EG	.\Stockfish-master\src\types.h	/^  MG = 0, EG = 1, PHASE_NB = 2$/;"	e	enum:Phase
ENABLE_BASE_OPERATORS_ON	.\Stockfish-master\src\types.h	281;"	d
ENABLE_BASE_OPERATORS_ON	.\Stockfish-master\src\types.h	311;"	d
ENABLE_FULL_OPERATORS_ON	.\Stockfish-master\src\types.h	291;"	d
ENABLE_FULL_OPERATORS_ON	.\Stockfish-master\src\types.h	310;"	d
ENDGAME_H_INCLUDED	.\Stockfish-master\src\endgame.h	22;"	d
ENPASSANT	.\Stockfish-master\src\types.h	/^  ENPASSANT = 2 << 14,$/;"	e	enum:MoveType
ENTRY_MODE	.\display.c	98;"	d	file:
ERR_BAD_BLACK_KING_COUNT	.\types.h	/^    ERR_BAD_BLACK_KING_COUNT,$/;"	e	enum:boardErr_e
ERR_BAD_PAWN_POSITION	.\types.h	/^    ERR_BAD_PAWN_POSITION,$/;"	e	enum:boardErr_e
ERR_BAD_WHITE_KING_COUNT	.\types.h	/^    ERR_BAD_WHITE_KING_COUNT,$/;"	e	enum:boardErr_e
ERR_OPPOSING_KINGS	.\types.h	/^    ERR_OPPOSING_KINGS,$/;"	e	enum:boardErr_e
ERR_OPP_ALREADY_IN_CHECK	.\types.h	/^    ERR_OPP_ALREADY_IN_CHECK,$/;"	e	enum:boardErr_e
ERR_TOO_MANY_BLACK_PIECES	.\types.h	/^    ERR_TOO_MANY_BLACK_PIECES,$/;"	e	enum:boardErr_e
ERR_TOO_MANY_WHITE_PIECES	.\types.h	/^    ERR_TOO_MANY_WHITE_PIECES,$/;"	e	enum:boardErr_e
EVALUATE_H_INCLUDED	.\Stockfish-master\src\evaluate.h	22;"	d
EVASION	.\Stockfish-master\src\movepick.cpp	/^    EVASION, ALL_EVASIONS,$/;"	e	enum:__anon26::Stages	file:
EVASIONS	.\Stockfish-master\src\movegen.h	/^  EVASIONS,$/;"	e	enum:GenType
EVENT_H	.\event.h	2;"	d
EVENT_QUEUE_SIZE	.\event.h	8;"	d
EVQ_EVENT_MANAGER	.\event.h	/^    EVQ_EVENT_MANAGER,$/;"	e	enum:eQueIndex_e
EVQ_TOTAL	.\event.h	/^    EVQ_TOTAL$/;"	e	enum:eQueIndex_e
EV_BUTTON_POS	.\hsmDefs.h	/^   EV_BUTTON_POS,$/;"	e	enum:eventId_e
EV_BUTTON_STATE	.\hsmDefs.h	/^   EV_BUTTON_STATE,$/;"	e	enum:eventId_e
EV_GAME_DONE	.\hsmDefs.h	/^   EV_GAME_DONE,$/;"	e	enum:eventId_e
EV_GOTO_BOARD_OPTIONS	.\hsmDefs.h	/^   EV_GOTO_BOARD_OPTIONS,$/;"	e	enum:eventId_e
EV_GOTO_DIAG_MENU	.\hsmDefs.h	/^   EV_GOTO_DIAG_MENU,$/;"	e	enum:eventId_e
EV_GOTO_ENGINE_OPTIONS	.\hsmDefs.h	/^   EV_GOTO_ENGINE_OPTIONS,$/;"	e	enum:eventId_e
EV_GOTO_GAME	.\hsmDefs.h	/^   EV_GOTO_GAME,$/;"	e	enum:eventId_e
EV_GOTO_GAMEMENU	.\hsmDefs.h	/^   EV_GOTO_GAMEMENU,$/;"	e	enum:eventId_e
EV_GOTO_GAME_OPTIONS	.\hsmDefs.h	/^   EV_GOTO_GAME_OPTIONS,$/;"	e	enum:eventId_e
EV_GOTO_MAIN_MENU	.\hsmDefs.h	/^   EV_GOTO_MAIN_MENU,$/;"	e	enum:eventId_e
EV_GOTO_OPTION_MENU	.\hsmDefs.h	/^   EV_GOTO_OPTION_MENU,$/;"	e	enum:eventId_e
EV_GOTO_PLAYING_GAME	.\hsmDefs.h	/^   EV_GOTO_PLAYING_GAME,$/;"	e	enum:eventId_e
EV_GOTO_TIME_OPTIONS	.\hsmDefs.h	/^   EV_GOTO_TIME_OPTIONS,$/;"	e	enum:eventId_e
EV_MOVE_CLOCK_TIC	.\hsmDefs.h	/^   EV_MOVE_CLOCK_TIC,$/;"	e	enum:eventId_e
EV_NULL	.\hsmDefs.h	/^   EV_NULL,           \/\/ Dummy event.  Value of 0 reserved for use by HSM logic$/;"	e	enum:eventId_e
EV_PIECE_DROP	.\hsmDefs.h	/^   EV_PIECE_DROP,$/;"	e	enum:eventId_e
EV_PIECE_LIFT	.\hsmDefs.h	/^   EV_PIECE_LIFT,$/;"	e	enum:eventId_e
EV_PLAYER_MOVED_FOR_COMP	.\hsmDefs.h	/^   EV_PLAYER_MOVED_FOR_COMP,$/;"	e	enum:eventId_e
EV_PROCESS_COMPUTER_MOVE	.\hsmDefs.h	/^   EV_PROCESS_COMPUTER_MOVE,$/;"	e	enum:eventId_e
EV_START_INIT_POS_SETUP	.\hsmDefs.h	/^   EV_START_INIT_POS_SETUP,$/;"	e	enum:eventId_e
EV_START_SENSOR_DIAG	.\hsmDefs.h	/^   EV_START_SENSOR_DIAG,$/;"	e	enum:eventId_e
E_MASK	.\gpio.h	15;"	d
EasyMove	.\Stockfish-master\src\search.cpp	/^  EasyMoveManager EasyMove;$/;"	m	namespace:__anon29	file:
EasyMoveManager	.\Stockfish-master\src\search.cpp	/^  struct EasyMoveManager {$/;"	s	namespace:__anon29	file:
Eattacks	.\bitboard.c	/^BB Eattacks(BB osliders, BB empty) {$/;"	f
Endgame	.\Stockfish-master\src\endgame.h	/^  explicit Endgame(Color c) : strongSide(c), weakSide(~c) {}$/;"	f	struct:Endgame
Endgame	.\Stockfish-master\src\endgame.h	/^struct Endgame : public EndgameBase<T> {$/;"	s
EndgameBase	.\Stockfish-master\src\endgame.h	/^struct EndgameBase {$/;"	s
EndgameType	.\Stockfish-master\src\endgame.h	/^enum EndgameType {$/;"	g
Endgames	.\Stockfish-master\src\endgame.cpp	/^Endgames::Endgames() {$/;"	f	class:Endgames
Endgames	.\Stockfish-master\src\endgame.h	/^class Endgames {$/;"	c
Entry	.\Stockfish-master\src\material.h	/^struct Entry {$/;"	s	namespace:Material
Entry	.\Stockfish-master\src\pawns.h	/^struct Entry {$/;"	s	namespace:Pawns
Eval	.\Stockfish-master\src\evaluate.h	/^namespace Eval {$/;"	n
EvalInfo	.\Stockfish-master\src\evaluate.cpp	/^  struct EvalInfo {$/;"	s	namespace:__anon21	file:
EvaluateKXK	.\Stockfish-master\src\material.cpp	/^  Endgame<KXK>    EvaluateKXK[] = { Endgame<KXK>(WHITE),    Endgame<KXK>(BLACK) };$/;"	m	namespace:__anon23	file:
ExtMove	.\Stockfish-master\src\movegen.h	/^struct ExtMove {$/;"	s
F1	.\constants.h	71;"	d
F2	.\constants.h	62;"	d
F3	.\constants.h	53;"	d
F4	.\constants.h	44;"	d
F5	.\constants.h	35;"	d
F6	.\constants.h	26;"	d
F7	.\constants.h	17;"	d
F8	.\constants.h	8;"	d
FALSE	.\types.h	/^	FALSE,$/;"	e	enum:bool_e
FD	.\Stockfish-master\src\syzygy\tbcore.h	11;"	d
FD	.\Stockfish-master\src\syzygy\tbcore.h	16;"	d
FD_ERR	.\Stockfish-master\src\syzygy\tbcore.h	12;"	d
FD_ERR	.\Stockfish-master\src\syzygy\tbcore.h	17;"	d
FEN_BAD_SEPARATOR	.\board.h	/^	FEN_BAD_SEPARATOR,$/;"	e	enum:fenErr_e
FEN_ILLEGAL_CHARACTER_FIELD_1	.\board.h	/^	FEN_ILLEGAL_CHARACTER_FIELD_1,$/;"	e	enum:fenErr_e
FEN_INVALID_FIELD_2	.\board.h	/^	FEN_INVALID_FIELD_2,$/;"	e	enum:fenErr_e
FEN_INVALID_FIELD_3	.\board.h	/^	FEN_INVALID_FIELD_3,$/;"	e	enum:fenErr_e
FEN_INVALID_FIELD_4	.\board.h	/^	FEN_INVALID_FIELD_4,$/;"	e	enum:fenErr_e
FEN_INVALID_FIELD_5	.\board.h	/^	FEN_INVALID_FIELD_5,$/;"	e	enum:fenErr_e
FEN_INVALID_FIELD_6	.\board.h	/^	FEN_INVALID_FIELD_6$/;"	e	enum:fenErr_e
FEN_OK	.\board.h	/^	FEN_OK,$/;"	e	enum:fenErr_e
FEN_PARSE_ERR_FIELD_1	.\board.h	/^	FEN_PARSE_ERR_FIELD_1,$/;"	e	enum:fenErr_e
FILE_A	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_B	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_C	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_D	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_E	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_F	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_G	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_H	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FILE_NB	.\Stockfish-master\src\types.h	/^  FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H, FILE_NB$/;"	e	enum:File
FLUSH_CONTROL	.\display.c	38;"	d	file:
FLUSH_DATA	.\display.c	43;"	d	file:
FUNC_SET	.\display.c	101;"	d	file:
F_5x10	.\display.c	88;"	d	file:
F_5x7	.\display.c	89;"	d	file:
File	.\Stockfish-master\src\types.h	/^enum File {$/;"	g
FileABB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileABB = 0x0101010101010101ULL;$/;"	v
FileBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard FileBB[FILE_NB];$/;"	v
FileBBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileBBB = FileABB << 1;$/;"	v
FileCBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileCBB = FileABB << 2;$/;"	v
FileDBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileDBB = FileABB << 3;$/;"	v
FileEBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileEBB = FileABB << 4;$/;"	v
FileFBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileFBB = FileABB << 5;$/;"	v
FileGBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileGBB = FileABB << 6;$/;"	v
FileHBB	.\Stockfish-master\src\bitboard.h	/^const Bitboard FileHBB = FileABB << 7;$/;"	v
Fn	.\Stockfish-master\src\bitboard.cpp	/^  typedef unsigned (Fn)(Square, Bitboard);$/;"	t	namespace:__anon18	file:
ForwardBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard ForwardBB[COLOR_NB][SQUARE_NB];$/;"	v
Full	.\Stockfish-master\src\bitcount.h	/^const BitCountType Full  = HasPopCnt ? CNT_HW_POPCNT : Is64Bit ? CNT_64       : CNT_32;$/;"	v
FutilityMoveCounts	.\Stockfish-master\src\search.cpp	/^  int FutilityMoveCounts[2][16];  \/\/ [improving][depth]$/;"	m	namespace:__anon29	file:
G1	.\constants.h	72;"	d
G2	.\constants.h	63;"	d
G3	.\constants.h	54;"	d
G4	.\constants.h	45;"	d
G5	.\constants.h	36;"	d
G6	.\constants.h	27;"	d
G7	.\constants.h	18;"	d
G8	.\constants.h	9;"	d
GAME_AT_CHECKMATE	.\types.h	/^   GAME_AT_CHECKMATE,  \/\/ Side to move in check with no legal moves$/;"	e	enum:gameDisposition_e
GAME_AT_STALEMATE	.\types.h	/^   GAME_AT_STALEMATE   \/\/ Size to move not in check with no legal moves$/;"	e	enum:gameDisposition_e
GAME_END_ABORT	.\types.h	/^   GAME_END_ABORT$/;"	e	enum:endReason_s
GAME_END_CHECKMATE	.\types.h	/^   GAME_END_CHECKMATE,$/;"	e	enum:endReason_s
GAME_END_STALEMATE	.\types.h	/^   GAME_END_STALEMATE,$/;"	e	enum:endReason_s
GAME_INVALID	.\types.h	/^   GAME_INVALID,       \/\/ Invalid position$/;"	e	enum:gameDisposition_e
GAME_PLAYABLE	.\types.h	/^   GAME_PLAYABLE,      \/\/ Valid position with available moves$/;"	e	enum:gameDisposition_e
GOOD_CAPTURES	.\Stockfish-master\src\movepick.cpp	/^    MAIN_SEARCH, GOOD_CAPTURES, KILLERS, GOOD_QUIETS, BAD_QUIETS, BAD_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
GOOD_QUIETS	.\Stockfish-master\src\movepick.cpp	/^    MAIN_SEARCH, GOOD_CAPTURES, KILLERS, GOOD_QUIETS, BAD_QUIETS, BAD_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
GPINTENA_ADDR	.\gpio.h	47;"	d
GPINTENB_ADDR	.\gpio.h	48;"	d
GPIOA_ADDR	.\gpio.h	62;"	d
GPIOB_ADDR	.\gpio.h	63;"	d
GPIO_EXPANDER_21_ADDR	.\gpio.h	6;"	d
GPIO_EXPANDER_43_ADDR	.\gpio.h	5;"	d
GPIO_EXPANDER_65_ADDR	.\gpio.h	4;"	d
GPIO_EXPANDER_87_ADDR	.\gpio.h	3;"	d
GPIO_EXPANDER_UI_ADDR	.\gpio.h	10;"	d
GPPUA_ADDR	.\gpio.h	54;"	d
GPPUB_ADDR	.\gpio.h	55;"	d
GenType	.\Stockfish-master\src\movegen.h	/^enum GenType {$/;"	g
GetSwitchStates	.\switch.c	/^uint64_t GetSwitchStates ( void )$/;"	f
H1	.\constants.h	73;"	d
H2	.\constants.h	64;"	d
H3	.\constants.h	55;"	d
H4	.\constants.h	46;"	d
H5	.\constants.h	37;"	d
H6	.\constants.h	28;"	d
H7	.\constants.h	19;"	d
H8	.\constants.h	10;"	d
HIGH	.\bcm2835.h	403;"	d
HSHMAX	.\Stockfish-master\src\syzygy\tbcore.cpp	24;"	d	file:
HSM_CIRCULAR_HIERARCY	.\hsm.h	/^   HSM_CIRCULAR_HIERARCY,$/;"	e	enum:HSM_Error_e
HSM_DEFS_H	.\hsmDefs.h	2;"	d
HSM_DPRINT	.\hsm.c	19;"	d	file:
HSM_EVENT_LIST_NOT_SORTED	.\hsm.h	/^   HSM_EVENT_LIST_NOT_SORTED,$/;"	e	enum:HSM_Error_e
HSM_EV_NOT_IN_TABLE	.\hsm.h	/^   HSM_EV_NOT_IN_TABLE,$/;"	e	enum:HSM_Error_e
HSM_Error_e	.\hsm.h	/^typedef enum HSM_Error_e$/;"	g
HSM_Error_t	.\hsm.h	/^}HSM_Error_t;$/;"	t	typeref:enum:HSM_Error_e
HSM_H	.\hsm.h	5;"	d
HSM_Handle_s	.\hsm.h	/^typedef struct HSM_Handle_s$/;"	s
HSM_Handle_t	.\hsm.h	/^}HSM_Handle_t;$/;"	t	typeref:struct:HSM_Handle_s
HSM_INVALID_STATE	.\hsm.h	/^   HSM_INVALID_STATE,$/;"	e	enum:HSM_Error_e
HSM_MISSING_PARENT_ON_SUBNODE	.\hsm.h	/^   HSM_MISSING_PARENT_ON_SUBNODE,$/;"	e	enum:HSM_Error_e
HSM_MISSING_PICKER_FUNC	.\hsm.h	/^   HSM_MISSING_PICKER_FUNC,$/;"	e	enum:HSM_Error_e
HSM_NOT_INITIALIZED	.\hsm.h	/^   HSM_NOT_INITIALIZED,$/;"	e	enum:HSM_Error_e
HSM_NO_ERROR	.\hsm.h	/^   HSM_NO_ERROR,$/;"	e	enum:HSM_Error_e
HSM_NO_EV_HANDLER_FOUND	.\hsm.h	/^   HSM_NO_EV_HANDLER_FOUND,$/;"	e	enum:HSM_Error_e
HSM_NULL_POINTER	.\hsm.h	/^   HSM_NULL_POINTER,$/;"	e	enum:HSM_Error_e
HSM_OUT_OF_MEMORY	.\hsm.h	/^   HSM_OUT_OF_MEMORY,$/;"	e	enum:HSM_Error_e
HSM_PICKER_RETURNED_INVALID_STATE	.\hsm.h	/^   HSM_PICKER_RETURNED_INVALID_STATE,$/;"	e	enum:HSM_Error_e
HSM_PICKER_RETURNED_NON_CHILD	.\hsm.h	/^   HSM_PICKER_RETURNED_NON_CHILD,$/;"	e	enum:HSM_Error_e
HSM_TOP_PARENT_NOT_NULL	.\hsm.h	/^   HSM_TOP_PARENT_NOT_NULL,$/;"	e	enum:HSM_Error_e
HSM_UNEXPECTED_PICKER_FUNC	.\hsm.h	/^   HSM_UNEXPECTED_PICKER_FUNC,$/;"	e	enum:HSM_Error_e
HSM_createHSM	.\hsm.c	/^HSM_Error_t HSM_createHSM( const stateDef_t *states,$/;"	f
HSM_destroy	.\hsm.c	/^HSM_Error_t HSM_destroy( HSM_Handle_t *hsm)$/;"	f
HSM_init	.\hsm.c	/^HSM_Error_t HSM_init( HSM_Handle_t *hsm )$/;"	f
HSM_processEvent	.\hsm.c	/^HSM_Error_t HSM_processEvent( HSM_Handle_t *hsm, event_t ev)$/;"	f
Hanging	.\Stockfish-master\src\evaluate.cpp	/^  const Score Hanging             = S(48, 28);$/;"	m	namespace:__anon21	file:
HasPext	.\Stockfish-master\src\types.h	/^const bool HasPext = false;$/;"	v
HasPext	.\Stockfish-master\src\types.h	/^const bool HasPext = true;$/;"	v
HasPopCnt	.\Stockfish-master\src\types.h	/^const bool HasPopCnt = false;$/;"	v
HasPopCnt	.\Stockfish-master\src\types.h	/^const bool HasPopCnt = true;$/;"	v
HashTable	.\Stockfish-master\src\misc.h	/^struct HashTable {$/;"	s
HistoryStats	.\Stockfish-master\src\movepick.h	/^typedef Stats<Value, false> HistoryStats;$/;"	t
Hits	.\Stockfish-master\src\search.cpp	/^  uint64_t Hits;$/;"	m	namespace:Tablebases	file:
I2C_Mutex	.\i2c.c	/^static pthread_mutex_t I2C_Mutex;$/;"	v	file:
ID_DECREMENT	.\display.c	59;"	d	file:
ID_INCREMENT	.\display.c	58;"	d	file:
IMBALANCE	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
INTCONA_ADDR	.\gpio.h	50;"	d
INTCONB_ADDR	.\gpio.h	51;"	d
INTENSITY_COMMAND	.\led.h	10;"	d
INTENSITY_MAX	.\led.h	12;"	d
INTENSITY_MIN	.\led.h	11;"	d
INVALID	.\Stockfish-master\src\bitbase.cpp	/^    INVALID = 0,$/;"	e	enum:__anon16::Result	file:
IODIRA_ADDR	.\gpio.h	43;"	d
IODIRB_ADDR	.\gpio.h	44;"	d
IO_LOCK	.\Stockfish-master\src\misc.h	/^enum SyncCout { IO_LOCK, IO_UNLOCK };$/;"	e	enum:SyncCout
IO_UNLOCK	.\Stockfish-master\src\misc.h	/^enum SyncCout { IO_LOCK, IO_UNLOCK };$/;"	e	enum:SyncCout
IS_64BIT	.\Stockfish-master\src\types.h	64;"	d
InFrontBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard InFrontBB[COLOR_NB][RANK_NB];$/;"	v
Is64Bit	.\Stockfish-master\src\types.h	/^const bool Is64Bit = false;$/;"	v
Is64Bit	.\Stockfish-master\src\types.h	/^const bool Is64Bit = true;$/;"	v
Isolated	.\Stockfish-master\src\pawns.cpp	/^  const Score Isolated[2][FILE_NB] = {$/;"	m	namespace:__anon27	file:
KBNK	.\Stockfish-master\src\endgame.h	/^  KBNK,  \/\/ KBN vs K$/;"	e	enum:EndgameType
KBPKB	.\Stockfish-master\src\endgame.h	/^  KBPKB,   \/\/ KBP vs KB$/;"	e	enum:EndgameType
KBPKN	.\Stockfish-master\src\endgame.h	/^  KBPKN,   \/\/ KBP vs KN$/;"	e	enum:EndgameType
KBPPKB	.\Stockfish-master\src\endgame.h	/^  KBPPKB,  \/\/ KBPP vs KB$/;"	e	enum:EndgameType
KBPsK	.\Stockfish-master\src\endgame.h	/^  KBPsK,   \/\/ KB and pawns vs K$/;"	e	enum:EndgameType
KEY_OFFSET	.\book.h	7;"	d
KILLERS	.\Stockfish-master\src\movepick.cpp	/^    MAIN_SEARCH, GOOD_CAPTURES, KILLERS, GOOD_QUIETS, BAD_QUIETS, BAD_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
KING	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
KING	.\types.h	/^	KING,$/;"	e	enum:piece_e
KING_SIDE	.\Stockfish-master\src\types.h	/^  KING_SIDE, QUEEN_SIDE, CASTLING_SIDE_NB = 2$/;"	e	enum:CastlingSide
KK_idx	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const short KK_idx[10][64] = {$/;"	v	file:
KNIGHT	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
KNIGHT	.\types.h	/^	KNIGHT,$/;"	e	enum:piece_e
KNNK	.\Stockfish-master\src\endgame.h	/^  KNNK,  \/\/ KNN vs K$/;"	e	enum:EndgameType
KNPK	.\Stockfish-master\src\endgame.h	/^  KNPK,    \/\/ KNP vs K$/;"	e	enum:EndgameType
KNPKB	.\Stockfish-master\src\endgame.h	/^  KNPKB,   \/\/ KNP vs KB$/;"	e	enum:EndgameType
KPK	.\Stockfish-master\src\endgame.h	/^  KPK,   \/\/ KP vs K$/;"	e	enum:EndgameType
KPKBitbase	.\Stockfish-master\src\bitbase.cpp	/^  uint32_t KPKBitbase[MAX_INDEX \/ 32];$/;"	m	namespace:__anon16	file:
KPKP	.\Stockfish-master\src\endgame.h	/^  KPKP     \/\/ KP vs KP$/;"	e	enum:EndgameType
KPKPosition	.\Stockfish-master\src\bitbase.cpp	/^  KPKPosition::KPKPosition(unsigned idx) {$/;"	f	class:__anon17::KPKPosition
KPKPosition	.\Stockfish-master\src\bitbase.cpp	/^  struct KPKPosition {$/;"	s	namespace:__anon16	file:
KPsK	.\Stockfish-master\src\endgame.h	/^  KPsK,    \/\/ K and pawns vs K$/;"	e	enum:EndgameType
KQKP	.\Stockfish-master\src\endgame.h	/^  KQKP,  \/\/ KQ vs KP$/;"	e	enum:EndgameType
KQKR	.\Stockfish-master\src\endgame.h	/^  KQKR,  \/\/ KQ vs KR$/;"	e	enum:EndgameType
KQKRPs	.\Stockfish-master\src\endgame.h	/^  KQKRPs,  \/\/ KQ vs KR and pawns$/;"	e	enum:EndgameType
KRKB	.\Stockfish-master\src\endgame.h	/^  KRKB,  \/\/ KR vs KB$/;"	e	enum:EndgameType
KRKN	.\Stockfish-master\src\endgame.h	/^  KRKN,  \/\/ KR vs KN$/;"	e	enum:EndgameType
KRKP	.\Stockfish-master\src\endgame.h	/^  KRKP,  \/\/ KR vs KP$/;"	e	enum:EndgameType
KRPKB	.\Stockfish-master\src\endgame.h	/^  KRPKB,   \/\/ KRP vs KB$/;"	e	enum:EndgameType
KRPKR	.\Stockfish-master\src\endgame.h	/^  KRPKR,   \/\/ KRP vs KR$/;"	e	enum:EndgameType
KRPPKRP	.\Stockfish-master\src\endgame.h	/^  KRPPKRP, \/\/ KRPP vs KRP$/;"	e	enum:EndgameType
KRPPKRPScaleFactors	.\Stockfish-master\src\endgame.cpp	/^  const int KRPPKRPScaleFactors[RANK_NB] = { 0, 9, 10, 14, 21, 44, 0, 0 };$/;"	m	namespace:__anon20	file:
KXK	.\Stockfish-master\src\endgame.h	/^  KXK,   \/\/ Generic "mate lone king" eval$/;"	e	enum:EndgameType
Key	.\Stockfish-master\src\types.h	/^typedef uint64_t Key;$/;"	t
KingAttackWeights	.\Stockfish-master\src\evaluate.cpp	/^  const int KingAttackWeights[PIECE_TYPE_NB] = { 0, 0, 7, 5, 4, 1 };$/;"	m	namespace:__anon21	file:
KingDanger	.\Stockfish-master\src\evaluate.cpp	/^  Score KingDanger[512];$/;"	m	namespace:__anon21	file:
KingSafety	.\Stockfish-master\src\evaluate.cpp	/^  enum { PawnStructure, PassedPawns, Space, KingSafety };$/;"	e	enum:__anon21::__anon22	file:
KnightCheck	.\Stockfish-master\src\evaluate.cpp	/^  const int KnightCheck       = 14;$/;"	m	namespace:__anon21	file:
LEARN_OFFSET	.\book.h	10;"	d
LED_AllOff	.\led.c	/^void LED_AllOff( void )$/;"	f
LED_Brightness	.\options.h	/^   uint8_t  LED_Brightness;$/;"	m	struct:boardOptions_s
LED_Flash	.\led.c	/^void LED_Flash( int led )$/;"	f
LED_FlashGridState	.\led.c	/^void LED_FlashGridState ( uint64_t bits )$/;"	f
LED_FlashToggle	.\led.c	/^static void *LED_FlashToggle ( void *arg )$/;"	f	file:
LED_Flush	.\led.c	/^void LED_Flush ( void )$/;"	f
LED_H	.\led.h	2;"	d
LED_Init	.\led.c	/^void LED_Init( void )$/;"	f
LED_Off	.\led.c	/^void LED_Off (int led, bool_t flush)$/;"	f
LED_On	.\led.c	/^void LED_On (int led, bool_t flush)$/;"	f
LED_SetBrightness	.\led.c	/^void LED_SetBrightness( unsigned char level)$/;"	f
LED_SetGridState	.\led.c	/^void LED_SetGridState ( uint64_t bits )$/;"	f
LED_dataMutex	.\led.c	/^static pthread_mutex_t LED_dataMutex;$/;"	v	file:
LEGAL	.\Stockfish-master\src\movegen.h	/^  LEGAL$/;"	e	enum:GenType
LINE_LENGTH	.\display.h	5;"	d
LOCK	.\Stockfish-master\src\syzygy\tbcore.h	23;"	d
LOCK	.\Stockfish-master\src\syzygy\tbcore.h	28;"	d
LOCK_INIT	.\Stockfish-master\src\syzygy\tbcore.h	22;"	d
LOCK_INIT	.\Stockfish-master\src\syzygy\tbcore.h	27;"	d
LOCK_T	.\Stockfish-master\src\syzygy\tbcore.h	21;"	d
LOCK_T	.\Stockfish-master\src\syzygy\tbcore.h	26;"	d
LOW	.\bcm2835.h	405;"	d
LOWER_E	.\display.c	117;"	d	file:
LOWER_RS	.\display.c	109;"	d	file:
LOWER_RW	.\display.c	113;"	d	file:
Lever	.\Stockfish-master\src\pawns.cpp	/^  const Score Lever[RANK_NB] = {$/;"	m	namespace:__anon27	file:
Limits	.\Stockfish-master\src\search.cpp	/^  LimitsType Limits;$/;"	m	namespace:Search	file:
LimitsType	.\Stockfish-master\src\search.h	/^  LimitsType() { \/\/ Init explicitly due to broken value-initialization of non POD in MSVC$/;"	f	struct:Search::LimitsType
LimitsType	.\Stockfish-master\src\search.h	/^struct LimitsType {$/;"	s	namespace:Search
LineBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard LineBB[SQUARE_NB][SQUARE_NB];$/;"	v
Linear	.\Stockfish-master\src\material.cpp	/^  const int Linear[6] = { 1667, -168, -1027, -166,  238, -138 };$/;"	m	namespace:__anon23	file:
Logger	.\Stockfish-master\src\misc.cpp	/^  Logger() : in(cin.rdbuf(), file.rdbuf()), out(cout.rdbuf(), file.rdbuf()) {}$/;"	f	class:__anon24::Logger	file:
Logger	.\Stockfish-master\src\misc.cpp	/^class Logger {$/;"	c	namespace:__anon24	file:
MAIN_SEARCH	.\Stockfish-master\src\movepick.cpp	/^    MAIN_SEARCH, GOOD_CAPTURES, KILLERS, GOOD_QUIETS, BAD_QUIETS, BAD_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
MATERIAL	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
MATERIAL_H_INCLUDED	.\Stockfish-master\src\material.h	22;"	d
MAX_CANDIDATES	.\book.h	5;"	d
MAX_INDEX	.\Stockfish-master\src\bitbase.cpp	/^  const unsigned MAX_INDEX = 2*24*64*64; \/\/ stm * psq * wksq * bksq = 196608$/;"	m	namespace:__anon16	file:
MAX_LINE_LEN	.\st_computerMove.c	103;"	d	file:
MAX_LIST_SIZE	.\moves.c	12;"	d	file:
MAX_LIST_SIZE	.\moves.h	7;"	d
MAX_MOVES	.\Stockfish-master\src\types.h	/^const int MAX_MOVES = 256;$/;"	v
MAX_MOVES_IN_GAME	.\types.h	13;"	d
MAX_PLY	.\Stockfish-master\src\types.h	/^const int MAX_PLY   = 128;$/;"	v
MAX_RETRIES_FOR_BUSY	.\display.c	133;"	d	file:
MENU_H	.\menu.h	2;"	d
MG	.\Stockfish-master\src\types.h	/^  MG = 0, EG = 1, PHASE_NB = 2$/;"	e	enum:Phase
MISC_H_INCLUDED	.\Stockfish-master\src\misc.h	22;"	d
MOBILITY	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
MOVEGEN_H_INCLUDED	.\Stockfish-master\src\movegen.h	22;"	d
MOVEPICK_H_INCLUDED	.\Stockfish-master\src\movepick.h	22;"	d
MOVE_NONE	.\Stockfish-master\src\types.h	/^  MOVE_NONE,$/;"	e	enum:Move
MOVE_NULL	.\Stockfish-master\src\types.h	/^  MOVE_NULL = 65$/;"	e	enum:Move
MOVE_OFFSET	.\book.h	8;"	d
MSBTable	.\Stockfish-master\src\bitboard.cpp	/^  int MSBTable[256];            \/\/ To implement software msb()$/;"	m	namespace:__anon18	file:
MS_PER_TIC	.\timer.h	8;"	d
MV_ILLEGAL	.\Archive\eventManager.c	/^   MV_ILLEGAL,    \/\/ Move primitive is not part of any legal move$/;"	e	enum:moveVal_t	file:
MV_ILLEGAL	.\st_playerMove.c	/^   MV_ILLEGAL,    \/\/ Move primitive is not part of any legal move$/;"	e	enum:moveVal_t	file:
MV_LEGAL	.\Archive\eventManager.c	/^   MV_LEGAL       \/\/ Move primitive has completed a legal move$/;"	e	enum:moveVal_t	file:
MV_LEGAL	.\st_playerMove.c	/^   MV_LEGAL       \/\/ Move primitive has completed a legal move$/;"	e	enum:moveVal_t	file:
MV_PRECURSOR	.\Archive\eventManager.c	/^   MV_PRECURSOR,  \/\/ Move primitive is a precursor to one or more legal moves.$/;"	e	enum:moveVal_t	file:
MV_PRECURSOR	.\st_playerMove.c	/^   MV_PRECURSOR,  \/\/ Move primitive is a precursor to one or more legal moves.$/;"	e	enum:moveVal_t	file:
MainThread	.\Stockfish-master\src\thread.h	/^struct MainThread : public Thread {$/;"	s
MakeCastling	.\Stockfish-master\src\types.h	/^template<Color C, CastlingSide S> struct MakeCastling {$/;"	s
Material	.\Stockfish-master\src\material.cpp	/^namespace Material {$/;"	n	file:
Material	.\Stockfish-master\src\material.h	/^namespace Material {$/;"	n
Max	.\Stockfish-master\src\movepick.h	/^  static const Value Max = Value(1 << 28);$/;"	m	struct:Stats
Max15	.\Stockfish-master\src\bitcount.h	/^const BitCountType Max15 = HasPopCnt ? CNT_HW_POPCNT : Is64Bit ? CNT_64_MAX15 : CNT_32_MAX15;$/;"	v
MaxCardinality	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^int Tablebases::MaxCardinality = 0;$/;"	m	class:Tablebases	file:
MaxRatio	.\Stockfish-master\src\timeman.cpp	/^  const double MaxRatio   = 6.93;  \/\/ When in trouble, we can step over reserved time with this ratio$/;"	m	namespace:__anon33	file:
MaxSafetyBonus	.\Stockfish-master\src\pawns.cpp	/^  const Value MaxSafetyBonus = V(258);$/;"	m	namespace:__anon27	file:
MaxTime	.\Stockfish-master\src\timeman.cpp	/^  enum TimeType { OptimumTime, MaxTime };$/;"	e	enum:__anon33::TimeType	file:
MinorBehindPawn	.\Stockfish-master\src\evaluate.cpp	/^  const Score MinorBehindPawn     = S(16,  0);$/;"	m	namespace:__anon21	file:
MobilityBonus	.\Stockfish-master\src\evaluate.cpp	/^  const Score MobilityBonus[][32] = {$/;"	m	namespace:__anon21	file:
Move	.\Stockfish-master\src\types.h	/^enum Move {$/;"	g
MoveHorizon	.\Stockfish-master\src\timeman.cpp	/^  const int MoveHorizon   = 50;   \/\/ Plan time management at most this many moves ahead$/;"	m	namespace:__anon33	file:
MoveList	.\Stockfish-master\src\movegen.h	/^  explicit MoveList(const Position& pos) : last(generate<T>(pos, moveList)) {}$/;"	f	struct:MoveList
MoveList	.\Stockfish-master\src\movegen.h	/^struct MoveList {$/;"	s
MovePicker	.\Stockfish-master\src\movepick.cpp	/^MovePicker::MovePicker(const Position& p, Move ttm, Depth d, const HistoryStats& h,$/;"	f	class:MovePicker
MovePicker	.\Stockfish-master\src\movepick.cpp	/^MovePicker::MovePicker(const Position& p, Move ttm, Depth d,$/;"	f	class:MovePicker
MovePicker	.\Stockfish-master\src\movepick.cpp	/^MovePicker::MovePicker(const Position& p, Move ttm, const HistoryStats& h, Value th)$/;"	f	class:MovePicker
MovePicker	.\Stockfish-master\src\movepick.h	/^class MovePicker {$/;"	c
MoveType	.\Stockfish-master\src\types.h	/^enum MoveType {$/;"	g
MovesStats	.\Stockfish-master\src\movepick.h	/^typedef Stats<Move> MovesStats;$/;"	t
Mutex	.\Stockfish-master\src\thread_win32.h	/^  Mutex() { InitializeCriticalSection(&cs); }$/;"	f	struct:Mutex
Mutex	.\Stockfish-master\src\thread_win32.h	/^struct Mutex {$/;"	s
Mutex	.\Stockfish-master\src\thread_win32.h	/^typedef std::mutex Mutex;$/;"	t
NEattacks	.\bitboard.c	/^BB NEattacks(BB vsliders, BB empty) {$/;"	f
NOMINMAX	.\Stockfish-master\src\syzygy\tbprobe.cpp	10;"	d	file:
NOMINMAX	.\Stockfish-master\src\thread_win32.h	40;"	d
NOMINMAX	.\Stockfish-master\src\thread_win32.h	46;"	d
NON_EVASIONS	.\Stockfish-master\src\movegen.h	/^  NON_EVASIONS,$/;"	e	enum:GenType
NORMAL	.\Stockfish-master\src\types.h	/^  NORMAL,$/;"	e	enum:MoveType
NORMAL_MODE	.\led.h	20;"	d
NORTH	.\types.h	/^	NORTH,$/;"	e	enum:dir_e
NORTHEAST	.\types.h	/^	NORTHEAST,$/;"	e	enum:dir_e
NORTHWEST	.\types.h	/^	NORTHWEST,$/;"	e	enum:dir_e
NO_CASTLING	.\Stockfish-master\src\types.h	/^  NO_CASTLING,$/;"	e	enum:CastlingRight
NO_COLOR	.\Stockfish-master\src\types.h	/^  WHITE, BLACK, NO_COLOR, COLOR_NB = 2$/;"	e	enum:Color
NO_DECODE	.\led.h	8;"	d
NO_PIECE	.\Stockfish-master\src\types.h	/^  NO_PIECE,$/;"	e	enum:Piece
NO_PIECE_TYPE	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
NULL_ACTION_FUNC	.\hsm.h	37;"	d
NULL_ENTRY_FUNC	.\hsm.h	34;"	d
NULL_EXIT_FUNC	.\hsm.h	35;"	d
NULL_GUARD_FUNC	.\hsm.h	36;"	d
NULL_SUBSTATE_PICKER_FUNC	.\hsm.h	38;"	d
NULL_TRAN_ENTER_FUNC	.\Archive\eventManager.c	132;"	d	file:
NULL_TRAN_EXIT_FUNC	.\Archive\eventManager.c	133;"	d	file:
NUM_LINES	.\display.h	4;"	d
NWattacks	.\bitboard.c	/^BB NWattacks(BB vsliders, BB empty) {$/;"	f
N_1_LINE	.\display.c	86;"	d	file:
N_2_LINES	.\display.c	85;"	d	file:
Nattacks	.\bitboard.c	/^BB Nattacks(BB osliders, BB empty) {$/;"	f
Nfill	.\bitboard.c	/^BB Nfill(BB gen) {$/;"	f
NodeType	.\Stockfish-master\src\search.cpp	/^  enum NodeType { Root, PV, NonPV };$/;"	g	namespace:__anon29	file:
NonPV	.\Stockfish-master\src\search.cpp	/^  enum NodeType { Root, PV, NonPV };$/;"	e	enum:__anon29::NodeType	file:
ONE_PLY	.\Stockfish-master\src\types.h	/^  ONE_PLY = 1,$/;"	e	enum:Depth
OUTPUT_FILE	.\sfInterface.h	6;"	d
OnChange	.\Stockfish-master\src\uci.h	/^  typedef void (*OnChange)(const Option&);$/;"	t	class:UCI::Option
OptimumTime	.\Stockfish-master\src\timeman.cpp	/^  enum TimeType { OptimumTime, MaxTime };$/;"	e	enum:__anon33::TimeType	file:
Option	.\Stockfish-master\src\uci.h	/^class Option {$/;"	c	namespace:UCI
Option	.\Stockfish-master\src\ucioption.cpp	/^Option::Option(OnChange f) : type("button"), min(0), max(0), on_change(f)$/;"	f	class:UCI::Option
Option	.\Stockfish-master\src\ucioption.cpp	/^Option::Option(bool v, OnChange f) : type("check"), min(0), max(0), on_change(f)$/;"	f	class:UCI::Option
Option	.\Stockfish-master\src\ucioption.cpp	/^Option::Option(const char* v, OnChange f) : type("string"), min(0), max(0), on_change(f)$/;"	f	class:UCI::Option
Option	.\Stockfish-master\src\ucioption.cpp	/^Option::Option(int v, int minv, int maxv, OnChange f) : type("spin"), min(minv), max(maxv), on_change(f)$/;"	f	class:UCI::Option
OptionsMap	.\Stockfish-master\src\uci.h	/^typedef std::map<std::string, Option, CaseInsensitiveLess> OptionsMap;$/;"	t	namespace:UCI
Outpost	.\Stockfish-master\src\evaluate.cpp	/^  const Score Outpost[][2] = {$/;"	m	namespace:__anon21	file:
PASSED	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
PAWN	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
PAWN	.\types.h	/^	PAWN,$/;"	e	enum:piece_e
PAWNS_H_INCLUDED	.\Stockfish-master\src\pawns.h	22;"	d
PHASE_ENDGAME	.\Stockfish-master\src\types.h	/^  PHASE_ENDGAME,$/;"	e	enum:Phase
PHASE_MIDGAME	.\Stockfish-master\src\types.h	/^  PHASE_MIDGAME = 128,$/;"	e	enum:Phase
PHASE_NB	.\Stockfish-master\src\types.h	/^  MG = 0, EG = 1, PHASE_NB = 2$/;"	e	enum:Phase
PIECE_NB	.\Stockfish-master\src\types.h	/^  PIECE_NB = 16$/;"	e	enum:Piece
PIECE_NONE	.\types.h	/^	PIECE_NONE,$/;"	e	enum:piece_e
PIECE_TYPE_NB	.\Stockfish-master\src\types.h	/^  PIECE_TYPE_NB = 8$/;"	e	enum:PieceType
PLAYER_COMPUTER	.\options.h	/^   PLAYER_COMPUTER$/;"	e	enum:player_e
PLAYER_HUMAN	.\options.h	/^   PLAYER_HUMAN,$/;"	e	enum:player_e
POSITION_HISTORY_SIZE	.\board.h	28;"	d
POSITION_H_INCLUDED	.\Stockfish-master\src\position.h	22;"	d
POS_CENTER	.\switch.h	/^   POS_CENTER,$/;"	e	enum:buttonPos_e
POS_DOWN	.\switch.h	/^   POS_DOWN,$/;"	e	enum:buttonPos_e
POS_DOWN_LEFT	.\switch.h	/^   POS_DOWN_LEFT,$/;"	e	enum:buttonPos_e
POS_DOWN_RIGHT	.\switch.h	/^   POS_DOWN_RIGHT,$/;"	e	enum:buttonPos_e
POS_ERROR	.\switch.h	/^   POS_ERROR$/;"	e	enum:buttonPos_e
POS_LEFT	.\switch.h	/^   POS_LEFT,$/;"	e	enum:buttonPos_e
POS_RIGHT	.\switch.h	/^   POS_RIGHT,$/;"	e	enum:buttonPos_e
POS_UP	.\switch.h	/^   POS_UP,$/;"	e	enum:buttonPos_e
POS_UP_LEFT	.\switch.h	/^   POS_UP_LEFT,$/;"	e	enum:buttonPos_e
POS_UP_RIGHT	.\switch.h	/^   POS_UP_RIGHT,$/;"	e	enum:buttonPos_e
PRNG	.\Stockfish-master\src\misc.h	/^  PRNG(uint64_t seed) : s(seed) { assert(seed); }$/;"	f	class:PRNG
PRNG	.\Stockfish-master\src\misc.h	/^class PRNG {$/;"	c
PROBCUT	.\Stockfish-master\src\movepick.cpp	/^    PROBCUT, PROBCUT_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
PROBCUT_CAPTURES	.\Stockfish-master\src\movepick.cpp	/^    PROBCUT, PROBCUT_CAPTURES,$/;"	e	enum:__anon26::Stages	file:
PROMOTION	.\Stockfish-master\src\types.h	/^  PROMOTION = 1 << 14,$/;"	e	enum:MoveType
PSQT	.\Stockfish-master\src\position.h	/^namespace PSQT {$/;"	n
PSQT	.\Stockfish-master\src\psqt.cpp	/^namespace PSQT {$/;"	n	file:
PV	.\Stockfish-master\src\search.cpp	/^  enum NodeType { Root, PV, NonPV };$/;"	e	enum:__anon29::NodeType	file:
PVIdx	.\Stockfish-master\src\thread.h	/^  size_t idx, PVIdx;$/;"	m	class:Thread
PairsData	.\Stockfish-master\src\syzygy\tbcore.h	/^struct PairsData {$/;"	s
Passed	.\Stockfish-master\src\evaluate.cpp	/^  const Value Passed[][RANK_NB] = {$/;"	m	namespace:__anon21	file:
PassedFile	.\Stockfish-master\src\evaluate.cpp	/^  const Score PassedFile[FILE_NB] = {$/;"	m	namespace:__anon21	file:
PassedPawnMask	.\Stockfish-master\src\bitboard.cpp	/^Bitboard PassedPawnMask[COLOR_NB][SQUARE_NB];$/;"	v
PassedPawns	.\Stockfish-master\src\evaluate.cpp	/^  enum { PawnStructure, PassedPawns, Space, KingSafety };$/;"	e	enum:__anon21::__anon22	file:
PawnAttackSpan	.\Stockfish-master\src\bitboard.cpp	/^Bitboard PawnAttackSpan[COLOR_NB][SQUARE_NB];$/;"	v
PawnStructure	.\Stockfish-master\src\evaluate.cpp	/^  enum { PawnStructure, PassedPawns, Space, KingSafety };$/;"	e	enum:__anon21::__anon22	file:
Pawns	.\Stockfish-master\src\pawns.cpp	/^namespace Pawns {$/;"	n	file:
Pawns	.\Stockfish-master\src\pawns.h	/^namespace Pawns {$/;"	n
Phase	.\Stockfish-master\src\types.h	/^enum Phase {$/;"	g
Piece	.\Stockfish-master\src\types.h	/^enum Piece {$/;"	g
PieceType	.\Stockfish-master\src\types.h	/^enum PieceType {$/;"	g
Position	.\Stockfish-master\src\position.h	/^  Position(const Position& pos, Thread* th) { *this = pos; thisThread = th; }$/;"	f	class:Position
Position	.\Stockfish-master\src\position.h	/^  Position(const std::string& f, bool c960, Thread* th) { set(f, c960, th); }$/;"	f	class:Position
Position	.\Stockfish-master\src\position.h	/^class Position {$/;"	c
ProbeDepth	.\Stockfish-master\src\search.cpp	/^  Depth ProbeDepth;$/;"	m	namespace:Tablebases	file:
PseudoAttacks	.\Stockfish-master\src\bitboard.cpp	/^Bitboard PseudoAttacks[PIECE_TYPE_NB][SQUARE_NB];$/;"	v
PushAway	.\Stockfish-master\src\endgame.cpp	/^  const int PushAway [8] = { 0, 5, 20, 40, 60, 80, 90, 100 };$/;"	m	namespace:__anon20	file:
PushClose	.\Stockfish-master\src\endgame.cpp	/^  const int PushClose[8] = { 0, 0, 100, 80, 60, 40, 20, 10 };$/;"	m	namespace:__anon20	file:
PushToCorners	.\Stockfish-master\src\endgame.cpp	/^  const int PushToCorners[SQUARE_NB] = {$/;"	m	namespace:__anon20	file:
PushToEdges	.\Stockfish-master\src\endgame.cpp	/^  const int PushToEdges[SQUARE_NB] = {$/;"	m	namespace:__anon20	file:
QCAPTURES_1	.\Stockfish-master\src\movepick.cpp	/^    QSEARCH_WITH_CHECKS, QCAPTURES_1, CHECKS,$/;"	e	enum:__anon26::Stages	file:
QCAPTURES_2	.\Stockfish-master\src\movepick.cpp	/^    QSEARCH_WITHOUT_CHECKS, QCAPTURES_2,$/;"	e	enum:__anon26::Stages	file:
QSEARCH_WITHOUT_CHECKS	.\Stockfish-master\src\movepick.cpp	/^    QSEARCH_WITHOUT_CHECKS, QCAPTURES_2,$/;"	e	enum:__anon26::Stages	file:
QSEARCH_WITH_CHECKS	.\Stockfish-master\src\movepick.cpp	/^    QSEARCH_WITH_CHECKS, QCAPTURES_1, CHECKS,$/;"	e	enum:__anon26::Stages	file:
QUEEN	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
QUEEN	.\types.h	/^	QUEEN,$/;"	e	enum:piece_e
QUEEN_SIDE	.\Stockfish-master\src\types.h	/^  KING_SIDE, QUEEN_SIDE, CASTLING_SIDE_NB = 2$/;"	e	enum:CastlingSide
QUIETS	.\Stockfish-master\src\movegen.h	/^  QUIETS,$/;"	e	enum:GenType
QUIET_CHECKS	.\Stockfish-master\src\movegen.h	/^  QUIET_CHECKS,$/;"	e	enum:GenType
QuadraticOurs	.\Stockfish-master\src\material.cpp	/^  const int QuadraticOurs[][PIECE_TYPE_NB] = {$/;"	m	namespace:__anon23	file:
QuadraticTheirs	.\Stockfish-master\src\material.cpp	/^  const int QuadraticTheirs[][PIECE_TYPE_NB] = {$/;"	m	namespace:__anon23	file:
QueenCheck	.\Stockfish-master\src\evaluate.cpp	/^  const int QueenCheck        = 50;$/;"	m	namespace:__anon21	file:
QueenContactCheck	.\Stockfish-master\src\evaluate.cpp	/^  const int QueenContactCheck = 89;$/;"	m	namespace:__anon21	file:
RAISE_E	.\display.c	116;"	d	file:
RAISE_RS	.\display.c	108;"	d	file:
RAISE_RW	.\display.c	112;"	d	file:
RANK_1	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_2	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_3	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_4	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_5	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_6	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_7	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_8	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
RANK_NB	.\Stockfish-master\src\types.h	/^  RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_NB$/;"	e	enum:Rank
READ_DATA	.\display.c	49;"	d	file:
RECAPTURE	.\Stockfish-master\src\movepick.cpp	/^    RECAPTURE, RECAPTURES,$/;"	e	enum:__anon26::Stages	file:
RECAPTURES	.\Stockfish-master\src\movepick.cpp	/^    RECAPTURE, RECAPTURES,$/;"	e	enum:__anon26::Stages	file:
RECORD_SIZE	.\book.h	6;"	d
RETURN_HOME	.\display.c	55;"	d	file:
RL_SHIFTLEFT	.\display.c	79;"	d	file:
RL_SHIFTRIGHT	.\display.c	78;"	d	file:
ROOK	.\Stockfish-master\src\types.h	/^  NO_PIECE_TYPE, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING,$/;"	e	enum:PieceType
ROOK	.\types.h	/^	ROOK,$/;"	e	enum:piece_e
ROW_1_ADDR	.\display.c	21;"	d	file:
ROW_1_SWITCH_INT_PIN	.\gpio.h	36;"	d
ROW_2_ADDR	.\display.c	22;"	d	file:
ROW_2_SWITCH_INT_PIN	.\gpio.h	35;"	d
ROW_3_ADDR	.\display.c	23;"	d	file:
ROW_3_SWITCH_INT_PIN	.\gpio.h	34;"	d
ROW_4_ADDR	.\display.c	24;"	d	file:
ROW_4_SWITCH_INT_PIN	.\gpio.h	33;"	d
ROW_5_SWITCH_INT_PIN	.\gpio.h	32;"	d
ROW_6_SWITCH_INT_PIN	.\gpio.h	31;"	d
ROW_7_SWITCH_INT_PIN	.\gpio.h	30;"	d
ROW_8_SWITCH_INT_PIN	.\gpio.h	29;"	d
RPI_BPLUS_GPIO_J8_03	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_03     =  2,  \/*!< B+, Pin J8-03 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_05	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_05     =  3,  \/*!< B+, Pin J8-05 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_07	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_07     =  4,  \/*!< B+, Pin J8-07 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_08	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_08     = 14,  \/*!< B+, Pin J8-08, defaults to alt function 0 UART0_TXD *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_10	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_10     = 15,  \/*!< B+, Pin J8-10, defaults to alt function 0 UART0_RXD *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_11	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_11     = 17,  \/*!< B+, Pin J8-11 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_12	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_12     = 18,  \/*!< B+, Pin J8-12, can be PWM channel 0 in ALT FUN 5 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_13	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_13     = 27,  \/*!< B+, Pin J8-13 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_15	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_15     = 22,  \/*!< B+, Pin J8-15 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_16	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_16     = 23,  \/*!< B+, Pin J8-16 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_18	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_18     = 24,  \/*!< B+, Pin J8-18 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_19	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_19     = 10,  \/*!< B+, Pin J8-19, MOSI when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_21	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_21     =  9,  \/*!< B+, Pin J8-21, MISO when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_22	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_22     = 25,  \/*!< B+, Pin J8-22 *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_23	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_23     = 11,  \/*!< B+, Pin J8-23, CLK when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_24	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_24     =  8,  \/*!< B+, Pin J8-24, CE0 when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_26	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_26     =  7,  \/*!< B+, Pin J8-26, CE1 when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_29	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_29     =  5,  \/*!< B+, Pin J8-29,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_31	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_31     =  6,  \/*!< B+, Pin J8-31,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_32	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_32     =  12, \/*!< B+, Pin J8-32,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_33	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_33     =  13, \/*!< B+, Pin J8-33,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_35	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_35     =  19, \/*!< B+, Pin J8-35,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_36	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_36     =  16, \/*!< B+, Pin J8-36,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_37	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_37     =  26, \/*!< B+, Pin J8-37,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_38	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_38     =  20, \/*!< B+, Pin J8-38,  *\/$/;"	e	enum:__anon5
RPI_BPLUS_GPIO_J8_40	.\bcm2835.h	/^    RPI_BPLUS_GPIO_J8_40     =  21  \/*!< B+, Pin J8-40,  *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_03	.\bcm2835.h	/^    RPI_GPIO_P1_03        =  0,  \/*!< Version 1, Pin P1-03 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_05	.\bcm2835.h	/^    RPI_GPIO_P1_05        =  1,  \/*!< Version 1, Pin P1-05 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_07	.\bcm2835.h	/^    RPI_GPIO_P1_07        =  4,  \/*!< Version 1, Pin P1-07 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_08	.\bcm2835.h	/^    RPI_GPIO_P1_08        = 14,  \/*!< Version 1, Pin P1-08, defaults to alt function 0 UART0_TXD *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_10	.\bcm2835.h	/^    RPI_GPIO_P1_10        = 15,  \/*!< Version 1, Pin P1-10, defaults to alt function 0 UART0_RXD *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_11	.\bcm2835.h	/^    RPI_GPIO_P1_11        = 17,  \/*!< Version 1, Pin P1-11 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_12	.\bcm2835.h	/^    RPI_GPIO_P1_12        = 18,  \/*!< Version 1, Pin P1-12, can be PWM channel 0 in ALT FUN 5 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_13	.\bcm2835.h	/^    RPI_GPIO_P1_13        = 21,  \/*!< Version 1, Pin P1-13 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_15	.\bcm2835.h	/^    RPI_GPIO_P1_15        = 22,  \/*!< Version 1, Pin P1-15 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_16	.\bcm2835.h	/^    RPI_GPIO_P1_16        = 23,  \/*!< Version 1, Pin P1-16 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_18	.\bcm2835.h	/^    RPI_GPIO_P1_18        = 24,  \/*!< Version 1, Pin P1-18 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_19	.\bcm2835.h	/^    RPI_GPIO_P1_19        = 10,  \/*!< Version 1, Pin P1-19, MOSI when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_21	.\bcm2835.h	/^    RPI_GPIO_P1_21        =  9,  \/*!< Version 1, Pin P1-21, MISO when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_22	.\bcm2835.h	/^    RPI_GPIO_P1_22        = 25,  \/*!< Version 1, Pin P1-22 *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_23	.\bcm2835.h	/^    RPI_GPIO_P1_23        = 11,  \/*!< Version 1, Pin P1-23, CLK when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_24	.\bcm2835.h	/^    RPI_GPIO_P1_24        =  8,  \/*!< Version 1, Pin P1-24, CE0 when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_GPIO_P1_26	.\bcm2835.h	/^    RPI_GPIO_P1_26        =  7,  \/*!< Version 1, Pin P1-26, CE1 when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_03	.\bcm2835.h	/^    RPI_V2_GPIO_P1_03     =  2,  \/*!< Version 2, Pin P1-03 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_05	.\bcm2835.h	/^    RPI_V2_GPIO_P1_05     =  3,  \/*!< Version 2, Pin P1-05 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_07	.\bcm2835.h	/^    RPI_V2_GPIO_P1_07     =  4,  \/*!< Version 2, Pin P1-07 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_08	.\bcm2835.h	/^    RPI_V2_GPIO_P1_08     = 14,  \/*!< Version 2, Pin P1-08, defaults to alt function 0 UART0_TXD *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_10	.\bcm2835.h	/^    RPI_V2_GPIO_P1_10     = 15,  \/*!< Version 2, Pin P1-10, defaults to alt function 0 UART0_RXD *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_11	.\bcm2835.h	/^    RPI_V2_GPIO_P1_11     = 17,  \/*!< Version 2, Pin P1-11 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_12	.\bcm2835.h	/^    RPI_V2_GPIO_P1_12     = 18,  \/*!< Version 2, Pin P1-12, can be PWM channel 0 in ALT FUN 5 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_13	.\bcm2835.h	/^    RPI_V2_GPIO_P1_13     = 27,  \/*!< Version 2, Pin P1-13 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_15	.\bcm2835.h	/^    RPI_V2_GPIO_P1_15     = 22,  \/*!< Version 2, Pin P1-15 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_16	.\bcm2835.h	/^    RPI_V2_GPIO_P1_16     = 23,  \/*!< Version 2, Pin P1-16 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_18	.\bcm2835.h	/^    RPI_V2_GPIO_P1_18     = 24,  \/*!< Version 2, Pin P1-18 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_19	.\bcm2835.h	/^    RPI_V2_GPIO_P1_19     = 10,  \/*!< Version 2, Pin P1-19, MOSI when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_21	.\bcm2835.h	/^    RPI_V2_GPIO_P1_21     =  9,  \/*!< Version 2, Pin P1-21, MISO when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_22	.\bcm2835.h	/^    RPI_V2_GPIO_P1_22     = 25,  \/*!< Version 2, Pin P1-22 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_23	.\bcm2835.h	/^    RPI_V2_GPIO_P1_23     = 11,  \/*!< Version 2, Pin P1-23, CLK when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_24	.\bcm2835.h	/^    RPI_V2_GPIO_P1_24     =  8,  \/*!< Version 2, Pin P1-24, CE0 when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P1_26	.\bcm2835.h	/^    RPI_V2_GPIO_P1_26     =  7,  \/*!< Version 2, Pin P1-26, CE1 when SPI0 in use *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P5_03	.\bcm2835.h	/^    RPI_V2_GPIO_P5_03     = 28,  \/*!< Version 2, Pin P5-03 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P5_04	.\bcm2835.h	/^    RPI_V2_GPIO_P5_04     = 29,  \/*!< Version 2, Pin P5-04 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P5_05	.\bcm2835.h	/^    RPI_V2_GPIO_P5_05     = 30,  \/*!< Version 2, Pin P5-05 *\/$/;"	e	enum:__anon5
RPI_V2_GPIO_P5_06	.\bcm2835.h	/^    RPI_V2_GPIO_P5_06     = 31,  \/*!< Version 2, Pin P5-06 *\/$/;"	e	enum:__anon5
RPiGPIOPin	.\bcm2835.h	/^} RPiGPIOPin;$/;"	t	typeref:enum:__anon5
RS_MASK	.\gpio.h	16;"	d
RW_MASK	.\gpio.h	17;"	d
Rank	.\Stockfish-master\src\types.h	/^enum Rank {$/;"	g
Rank1BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank1BB = 0xFF;$/;"	v
Rank2BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank2BB = Rank1BB << (8 * 1);$/;"	v
Rank3BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank3BB = Rank1BB << (8 * 2);$/;"	v
Rank4BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank4BB = Rank1BB << (8 * 3);$/;"	v
Rank5BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank5BB = Rank1BB << (8 * 4);$/;"	v
Rank6BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank6BB = Rank1BB << (8 * 5);$/;"	v
Rank7BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank7BB = Rank1BB << (8 * 6);$/;"	v
Rank8BB	.\Stockfish-master\src\bitboard.h	/^const Bitboard Rank8BB = Rank1BB << (8 * 7);$/;"	v
RankBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard RankBB[RANK_NB];$/;"	v
ReachableOutpost	.\Stockfish-master\src\evaluate.cpp	/^  const Score ReachableOutpost[][2] = {$/;"	m	namespace:__anon21	file:
ReadUint32	.\Stockfish-master\src\syzygy\tbcore.cpp	/^uint32 ReadUint32(ubyte* d) {$/;"	f
ReadUshort	.\Stockfish-master\src\syzygy\tbcore.cpp	/^ushort ReadUshort(ubyte* d) {$/;"	f
Reductions	.\Stockfish-master\src\search.cpp	/^  Depth Reductions[2][2][64][64]; \/\/ [pv][improving][depth][moveNumber]$/;"	m	namespace:__anon29	file:
Result	.\Stockfish-master\src\bitbase.cpp	/^  enum Result {$/;"	g	namespace:__anon16	file:
ResumeSwitchPoll	.\switch.c	/^void ResumeSwitchPoll( void )$/;"	f
RookAttacks	.\Stockfish-master\src\bitboard.cpp	/^Bitboard* RookAttacks[SQUARE_NB];$/;"	v
RookCheck	.\Stockfish-master\src\evaluate.cpp	/^  const int RookCheck         = 45;$/;"	m	namespace:__anon21	file:
RookMagics	.\Stockfish-master\src\bitboard.cpp	/^Bitboard  RookMagics [SQUARE_NB];$/;"	v
RookMasks	.\Stockfish-master\src\bitboard.cpp	/^Bitboard  RookMasks  [SQUARE_NB];$/;"	v
RookOnFile	.\Stockfish-master\src\evaluate.cpp	/^  const Score RookOnFile[2] = { S(19, 10), S(43, 21) };$/;"	m	namespace:__anon21	file:
RookOnPawn	.\Stockfish-master\src\evaluate.cpp	/^  const Score RookOnPawn          = S( 7, 27);$/;"	m	namespace:__anon21	file:
RookShifts	.\Stockfish-master\src\bitboard.cpp	/^unsigned  RookShifts [SQUARE_NB];$/;"	v
RookTable	.\Stockfish-master\src\bitboard.cpp	/^  Bitboard RookTable[0x19000];  \/\/ To store rook attacks$/;"	m	namespace:__anon18	file:
Root	.\Stockfish-master\src\search.cpp	/^  enum NodeType { Root, PV, NonPV };$/;"	e	enum:__anon29::NodeType	file:
RootInTB	.\Stockfish-master\src\search.cpp	/^  bool RootInTB;$/;"	m	namespace:Tablebases	file:
RootMove	.\Stockfish-master\src\search.h	/^  explicit RootMove(Move m) : pv(1, m) {}$/;"	f	struct:Search::RootMove
RootMove	.\Stockfish-master\src\search.h	/^struct RootMove {$/;"	s	namespace:Search
RootMoveVector	.\Stockfish-master\src\search.h	/^typedef std::vector<RootMove> RootMoveVector;$/;"	t	namespace:Search
S	.\Stockfish-master\src\evaluate.cpp	123;"	d	file:
S	.\Stockfish-master\src\evaluate.cpp	209;"	d	file:
S	.\Stockfish-master\src\pawns.cpp	33;"	d	file:
S	.\Stockfish-master\src\pawns.cpp	94;"	d	file:
S	.\Stockfish-master\src\psqt.cpp	25;"	d	file:
S	.\Stockfish-master\src\psqt.cpp	95;"	d	file:
S16	.\types.h	10;"	d
SCALE_FACTOR_DRAW	.\Stockfish-master\src\types.h	/^  SCALE_FACTOR_DRAW    = 0,$/;"	e	enum:ScaleFactor
SCALE_FACTOR_MAX	.\Stockfish-master\src\types.h	/^  SCALE_FACTOR_MAX     = 128,$/;"	e	enum:ScaleFactor
SCALE_FACTOR_NONE	.\Stockfish-master\src\types.h	/^  SCALE_FACTOR_NONE    = 255$/;"	e	enum:ScaleFactor
SCALE_FACTOR_NORMAL	.\Stockfish-master\src\types.h	/^  SCALE_FACTOR_NORMAL  = 64,$/;"	e	enum:ScaleFactor
SCALE_FACTOR_ONEPAWN	.\Stockfish-master\src\types.h	/^  SCALE_FACTOR_ONEPAWN = 48,$/;"	e	enum:ScaleFactor
SCALING_FUNCTIONS	.\Stockfish-master\src\endgame.h	/^  SCALING_FUNCTIONS,$/;"	e	enum:EndgameType
SCAN_ALL	.\led.h	15;"	d
SCAN_LIMIT_COMMAND	.\led.h	14;"	d
SC_CURSOR_SHIFT	.\display.c	76;"	d	file:
SC_DISP_SHIFT	.\display.c	75;"	d	file:
SEARCH_H_INCLUDED	.\Stockfish-master\src\search.h	22;"	d
SECONDS_IN_MINUTE	.\types.h	191;"	d
SEND	.\display.c	125;"	d	file:
SEP_CHAR	.\Stockfish-master\src\syzygy\tbcore.h	10;"	d
SEP_CHAR	.\Stockfish-master\src\syzygy\tbcore.h	15;"	d
SETUP_DD_ADDR	.\display.c	131;"	d	file:
SET_CG_ADDR	.\display.c	104;"	d	file:
SET_DATA	.\display.c	34;"	d	file:
SET_DD_ADDR	.\display.c	105;"	d	file:
SET_E	.\display.c	28;"	d	file:
SET_RS	.\display.c	30;"	d	file:
SET_RW	.\display.c	32;"	d	file:
SEattacks	.\bitboard.c	/^BB SEattacks(BB vsliders, BB empty) {$/;"	f
SFINTERFACE_H	.\sfInterface.h	2;"	d
SF_EXE	.\sfInterface.c	23;"	d	file:
SF_closeEngine	.\sfInterface.c	/^void SF_closeEngine( void )$/;"	f
SF_findMove	.\sfInterface.c	/^void SF_findMove( uint32_t wt, uint32_t bt, uint32_t wi, uint32_t bi)$/;"	f
SF_findMoveFixedDepth	.\sfInterface.c	/^void SF_findMoveFixedDepth( int d )$/;"	f
SF_findMoveFixedTime	.\sfInterface.c	/^void SF_findMoveFixedTime( uint32_t t )$/;"	f
SF_initEngine	.\sfInterface.c	/^void SF_initEngine( void )$/;"	f
SF_setOption	.\sfInterface.c	/^void SF_setOption( char *name, char *value)$/;"	f
SF_setPosition	.\sfInterface.c	/^void SF_setPosition( char *fen, char *moveList)$/;"	f
SF_stop	.\sfInterface.c	/^void SF_stop( void )$/;"	f
SHIFT_CTRL	.\display.c	100;"	d	file:
SHUTDOWN_COMMAND	.\led.h	18;"	d
SHUTDOWN_MODE	.\led.h	19;"	d
SOUTH	.\types.h	/^	SOUTH,$/;"	e	enum:dir_e
SOUTHEAST	.\types.h	/^	SOUTHEAST,$/;"	e	enum:dir_e
SOUTHWEST	.\types.h	/^	SOUTHWEST,$/;"	e	enum:dir_e
SPACE	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
SQUARE_NB	.\Stockfish-master\src\types.h	/^  SQUARE_NB = 64,$/;"	e	enum:Square
SQ_A1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_A2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_A3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_A4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_A5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_A6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_A7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_A8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_B1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_B2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_B3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_B4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_B5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_B6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_B7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_B8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_C1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_C2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_C3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_C4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_C5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_C6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_C7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_C8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_D1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_D2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_D3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_D4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_D5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_D6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_D7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_D8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_E1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_E2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_E3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_E4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_E5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_E6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_E7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_E8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_F1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_F2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_F3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_F4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_F5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_F6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_F7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_F8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_G1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_G2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_G3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_G4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_G5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_G6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_G7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_G8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_H1	.\Stockfish-master\src\types.h	/^  SQ_A1, SQ_B1, SQ_C1, SQ_D1, SQ_E1, SQ_F1, SQ_G1, SQ_H1,$/;"	e	enum:Square
SQ_H2	.\Stockfish-master\src\types.h	/^  SQ_A2, SQ_B2, SQ_C2, SQ_D2, SQ_E2, SQ_F2, SQ_G2, SQ_H2,$/;"	e	enum:Square
SQ_H3	.\Stockfish-master\src\types.h	/^  SQ_A3, SQ_B3, SQ_C3, SQ_D3, SQ_E3, SQ_F3, SQ_G3, SQ_H3,$/;"	e	enum:Square
SQ_H4	.\Stockfish-master\src\types.h	/^  SQ_A4, SQ_B4, SQ_C4, SQ_D4, SQ_E4, SQ_F4, SQ_G4, SQ_H4,$/;"	e	enum:Square
SQ_H5	.\Stockfish-master\src\types.h	/^  SQ_A5, SQ_B5, SQ_C5, SQ_D5, SQ_E5, SQ_F5, SQ_G5, SQ_H5,$/;"	e	enum:Square
SQ_H6	.\Stockfish-master\src\types.h	/^  SQ_A6, SQ_B6, SQ_C6, SQ_D6, SQ_E6, SQ_F6, SQ_G6, SQ_H6,$/;"	e	enum:Square
SQ_H7	.\Stockfish-master\src\types.h	/^  SQ_A7, SQ_B7, SQ_C7, SQ_D7, SQ_E7, SQ_F7, SQ_G7, SQ_H7,$/;"	e	enum:Square
SQ_H8	.\Stockfish-master\src\types.h	/^  SQ_A8, SQ_B8, SQ_C8, SQ_D8, SQ_E8, SQ_F8, SQ_G8, SQ_H8,$/;"	e	enum:Square
SQ_NONE	.\Stockfish-master\src\types.h	/^  SQ_NONE,$/;"	e	enum:Square
STALEMATE	.\moves.h	4;"	d
STOP	.\Stockfish-master\src\movepick.cpp	/^    STOP$/;"	e	enum:__anon26::Stages	file:
STRAT_FIXED_DEPTH	.\types.h	/^   STRAT_FIXED_DEPTH,$/;"	e	enum:computerStrategy_e
STRAT_FIXED_TIME	.\types.h	/^   STRAT_FIXED_TIME,$/;"	e	enum:computerStrategy_e
STRAT_TILL_BUTTON	.\types.h	/^   STRAT_TILL_BUTTON$/;"	e	enum:computerStrategy_e
ST_BOARD_OPTION_MENU	.\hsmDefs.h	/^       ST_BOARD_OPTION_MENU,$/;"	e	enum:stateId_e
ST_COMPUTER_MOVE	.\hsmDefs.h	/^         ST_COMPUTER_MOVE,         \/\/ Computer is thinking$/;"	e	enum:stateId_e
ST_COMPUTER_MV	.\Archive\eventManager.c	/^   ST_COMPUTER_MV,         \/\/ The computer is computing a move$/;"	e	enum:state_e	file:
ST_DIAGMENU	.\hsmDefs.h	/^       ST_DIAGMENU,                \/\/ Diagnostic menu$/;"	e	enum:stateId_e
ST_DIAG_DISPLAY	.\Archive\eventManager.c	/^   ST_DIAG_DISPLAY,        \/\/ Testing display$/;"	e	enum:state_e	file:
ST_DIAG_JOYSTICK	.\Archive\eventManager.c	/^   ST_DIAG_JOYSTICK,       \/\/ Testing joystick$/;"	e	enum:state_e	file:
ST_DIAG_LEDS	.\Archive\eventManager.c	/^   ST_DIAG_LEDS,           \/\/ Testing LEDs$/;"	e	enum:state_e	file:
ST_DIAG_SENSORS	.\hsmDefs.h	/^     ST_DIAG_SENSORS,$/;"	e	enum:stateId_e
ST_DIAG_SWITCHES	.\Archive\eventManager.c	/^   ST_DIAG_SWITCHES,       \/\/ Testing reed switches$/;"	e	enum:state_e	file:
ST_ENGINE_OPTION_MENU	.\hsmDefs.h	/^       ST_ENGINE_OPTION_MENU,$/;"	e	enum:stateId_e
ST_EXITING_GAME	.\hsmDefs.h	/^       ST_EXITING_GAME,             \/\/ Game has concluded, waiting for confirmation$/;"	e	enum:stateId_e
ST_FIX_BOARD	.\Archive\eventManager.c	/^   ST_FIX_BOARD,           \/\/ Prompt player to reach a target position$/;"	e	enum:state_e	file:
ST_GAMEMENU	.\hsmDefs.h	/^       ST_GAMEMENU,                \/\/ Navigating in-game menu$/;"	e	enum:stateId_e
ST_GAME_OPTION_MENU	.\hsmDefs.h	/^       ST_GAME_OPTION_MENU,$/;"	e	enum:stateId_e
ST_GAME_OVER	.\Archive\eventManager.c	/^   ST_GAME_OVER,           \/\/ The game has reached a conclusion$/;"	e	enum:state_e	file:
ST_HUMAN_MV	.\Archive\eventManager.c	/^   ST_HUMAN_MV,            \/\/ A human player is making a move.$/;"	e	enum:state_e	file:
ST_HUMAN_MV_FOR_COMP	.\Archive\eventManager.c	/^   ST_HUMAN_MV_FOR_COMP,   \/\/ The human is making the computer's chosen move$/;"	e	enum:state_e	file:
ST_INIT	.\Archive\eventManager.c	/^   ST_INIT,                \/\/ Splash screen, system init.  Only exits on timer\/center.  Moves to ST_TOP_MENUS when done$/;"	e	enum:state_e	file:
ST_INITIAL_SETUP	.\Archive\eventManager.c	/^   ST_INITIAL_SETUP,       \/\/ User(s) are setting up initial board$/;"	e	enum:state_e	file:
ST_INIT_POS_SETUP	.\hsmDefs.h	/^     ST_INIT_POS_SETUP,            \/\/ Set up initial position$/;"	e	enum:stateId_e
ST_IN_GAME	.\hsmDefs.h	/^     ST_IN_GAME,                   \/\/ A game is in progress$/;"	e	enum:stateId_e
ST_MAINMENU	.\hsmDefs.h	/^       ST_MAINMENU,                \/\/ Top-most menu$/;"	e	enum:stateId_e
ST_MENUS	.\hsmDefs.h	/^     ST_MENUS,                     \/\/ In one of the top menus$/;"	e	enum:stateId_e
ST_MOVE_FOR_COMPUTER	.\hsmDefs.h	/^         ST_MOVE_FOR_COMPUTER,     \/\/ Player is making computer's chosen move$/;"	e	enum:stateId_e
ST_NONE	.\hsmDefs.h	/^   ST_NONE \/\/ MUST BE LAST ITEM IN LIST...$/;"	e	enum:stateId_e
ST_OPTIONMENU	.\hsmDefs.h	/^       ST_OPTIONMENU,$/;"	e	enum:stateId_e
ST_PLAYER_MOVE	.\hsmDefs.h	/^         ST_PLAYER_MOVE,           \/\/ Player is moving$/;"	e	enum:stateId_e
ST_PLAYING_GAME	.\hsmDefs.h	/^       ST_PLAYING_GAME,            \/\/ Actively making moves (or thinking)$/;"	e	enum:stateId_e
ST_SETUP	.\Archive\eventManager.c	/^   ST_SETUP,               \/\/ User is setting up a position$/;"	e	enum:state_e	file:
ST_SPLASH_SCREEN	.\hsmDefs.h	/^     ST_SPLASH_SCREEN,             \/\/ Displaying splash screen$/;"	e	enum:stateId_e
ST_TIME_OPTION_MENU	.\hsmDefs.h	/^     ST_TIME_OPTION_MENU,$/;"	e	enum:stateId_e
ST_TOP	.\hsmDefs.h	/^   ST_TOP,                         \/\/ Top-most containing state$/;"	e	enum:stateId_e
ST_TOP_MENUS	.\Archive\eventManager.c	/^   ST_TOP_MENUS,           \/\/ User is navigating top menu structure.$/;"	e	enum:state_e	file:
ST_VERIFY_BOARD	.\Archive\eventManager.c	/^   ST_VERIFY_BOARD,        \/\/ User is verifying the board.$/;"	e	enum:state_e	file:
ST_X_EV_X_ActionX	.\Archive\stateTemplate.c	/^void ST_X_EV_X_ActionX( event_t ev )$/;"	f
ST_X_EV_X_GuardX	.\Archive\stateTemplate.c	/^bool_t ST_X_EV_X_GuardX(event_t ev )$/;"	f
ST_X_Entry	.\Archive\stateTemplate.c	/^void ST_X_Entry( event_t ev )$/;"	f
ST_X_Exit	.\Archive\stateTemplate.c	/^void ST_X_Exit( event_t ev )$/;"	f
ST_X_PickSubstate	.\Archive\stateTemplate.c	/^uint16_t ST_X_PickSubstate(event_t ev)$/;"	f
SUBSTATE_EVEN	.\st_timeOptionMenu.c	/^   SUBSTATE_EVEN,         \/\/ Period 1 setting$/;"	e	enum:timeSettingSubstate_e	file:
SUBSTATE_ODDS	.\st_timeOptionMenu.c	/^   SUBSTATE_ODDS,          \/\/ Odds settings$/;"	e	enum:timeSettingSubstate_e	file:
SUBSTATE_STATUS	.\st_timeOptionMenu.c	/^   SUBSTATE_STATUS,        \/\/ Displaying Status$/;"	e	enum:timeSettingSubstate_e	file:
SUBSTATE_TIME_OPTION	.\st_timeOptionMenu.c	/^   SUBSTATE_TIME_OPTION,   \/\/ Selecting scheme$/;"	e	enum:timeSettingSubstate_e	file:
SUBSTATE_UNTIMED	.\st_timeOptionMenu.c	/^   SUBSTATE_UNTIMED,       \/\/ Computer strategy setting$/;"	e	enum:timeSettingSubstate_e	file:
SVALUE	.\zobrist.h	3;"	d
SWITCH_H	.\switch.h	2;"	d
SWattacks	.\bitboard.c	/^BB SWattacks(BB vsliders, BB empty) {$/;"	f
S_NOSHIFT	.\display.c	62;"	d	file:
S_SHIFT	.\display.c	61;"	d	file:
Sattacks	.\bitboard.c	/^BB Sattacks(BB osliders, BB empty) {$/;"	f
ScaleFactor	.\Stockfish-master\src\types.h	/^enum ScaleFactor {$/;"	g
ScaleKBPsK	.\Stockfish-master\src\material.cpp	/^  Endgame<KBPsK>  ScaleKBPsK[]  = { Endgame<KBPsK>(WHITE),  Endgame<KBPsK>(BLACK) };$/;"	m	namespace:__anon23	file:
ScaleKPKP	.\Stockfish-master\src\material.cpp	/^  Endgame<KPKP>   ScaleKPKP[]   = { Endgame<KPKP>(WHITE),   Endgame<KPKP>(BLACK) };$/;"	m	namespace:__anon23	file:
ScaleKPsK	.\Stockfish-master\src\material.cpp	/^  Endgame<KPsK>   ScaleKPsK[]   = { Endgame<KPsK>(WHITE),   Endgame<KPsK>(BLACK) };$/;"	m	namespace:__anon23	file:
ScaleKQKRPs	.\Stockfish-master\src\material.cpp	/^  Endgame<KQKRPs> ScaleKQKRPs[] = { Endgame<KQKRPs>(WHITE), Endgame<KQKRPs>(BLACK) };$/;"	m	namespace:__anon23	file:
Score	.\Stockfish-master\src\search.cpp	/^  Value Score;$/;"	m	namespace:Tablebases	file:
Search	.\Stockfish-master\src\search.cpp	/^namespace Search {$/;"	n	file:
Search	.\Stockfish-master\src\search.h	/^namespace Search {$/;"	n
SetupStates	.\Stockfish-master\src\search.cpp	/^  StateStackPtr SetupStates;$/;"	m	namespace:Search	file:
SetupStates	.\Stockfish-master\src\uci.cpp	/^  Search::StateStackPtr SetupStates;$/;"	m	namespace:__anon34	file:
Sfill	.\bitboard.c	/^BB Sfill(BB gen) {$/;"	f
ShelterWeakness	.\Stockfish-master\src\pawns.cpp	/^  const Value ShelterWeakness[][RANK_NB] = {$/;"	m	namespace:__anon27	file:
Signals	.\Stockfish-master\src\search.cpp	/^  SignalsType Signals;$/;"	m	namespace:Search	file:
SignalsType	.\Stockfish-master\src\search.h	/^struct SignalsType {$/;"	s	namespace:Search
Skill	.\Stockfish-master\src\search.cpp	/^    Skill(int l) : level(l) {}$/;"	f	struct:__anon29::Skill
Skill	.\Stockfish-master\src\search.cpp	/^  struct Skill {$/;"	s	namespace:__anon29	file:
Space	.\Stockfish-master\src\evaluate.cpp	/^  enum { PawnStructure, PassedPawns, Space, KingSafety };$/;"	e	enum:__anon21::__anon22	file:
Square	.\Stockfish-master\src\types.h	/^enum Square {$/;"	g
SquareBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard SquareBB[SQUARE_NB];$/;"	v
SquareDistance	.\Stockfish-master\src\bitboard.cpp	/^int SquareDistance[SQUARE_NB][SQUARE_NB];$/;"	v
Stack	.\Stockfish-master\src\search.h	/^struct Stack {$/;"	s	namespace:Search
Stages	.\Stockfish-master\src\movepick.cpp	/^  enum Stages {$/;"	g	namespace:__anon26	file:
StartFEN	.\Stockfish-master\src\uci.cpp	/^  const char* StartFEN = "rnbqkbnr\/pppppppp\/8\/8\/8\/8\/PPPPPPPP\/RNBQKBNR w KQkq - 0 1";$/;"	m	namespace:__anon34	file:
StartSwitchPoll	.\switch.c	/^void StartSwitchPoll( void )$/;"	f
StateInfo	.\Stockfish-master\src\position.h	/^struct StateInfo {$/;"	s
StateStackPtr	.\Stockfish-master\src\search.h	/^typedef std::unique_ptr<std::stack<StateInfo>> StateStackPtr;$/;"	t	namespace:Search
Stats	.\Stockfish-master\src\movepick.h	/^struct Stats {$/;"	s
StealRatio	.\Stockfish-master\src\timeman.cpp	/^  const double StealRatio = 0.36; \/\/ However we must not steal time from remaining moves over this ratio$/;"	m	namespace:__anon33	file:
StepAttacksBB	.\Stockfish-master\src\bitboard.cpp	/^Bitboard StepAttacksBB[PIECE_NB][SQUARE_NB];$/;"	v
StopSwitchPoll	.\switch.c	/^void StopSwitchPoll( void )$/;"	f
StormDanger	.\Stockfish-master\src\pawns.cpp	/^  const Value StormDanger[][4][RANK_NB] = {$/;"	m	namespace:__anon27	file:
Swap	.\Stockfish-master\src\syzygy\tbcore.cpp	26;"	d	file:
Switch_dataMutex	.\switch.c	/^static pthread_mutex_t Switch_dataMutex;$/;"	v	file:
SyncCout	.\Stockfish-master\src\misc.h	/^enum SyncCout { IO_LOCK, IO_UNLOCK };$/;"	g
TARGET_POSITION	.\st_initPosSetup.c	13;"	d	file:
TBCORE_H	.\Stockfish-master\src\syzygy\tbcore.h	6;"	d
TBEntry	.\Stockfish-master\src\syzygy\tbcore.h	/^struct TBEntry {$/;"	s
TBEntry_pawn	.\Stockfish-master\src\syzygy\tbcore.h	/^struct TBEntry_pawn {$/;"	s
TBEntry_piece	.\Stockfish-master\src\syzygy\tbcore.h	/^struct TBEntry_piece {$/;"	s
TBHASHBITS	.\Stockfish-master\src\syzygy\tbcore.h	54;"	d
TBHashEntry	.\Stockfish-master\src\syzygy\tbcore.h	/^struct TBHashEntry {$/;"	s
TBMAX_PAWN	.\Stockfish-master\src\syzygy\tbcore.cpp	23;"	d	file:
TBMAX_PIECE	.\Stockfish-master\src\syzygy\tbcore.cpp	22;"	d	file:
TBPIECES	.\Stockfish-master\src\syzygy\tbcore.h	44;"	d
TBPROBE_H	.\Stockfish-master\src\syzygy\tbprobe.h	2;"	d
TB_BISHOP	.\Stockfish-master\src\syzygy\tbcore.cpp	30;"	d	file:
TB_BPAWN	.\Stockfish-master\src\syzygy\tbcore.cpp	36;"	d	file:
TB_KING	.\Stockfish-master\src\syzygy\tbcore.cpp	33;"	d	file:
TB_KNIGHT	.\Stockfish-master\src\syzygy\tbcore.cpp	29;"	d	file:
TB_PAWN	.\Stockfish-master\src\syzygy\tbcore.cpp	28;"	d	file:
TB_QUEEN	.\Stockfish-master\src\syzygy\tbcore.cpp	32;"	d	file:
TB_ROOK	.\Stockfish-master\src\syzygy\tbcore.cpp	31;"	d	file:
TB_WPAWN	.\Stockfish-master\src\syzygy\tbcore.cpp	35;"	d	file:
TB_hash	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static struct TBHashEntry TB_hash[1 << TBHASHBITS][HSHMAX];$/;"	v	typeref:struct:TBHashEntry	file:
TB_mutex	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static LOCK_T TB_mutex;$/;"	v	file:
TB_pawn	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static struct TBEntry_pawn TB_pawn[TBMAX_PAWN];$/;"	v	typeref:struct:TBEntry_pawn	file:
TB_piece	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static struct TBEntry_piece TB_piece[TBMAX_PIECE];$/;"	v	typeref:struct:TBEntry_piece	file:
TBnum_pawn	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int TBnum_piece, TBnum_pawn;$/;"	v	file:
TBnum_piece	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int TBnum_piece, TBnum_pawn;$/;"	v	file:
TERM_NB	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
TEST_OFF	.\led.h	23;"	d
THREAD_H_INCLUDED	.\Stockfish-master\src\thread.h	22;"	d
THREAD_WIN32_H_INCLUDED	.\Stockfish-master\src\thread_win32.h	22;"	d
THREAT	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
TIMEMAN_H_INCLUDED	.\Stockfish-master\src\timeman.h	22;"	d
TIMER_H	.\timer.h	2;"	d
TIME_EQUAL	.\types.h	/^   TIME_EQUAL,$/;"	e	enum:timingType_e
TIME_NONE	.\types.h	/^   TIME_NONE,$/;"	e	enum:timingType_e
TIME_ODDS	.\types.h	/^   TIME_ODDS,$/;"	e	enum:timingType_e
TMR_COMPUTER_POLL	.\timer.h	/^   TMR_COMPUTER_POLL,$/;"	e	enum:timerRef_e
TMR_DIAG_TIMEOUT	.\timer.h	/^   TMR_DIAG_TIMEOUT,$/;"	e	enum:timerRef_e
TMR_ERR_ALREADY_INIT	.\timer.h	/^   TMR_ERR_ALREADY_INIT,$/;"	e	enum:timerErr_e
TMR_ERR_INVALID_ID	.\timer.h	/^   TMR_ERR_INVALID_ID,$/;"	e	enum:timerErr_e
TMR_ERR_NONE	.\timer.h	/^   TMR_ERR_NONE,$/;"	e	enum:timerErr_e
TMR_GAME_CLOCK_TIC	.\timer.h	/^   TMR_GAME_CLOCK_TIC,$/;"	e	enum:timerRef_e
TMR_TOTAL_TIMERS	.\timer.h	/^   TMR_TOTAL_TIMERS$/;"	e	enum:timerRef_e
TMR_UI_TIMEOUT	.\timer.h	/^   TMR_UI_TIMEOUT,$/;"	e	enum:timerRef_e
TOTAL	.\Stockfish-master\src\evaluate.cpp	/^      MATERIAL = 8, IMBALANCE, MOBILITY, THREAT, PASSED, SPACE, TOTAL, TERM_NB$/;"	e	enum:__anon21::Trace::Term	file:
TOTAL_STATES	.\Archive\eventManager.c	/^   TOTAL_STATES            \/\/ Total number of states$/;"	e	enum:state_e	file:
TRACE	.\debug.h	17;"	d
TRACE	.\debug.h	25;"	d
TRUE	.\types.h	/^	TRUE$/;"	e	enum:bool_e
TT	.\Stockfish-master\src\tt.cpp	/^TranspositionTable TT; \/\/ Our global transposition table$/;"	v
TTEntry	.\Stockfish-master\src\tt.h	/^struct TTEntry {$/;"	s
TT_H_INCLUDED	.\Stockfish-master\src\tt.h	22;"	d
TYPES_H	.\types.h	2;"	d
TYPES_H_INCLUDED	.\Stockfish-master\src\types.h	22;"	d
Table	.\Stockfish-master\src\material.h	/^typedef HashTable<Entry, 8192> Table;$/;"	t	namespace:Material
Table	.\Stockfish-master\src\pawns.h	/^typedef HashTable<Entry, 16384> Table;$/;"	t	namespace:Pawns
Tablebases	.\Stockfish-master\src\search.cpp	/^namespace Tablebases {$/;"	n	file:
Tablebases	.\Stockfish-master\src\syzygy\tbprobe.h	/^namespace Tablebases {$/;"	n
Tempo	.\Stockfish-master\src\evaluate.h	/^const Value Tempo = Value(20); \/\/ Must be visible to search$/;"	m	namespace:Eval
Term	.\Stockfish-master\src\evaluate.cpp	/^    enum Term { \/\/ First 8 entries are for PieceType$/;"	g	namespace:__anon21::Trace	file:
Thread	.\Stockfish-master\src\thread.cpp	/^Thread::Thread() {$/;"	f	class:Thread
Thread	.\Stockfish-master\src\thread.h	/^class Thread {$/;"	c
ThreadPool	.\Stockfish-master\src\thread.h	/^struct ThreadPool : public std::vector<Thread*> {$/;"	s
Threat	.\Stockfish-master\src\evaluate.cpp	/^  const Score Threat[][PIECE_TYPE_NB] = {$/;"	m	namespace:__anon21	file:
ThreatByHangingPawn	.\Stockfish-master\src\evaluate.cpp	/^  const Score ThreatByHangingPawn = S(70, 63);$/;"	m	namespace:__anon21	file:
ThreatByKing	.\Stockfish-master\src\evaluate.cpp	/^  const Score ThreatByKing[2] = { S(3, 62), S(9, 138) };$/;"	m	namespace:__anon21	file:
ThreatByPawnPush	.\Stockfish-master\src\evaluate.cpp	/^  const Score ThreatByPawnPush    = S(31, 19);$/;"	m	namespace:__anon21	file:
ThreatBySafePawn	.\Stockfish-master\src\evaluate.cpp	/^  const Score ThreatBySafePawn[PIECE_TYPE_NB] = {$/;"	m	namespace:__anon21	file:
Tie	.\Stockfish-master\src\misc.cpp	/^  Tie(streambuf* b, streambuf* l) : buf(b), logBuf(l) {}$/;"	f	struct:__anon24::Tie
Tie	.\Stockfish-master\src\misc.cpp	/^struct Tie: public streambuf { \/\/ MSVC requires split streambuf for cin and cout$/;"	s	namespace:__anon24	file:
Time	.\Stockfish-master\src\timeman.cpp	/^TimeManagement Time; \/\/ Our global time management object$/;"	v
TimeManagement	.\Stockfish-master\src\timeman.h	/^class TimeManagement {$/;"	c
TimePoint	.\Stockfish-master\src\misc.h	/^typedef std::chrono::milliseconds::rep TimePoint; \/\/ A value in milliseconds$/;"	t
TimeType	.\Stockfish-master\src\timeman.cpp	/^  enum TimeType { OptimumTime, MaxTime };$/;"	g	namespace:__anon33	file:
Trace	.\Stockfish-master\src\evaluate.cpp	/^  namespace Trace {$/;"	n	namespace:__anon21	file:
TranspositionTable	.\Stockfish-master\src\tt.h	/^class TranspositionTable {$/;"	c
TrappedBishopA1H1	.\Stockfish-master\src\evaluate.cpp	/^  const Score TrappedBishopA1H1 = S(50, 50);$/;"	m	namespace:__anon21	file:
TrappedRook	.\Stockfish-master\src\evaluate.cpp	/^  const Score TrappedRook         = S(92,  0);$/;"	m	namespace:__anon21	file:
U16	.\types.h	9;"	d
U32	.\types.h	8;"	d
U64	.\types.h	7;"	d
U8	.\types.h	11;"	d
UCI	.\Stockfish-master\src\uci.h	/^namespace UCI {$/;"	n
UCI	.\Stockfish-master\src\ucioption.cpp	/^namespace UCI {$/;"	n	file:
UCI_H_INCLUDED	.\Stockfish-master\src\uci.h	22;"	d
UNKNOWN	.\Stockfish-master\src\bitbase.cpp	/^    UNKNOWN = 1,$/;"	e	enum:__anon16::Result	file:
UNLOCK	.\Stockfish-master\src\syzygy\tbcore.h	24;"	d
UNLOCK	.\Stockfish-master\src\syzygy\tbcore.h	29;"	d
USE_BSFQ	.\Stockfish-master\src\types.h	65;"	d
UTIL_H	.\util.h	2;"	d
Unstoppable	.\Stockfish-master\src\evaluate.cpp	/^  const Score Unstoppable         = S( 0, 20);$/;"	m	namespace:__anon21	file:
Unsupported	.\Stockfish-master\src\pawns.cpp	/^  const Score Unsupported = S(20, 10);$/;"	m	namespace:__anon27	file:
UseRule50	.\Stockfish-master\src\search.cpp	/^  bool UseRule50;$/;"	m	namespace:Tablebases	file:
V	.\Stockfish-master\src\evaluate.cpp	122;"	d	file:
V	.\Stockfish-master\src\evaluate.cpp	210;"	d	file:
V	.\Stockfish-master\src\pawns.cpp	32;"	d	file:
V	.\Stockfish-master\src\pawns.cpp	95;"	d	file:
Version	.\Stockfish-master\src\misc.cpp	/^const string Version = "7";$/;"	m	namespace:__anon24	file:
WAIT_TILL_READY	.\display.c	138;"	d	file:
WARN	.\debug.h	16;"	d
WARN	.\debug.h	24;"	d
WDLDIR	.\Stockfish-master\src\syzygy\tbcore.h	42;"	d
WDLSUFFIX	.\Stockfish-master\src\syzygy\tbcore.h	40;"	d
WDL_MAGIC	.\Stockfish-master\src\syzygy\tbcore.h	/^const ubyte WDL_MAGIC[4] = { 0x71, 0xe8, 0x23, 0x5d };$/;"	v
WEIGHT_OFFSET	.\book.h	9;"	d
WEST	.\types.h	/^	WEST,$/;"	e	enum:dir_e
WHITE	.\Stockfish-master\src\types.h	/^  WHITE, BLACK, NO_COLOR, COLOR_NB = 2$/;"	e	enum:Color
WHITE	.\types.h	/^	WHITE,$/;"	e	enum:color_e
WHITE_CASTLE_LONG	.\types.h	53;"	d
WHITE_CASTLE_SHORT	.\types.h	52;"	d
WHITE_OO	.\Stockfish-master\src\types.h	/^  WHITE_OO,$/;"	e	enum:CastlingRight
WHITE_OOO	.\Stockfish-master\src\types.h	/^  WHITE_OOO = WHITE_OO << 1,$/;"	e	enum:CastlingRight
WIN	.\Stockfish-master\src\bitbase.cpp	/^    WIN     = 4$/;"	e	enum:__anon16::Result	file:
WIN32_LEAN_AND_MEAN	.\Stockfish-master\src\thread_win32.h	43;"	d
WIN32_LEAN_AND_MEAN	.\Stockfish-master\src\thread_win32.h	45;"	d
WRITE_DISPLAY_DATA	.\display.c	120;"	d	file:
W_BISHOP	.\Stockfish-master\src\types.h	/^  W_PAWN = 1, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING,$/;"	e	enum:Piece
W_KING	.\Stockfish-master\src\types.h	/^  W_PAWN = 1, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING,$/;"	e	enum:Piece
W_KNIGHT	.\Stockfish-master\src\types.h	/^  W_PAWN = 1, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING,$/;"	e	enum:Piece
W_PAWN	.\Stockfish-master\src\types.h	/^  W_PAWN = 1, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING,$/;"	e	enum:Piece
W_QUEEN	.\Stockfish-master\src\types.h	/^  W_PAWN = 1, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING,$/;"	e	enum:Piece
W_ROOK	.\Stockfish-master\src\types.h	/^  W_PAWN = 1, W_KNIGHT, W_BISHOP, W_ROOK, W_QUEEN, W_KING,$/;"	e	enum:Piece
Wattacks	.\bitboard.c	/^BB Wattacks(BB osliders, BB empty) {$/;"	f
Weight	.\Stockfish-master\src\evaluate.cpp	/^  const struct Weight { int mg, eg; } Weights[] = {$/;"	s	namespace:__anon21	file:
Weights	.\Stockfish-master\src\evaluate.cpp	/^  const struct Weight { int mg, eg; } Weights[] = {$/;"	m	namespace:__anon21	typeref:struct:__anon21::Weight	file:
Z_BLACK_LONG_KEY	.\zobrist.h	9;"	d
Z_BLACK_SHORT_KEY	.\zobrist.h	8;"	d
Z_ENPASSANT_COL_KEY	.\zobrist.h	10;"	d
Z_PIECESQUARE_KEY	.\zobrist.h	5;"	d
Z_WHITE_LONG_KEY	.\zobrist.h	7;"	d
Z_WHITE_SHORT_KEY	.\zobrist.h	6;"	d
Z_WHITE_TURN_KEY	.\zobrist.h	11;"	d
Zobrist	.\Stockfish-master\src\position.cpp	/^namespace Zobrist {$/;"	n	file:
Zobrist	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^namespace Zobrist {$/;"	n	file:
__ST_X_H__	.\stateHeaderTemplate.h	2;"	d
a1	.\constants.h	75;"	d
a2	.\constants.h	76;"	d
a3	.\constants.h	77;"	d
a4	.\constants.h	78;"	d
a5	.\constants.h	79;"	d
a6	.\constants.h	80;"	d
a7	.\constants.h	81;"	d
a8	.\constants.h	82;"	d
action	.\hsm.h	/^   actionFunc_t   action;   \/\/ The action, if any, to perform$/;"	m	struct:transDef_s
actionFunc_t	.\hsm.h	/^typedef void   (*actionFunc_t)( event_t ev );$/;"	t
activeLine	.\st_timeOptionMenu.c	/^uint8_t activeLine;$/;"	v
add	.\Stockfish-master\src\endgame.cpp	/^void Endgames::add(const string& code) {$/;"	f	class:Endgames
add	.\Stockfish-master\src\evaluate.cpp	/^    void add(int idx, Color c, Score s) {$/;"	f	namespace:__anon21::Trace
add	.\Stockfish-master\src\evaluate.cpp	/^    void add(int idx, Score w, Score b = SCORE_ZERO) {$/;"	f	namespace:__anon21::Trace
addMove	.\moves.c	/^static void addMove(int from, int to, move_t *moveList)$/;"	f	file:
addMovePromote	.\moves.c	/^static void addMovePromote(int from, int to, move_t *moveList)$/;"	f	file:
addPiece	.\board.c	/^void addPiece(board_t *b, U8 sq, piece_t p, color_t c)$/;"	f
add_to_hash	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void add_to_hash(struct TBEntry *ptr, uint64 key)$/;"	f	file:
add_underprom_caps	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static ExtMove *add_underprom_caps(Position& pos, ExtMove *stack, ExtMove *end)$/;"	f	file:
adjacent_files_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard adjacent_files_bb(File f) {$/;"	f
advanced_pawn_push	.\Stockfish-master\src\position.h	/^inline bool Position::advanced_pawn_push(Move m) const {$/;"	f	class:Position
aligned	.\Stockfish-master\src\bitboard.h	/^inline bool aligned(Square s1, Square s2, Square s3) {$/;"	f
applyMove	.\Archive\eventManager.c	/^static void applyMove( move_t mv )$/;"	f	file:
asymmetry	.\Stockfish-master\src\pawns.h	/^  int asymmetry;$/;"	m	struct:Pawns::Entry
attackedBy	.\Stockfish-master\src\evaluate.cpp	/^    Bitboard attackedBy[COLOR_NB][PIECE_TYPE_NB];$/;"	m	struct:__anon21::EvalInfo	file:
attackers_to	.\Stockfish-master\src\position.cpp	/^Bitboard Position::attackers_to(Square s, Bitboard occupied) const {$/;"	f	class:Position
attackers_to	.\Stockfish-master\src\position.h	/^inline Bitboard Position::attackers_to(Square s) const {$/;"	f	class:Position
attacks_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard attacks_bb(Piece pc, Square s, Bitboard occupied) {$/;"	f
attacks_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard attacks_bb(Square s, Bitboard occupied) {$/;"	f
attacks_from	.\Stockfish-master\src\position.h	/^inline Bitboard Position::attacks_from(Piece pc, Square s) const {$/;"	f	class:Position
attacks_from	.\Stockfish-master\src\position.h	/^inline Bitboard Position::attacks_from(Square s) const {$/;"	f	class:Position
attacks_from	.\Stockfish-master\src\position.h	/^inline Bitboard Position::attacks_from<PAWN>(Square s, Color c) const {$/;"	f	class:Position
available	.\Stockfish-master\src\timeman.h	/^  int available() const { return int(optimumTime * unstablePvFactor * 1.016); }$/;"	f	class:TimeManagement
availableNodes	.\Stockfish-master\src\timeman.h	/^  int64_t availableNodes; \/\/ When in 'nodes as time' mode$/;"	m	class:TimeManagement
b1	.\constants.h	84;"	d
b2	.\constants.h	85;"	d
b3	.\constants.h	86;"	d
b4	.\constants.h	87;"	d
b5	.\constants.h	88;"	d
b6	.\constants.h	89;"	d
b7	.\constants.h	90;"	d
b8	.\constants.h	91;"	d
bIncrement	.\types.h	/^    uint32_t bIncrement;$/;"	m	struct:game_s
bLastSampleState	.\switch.c	/^static uint8_t bLastSampleState = 0;$/;"	v	file:
bSampleState	.\switch.c	/^static uint8_t bSampleState = 0;$/;"	v	file:
backEvent	.\menu.h	/^   uint16_t   backEvent;  \/\/ TRUE  = Left button on any item without picker will trigger return of "M_EV_BACK" event,$/;"	m	struct:menu_s
backmost_sq	.\Stockfish-master\src\bitboard.h	/^inline Square  backmost_sq(Color c, Bitboard b) { return c == WHITE ? lsb(b) : msb(b); }$/;"	f
base	.\Stockfish-master\src\syzygy\tbcore.h	/^  base_t base[1]; \/\/ C++ complains about base[]...$/;"	m	struct:PairsData
base_t	.\Stockfish-master\src\syzygy\tbcore.h	/^typedef uint64 base_t;$/;"	t
bcm2835FunctionSelect	.\bcm2835.h	/^} bcm2835FunctionSelect;$/;"	t	typeref:enum:__anon2
bcm2835I2CClockDivider	.\bcm2835.h	/^} bcm2835I2CClockDivider;$/;"	t	typeref:enum:__anon10
bcm2835I2CReasonCodes	.\bcm2835.h	/^} bcm2835I2CReasonCodes;$/;"	t	typeref:enum:__anon11
bcm2835PUDControl	.\bcm2835.h	/^} bcm2835PUDControl;$/;"	t	typeref:enum:__anon3
bcm2835PWMClockDivider	.\bcm2835.h	/^} bcm2835PWMClockDivider;$/;"	t	typeref:enum:__anon12
bcm2835PadGroup	.\bcm2835.h	/^} bcm2835PadGroup;$/;"	t	typeref:enum:__anon4
bcm2835RegisterBase	.\bcm2835.h	/^} bcm2835RegisterBase;$/;"	t	typeref:enum:__anon1
bcm2835SPIBitOrder	.\bcm2835.h	/^}bcm2835SPIBitOrder;$/;"	t	typeref:enum:__anon6
bcm2835SPIChipSelect	.\bcm2835.h	/^} bcm2835SPIChipSelect;$/;"	t	typeref:enum:__anon8
bcm2835SPIClockDivider	.\bcm2835.h	/^} bcm2835SPIClockDivider;$/;"	t	typeref:enum:__anon9
bcm2835SPIMode	.\bcm2835.h	/^}bcm2835SPIMode;$/;"	t	typeref:enum:__anon7
bcm2835_bsc0	.\bcm2835.c	/^volatile uint32_t *bcm2835_bsc0        = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_bsc1	.\bcm2835.c	/^volatile uint32_t *bcm2835_bsc1        = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_clk	.\bcm2835.c	/^volatile uint32_t *bcm2835_clk         = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_close	.\bcm2835.c	/^int bcm2835_close(void)$/;"	f
bcm2835_delay	.\bcm2835.c	/^void bcm2835_delay(unsigned int millis)$/;"	f
bcm2835_delayMicroseconds	.\bcm2835.c	/^void bcm2835_delayMicroseconds(uint64_t micros)$/;"	f
bcm2835_gpio	.\bcm2835.c	/^volatile uint32_t *bcm2835_gpio        = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_gpio_afen	.\bcm2835.c	/^void bcm2835_gpio_afen(uint8_t pin)$/;"	f
bcm2835_gpio_aren	.\bcm2835.c	/^void bcm2835_gpio_aren(uint8_t pin)$/;"	f
bcm2835_gpio_clr	.\bcm2835.c	/^void bcm2835_gpio_clr(uint8_t pin)$/;"	f
bcm2835_gpio_clr_afen	.\bcm2835.c	/^void bcm2835_gpio_clr_afen(uint8_t pin)$/;"	f
bcm2835_gpio_clr_aren	.\bcm2835.c	/^void bcm2835_gpio_clr_aren(uint8_t pin)$/;"	f
bcm2835_gpio_clr_fen	.\bcm2835.c	/^void bcm2835_gpio_clr_fen(uint8_t pin)$/;"	f
bcm2835_gpio_clr_hen	.\bcm2835.c	/^void bcm2835_gpio_clr_hen(uint8_t pin)$/;"	f
bcm2835_gpio_clr_len	.\bcm2835.c	/^void bcm2835_gpio_clr_len(uint8_t pin)$/;"	f
bcm2835_gpio_clr_multi	.\bcm2835.c	/^void bcm2835_gpio_clr_multi(uint32_t mask)$/;"	f
bcm2835_gpio_clr_ren	.\bcm2835.c	/^void bcm2835_gpio_clr_ren(uint8_t pin)$/;"	f
bcm2835_gpio_eds	.\bcm2835.c	/^uint8_t bcm2835_gpio_eds(uint8_t pin)$/;"	f
bcm2835_gpio_fen	.\bcm2835.c	/^void bcm2835_gpio_fen(uint8_t pin)$/;"	f
bcm2835_gpio_fsel	.\bcm2835.c	/^void bcm2835_gpio_fsel(uint8_t pin, uint8_t mode)$/;"	f
bcm2835_gpio_hen	.\bcm2835.c	/^void bcm2835_gpio_hen(uint8_t pin)$/;"	f
bcm2835_gpio_len	.\bcm2835.c	/^void bcm2835_gpio_len(uint8_t pin)$/;"	f
bcm2835_gpio_lev	.\bcm2835.c	/^uint8_t bcm2835_gpio_lev(uint8_t pin)$/;"	f
bcm2835_gpio_pad	.\bcm2835.c	/^uint32_t bcm2835_gpio_pad(uint8_t group)$/;"	f
bcm2835_gpio_pud	.\bcm2835.c	/^void bcm2835_gpio_pud(uint8_t pud)$/;"	f
bcm2835_gpio_pudclk	.\bcm2835.c	/^void bcm2835_gpio_pudclk(uint8_t pin, uint8_t on)$/;"	f
bcm2835_gpio_ren	.\bcm2835.c	/^void bcm2835_gpio_ren(uint8_t pin)$/;"	f
bcm2835_gpio_set	.\bcm2835.c	/^void bcm2835_gpio_set(uint8_t pin)$/;"	f
bcm2835_gpio_set_eds	.\bcm2835.c	/^void bcm2835_gpio_set_eds(uint8_t pin)$/;"	f
bcm2835_gpio_set_multi	.\bcm2835.c	/^void bcm2835_gpio_set_multi(uint32_t mask)$/;"	f
bcm2835_gpio_set_pad	.\bcm2835.c	/^void bcm2835_gpio_set_pad(uint8_t group, uint32_t control)$/;"	f
bcm2835_gpio_set_pud	.\bcm2835.c	/^void bcm2835_gpio_set_pud(uint8_t pin, uint8_t pud)$/;"	f
bcm2835_gpio_write	.\bcm2835.c	/^void bcm2835_gpio_write(uint8_t pin, uint8_t on)$/;"	f
bcm2835_gpio_write_mask	.\bcm2835.c	/^void bcm2835_gpio_write_mask(uint32_t value, uint32_t mask)$/;"	f
bcm2835_gpio_write_multi	.\bcm2835.c	/^void bcm2835_gpio_write_multi(uint32_t mask, uint8_t on)$/;"	f
bcm2835_i2c_begin	.\bcm2835.c	/^void bcm2835_i2c_begin(void)$/;"	f
bcm2835_i2c_end	.\bcm2835.c	/^void bcm2835_i2c_end(void)$/;"	f
bcm2835_i2c_read	.\bcm2835.c	/^uint8_t bcm2835_i2c_read(char* buf, uint32_t len)$/;"	f
bcm2835_i2c_read_register_rs	.\bcm2835.c	/^uint8_t bcm2835_i2c_read_register_rs(char* regaddr, char* buf, uint32_t len)$/;"	f
bcm2835_i2c_setClockDivider	.\bcm2835.c	/^void bcm2835_i2c_setClockDivider(uint16_t divider)$/;"	f
bcm2835_i2c_setSlaveAddress	.\bcm2835.c	/^void bcm2835_i2c_setSlaveAddress(uint8_t addr)$/;"	f
bcm2835_i2c_set_baudrate	.\bcm2835.c	/^void bcm2835_i2c_set_baudrate(uint32_t baudrate)$/;"	f
bcm2835_i2c_write	.\bcm2835.c	/^uint8_t bcm2835_i2c_write(const char * buf, uint32_t len)$/;"	f
bcm2835_i2c_write_read_rs	.\bcm2835.c	/^uint8_t bcm2835_i2c_write_read_rs(char* cmds, uint32_t cmds_len, char* buf, uint32_t buf_len)$/;"	f
bcm2835_init	.\bcm2835.c	/^int bcm2835_init(void)$/;"	f
bcm2835_pads	.\bcm2835.c	/^volatile uint32_t *bcm2835_pads        = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_peri_read	.\bcm2835.c	/^uint32_t bcm2835_peri_read(volatile uint32_t* paddr)$/;"	f
bcm2835_peri_read_nb	.\bcm2835.c	/^uint32_t bcm2835_peri_read_nb(volatile uint32_t* paddr)$/;"	f
bcm2835_peri_set_bits	.\bcm2835.c	/^void bcm2835_peri_set_bits(volatile uint32_t* paddr, uint32_t value, uint32_t mask)$/;"	f
bcm2835_peri_write	.\bcm2835.c	/^void bcm2835_peri_write(volatile uint32_t* paddr, uint32_t value)$/;"	f
bcm2835_peri_write_nb	.\bcm2835.c	/^void bcm2835_peri_write_nb(volatile uint32_t* paddr, uint32_t value)$/;"	f
bcm2835_peripherals	.\bcm2835.c	/^uint32_t *bcm2835_peripherals = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_peripherals_base	.\bcm2835.c	/^uint32_t *bcm2835_peripherals_base = (uint32_t *)BCM2835_PERI_BASE;$/;"	v
bcm2835_peripherals_size	.\bcm2835.c	/^uint32_t bcm2835_peripherals_size = BCM2835_PERI_SIZE;$/;"	v
bcm2835_pwm	.\bcm2835.c	/^volatile uint32_t *bcm2835_pwm         = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_pwm_set_clock	.\bcm2835.c	/^void bcm2835_pwm_set_clock(uint32_t divisor)$/;"	f
bcm2835_pwm_set_data	.\bcm2835.c	/^void bcm2835_pwm_set_data(uint8_t channel, uint32_t data)$/;"	f
bcm2835_pwm_set_mode	.\bcm2835.c	/^void bcm2835_pwm_set_mode(uint8_t channel, uint8_t markspace, uint8_t enabled)$/;"	f
bcm2835_pwm_set_range	.\bcm2835.c	/^void bcm2835_pwm_set_range(uint8_t channel, uint32_t range)$/;"	f
bcm2835_regbase	.\bcm2835.c	/^uint32_t* bcm2835_regbase(uint8_t regbase)$/;"	f
bcm2835_set_debug	.\bcm2835.c	/^void  bcm2835_set_debug(uint8_t d)$/;"	f
bcm2835_spi0	.\bcm2835.c	/^volatile uint32_t *bcm2835_spi0        = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_spi_begin	.\bcm2835.c	/^void bcm2835_spi_begin(void)$/;"	f
bcm2835_spi_chipSelect	.\bcm2835.c	/^void bcm2835_spi_chipSelect(uint8_t cs)$/;"	f
bcm2835_spi_end	.\bcm2835.c	/^void bcm2835_spi_end(void)$/;"	f
bcm2835_spi_setBitOrder	.\bcm2835.c	/^void bcm2835_spi_setBitOrder(uint8_t __attribute__((unused)) order)$/;"	f
bcm2835_spi_setChipSelectPolarity	.\bcm2835.c	/^void bcm2835_spi_setChipSelectPolarity(uint8_t cs, uint8_t active)$/;"	f
bcm2835_spi_setClockDivider	.\bcm2835.c	/^void bcm2835_spi_setClockDivider(uint16_t divider)$/;"	f
bcm2835_spi_setDataMode	.\bcm2835.c	/^void bcm2835_spi_setDataMode(uint8_t mode)$/;"	f
bcm2835_spi_transfer	.\bcm2835.c	/^uint8_t bcm2835_spi_transfer(uint8_t value)$/;"	f
bcm2835_spi_transfern	.\bcm2835.c	/^void bcm2835_spi_transfern(char* buf, uint32_t len)$/;"	f
bcm2835_spi_transfernb	.\bcm2835.c	/^void bcm2835_spi_transfernb(char* tbuf, char* rbuf, uint32_t len)$/;"	f
bcm2835_spi_writenb	.\bcm2835.c	/^void bcm2835_spi_writenb(char* tbuf, uint32_t len)$/;"	f
bcm2835_st	.\bcm2835.c	/^volatile uint32_t *bcm2835_st	       = (uint32_t *)MAP_FAILED;$/;"	v
bcm2835_st_delay	.\bcm2835.c	/^void bcm2835_st_delay(uint64_t offset_micros, uint64_t micros)$/;"	f
bcm2835_st_read	.\bcm2835.c	/^uint64_t bcm2835_st_read(void)$/;"	f
bcm2835_version	.\bcm2835.c	/^unsigned int bcm2835_version(void)$/;"	f
begin	.\Stockfish-master\src\movegen.h	/^  const ExtMove* begin() const { return moveList; }$/;"	f	struct:MoveList
begin	.\Stockfish-master\src\movepick.h	/^  ExtMove* begin() { return moves; }$/;"	f	class:MovePicker
benchmark	.\Stockfish-master\src\benchmark.cpp	/^void benchmark(const Position& current, istream& is) {$/;"	f
best	.\Stockfish-master\src\search.cpp	/^    Move best = MOVE_NONE;$/;"	m	struct:__anon29::Skill	file:
bestMoveChanges	.\Stockfish-master\src\thread.h	/^  double bestMoveChanges;$/;"	m	struct:MainThread
best_move	.\Stockfish-master\src\search.cpp	/^    Move best_move(size_t multiPV) { return best ? best : pick_best(multiPV); }$/;"	f	struct:__anon29::Skill
between_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard between_bb(Square s1, Square s2) {$/;"	f
binomial	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int binomial[5][64];$/;"	v	file:
bitBoard	.\switch.c	/^static uint64_t bitBoard = 0;$/;"	v	file:
bitCount	.\bitboard.c	/^int bitCount (BB x)$/;"	f
bk	.\book.c	/^static FILE *bk = NULL;$/;"	v	file:
black	.\options.h	/^   player_t      black;$/;"	m	struct:gameOptions_s
blink	.\display.c	/^   bool_t blink;   \/\/ Blink the cursor$/;"	m	struct:cursorInfo_s	file:
blocksize	.\Stockfish-master\src\syzygy\tbcore.h	/^  int blocksize;$/;"	m	struct:PairsData
board	.\Stockfish-master\src\position.h	/^  Piece board[SQUARE_NB];$/;"	m	class:Position
board	.\options.h	/^   boardOptions_t   board;$/;"	m	struct:options_s
boardChangeHandler	.\Archive\eventManager.c	/^static void boardChangeHandler( int sq, event_t ev )$/;"	f	file:
boardErr_e	.\types.h	/^typedef enum boardErr_e$/;"	g
boardErr_t	.\types.h	/^}boardErr_t;$/;"	t	typeref:enum:boardErr_e
boardOptionMen_pickLEDBrightness	.\st_boardOptionMenu.c	/^static char *boardOptionMen_pickLEDBrightness( int dir )$/;"	f	file:
boardOptionMenu	.\st_boardOptionMenu.c	/^menu_t *boardOptionMenu;$/;"	v
boardOptionMenuEntry	.\st_boardOptionMenu.c	/^void boardOptionMenuEntry( event_t ev )$/;"	f
boardOptionMenuExit	.\st_boardOptionMenu.c	/^void boardOptionMenuExit( event_t ev )$/;"	f
boardOptions_s	.\options.h	/^typedef struct boardOptions_s$/;"	s
boardOptions_t	.\options.h	/^}boardOptions_t;$/;"	t	typeref:struct:boardOptions_s
board_s	.\types.h	/^typedef struct board_s$/;"	s
board_t	.\types.h	/^}board_t;$/;"	t	typeref:struct:board_s
bookErr_t	.\book.h	/^}bookErr_t;$/;"	t	typeref:enum:__anon14
bool_e	.\types.h	/^typedef enum bool_e$/;"	g
bool_t	.\types.h	/^}bool_t;$/;"	t	typeref:enum:bool_e
bottom	.\Archive\displayStrings.h	/^   displayLine_t bottom;$/;"	m	struct:displayMessage_s
bound	.\Stockfish-master\src\tt.h	/^  Bound bound() const { return (Bound)(genBound8 & 0x3); }$/;"	f	struct:TTEntry
brd	.\Archive\eventManager.c	/^static board_t brd;$/;"	v	file:
brd	.\types.h	/^    board_t  brd;$/;"	m	struct:game_s
bsf_index	.\Stockfish-master\src\bitboard.cpp	/^  unsigned bsf_index(Bitboard b) {$/;"	f	namespace:__anon18
btime	.\types.h	/^    uint32_t btime;$/;"	m	struct:game_s
buf	.\Stockfish-master\src\misc.cpp	/^  streambuf *buf, *logBuf;$/;"	m	struct:__anon24::Tie	file:
buttonDebounce	.\switch.c	/^static void buttonDebounce (uint8_t switchData)$/;"	f	file:
buttonPosEventHandler	.\Archive\eventManager.c	/^static void buttonPosEventHandler  (buttonPos_t bPos )$/;"	f	file:
buttonPos_e	.\switch.h	/^typedef enum buttonPos_e$/;"	g
buttonPos_t	.\switch.h	/^}buttonPos_t;$/;"	t	typeref:enum:buttonPos_e
buttonPressEventHandler	.\Archive\eventManager.c	/^static void buttonPressEventHandler( buttonPress_t bEvent )$/;"	f	file:
buttonPress_e	.\switch.h	/^typedef enum buttonPress_e$/;"	g
buttonPress_t	.\switch.h	/^}buttonPress_t;$/;"	t	typeref:enum:buttonPress_e
byColorBB	.\Stockfish-master\src\position.h	/^  Bitboard byColorBB[COLOR_NB];$/;"	m	class:Position
byTypeBB	.\Stockfish-master\src\position.h	/^  Bitboard byTypeBB[PIECE_TYPE_NB];$/;"	m	class:Position
c1	.\constants.h	93;"	d
c2	.\constants.h	94;"	d
c3	.\constants.h	95;"	d
c4	.\constants.h	96;"	d
c5	.\constants.h	97;"	d
c6	.\constants.h	98;"	d
c7	.\constants.h	99;"	d
c8	.\constants.h	100;"	d
calc_factors_pawn	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static uint64 calc_factors_pawn(int *factor, int num, int order, int order2, ubyte *norm, int file)$/;"	f	file:
calc_factors_piece	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static uint64 calc_factors_piece(int *factor, int num, int order, ubyte *norm, ubyte enc_type)$/;"	f	file:
calc_key	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static uint64 calc_key(Position& pos, int mirror)$/;"	f	file:
calc_key_from_pcs	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static uint64 calc_key_from_pcs(int *pcs, int mirror)$/;"	f	file:
calc_symlen	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void calc_symlen(struct PairsData *d, int s, char *tmp)$/;"	f	file:
calculateMoveEffects	.\Archive\eventManager.c	/^static void calculateMoveEffects(const move_t *moves, const board_t *brd, moveEffects_t *effects, int num)$/;"	f	file:
calculateMoveEffects	.\st_playerMove.c	/^static void calculateMoveEffects(const move_t *moves, const board_t *brd, moveEffects_t *effects, int num)$/;"	f	file:
callsCnt	.\Stockfish-master\src\thread.h	/^  int maxPly, callsCnt;$/;"	m	class:Thread
can_castle	.\Stockfish-master\src\position.h	/^inline int Position::can_castle(CastlingRight cr) const {$/;"	f	class:Position
can_castle	.\Stockfish-master\src\position.h	/^inline int Position::can_castle(Color c) const {$/;"	f	class:Position
candidate_t	.\book.h	/^}candidate_t;$/;"	t	typeref:struct:__anon13
capture	.\Stockfish-master\src\position.h	/^inline bool Position::capture(Move m) const {$/;"	f	class:Position
capture_or_promotion	.\Stockfish-master\src\position.h	/^inline bool Position::capture_or_promotion(Move m) const {$/;"	f	class:Position
captured	.\types.h	/^	unsigned short captured         :3; \/\/ piece captured by this move (PIECE_NONE if no capture)$/;"	m	struct:revMov_s
capturedType	.\Stockfish-master\src\position.h	/^  PieceType  capturedType;$/;"	m	struct:StateInfo
captured_piece_type	.\Stockfish-master\src\position.h	/^inline PieceType Position::captured_piece_type() const {$/;"	f	class:Position
castleBits	.\types.h	/^	U8 castleBits;  \/\/ Castle bits (ordered bit 3 to bit 0) in same order as FEN bits.$/;"	m	struct:board_s
castling	.\Stockfish-master\src\position.cpp	/^  Key castling[CASTLING_RIGHT_NB];$/;"	m	namespace:Zobrist	file:
castlingPath	.\Stockfish-master\src\position.h	/^  Bitboard castlingPath[CASTLING_RIGHT_NB];$/;"	m	class:Position
castlingRights	.\Stockfish-master\src\pawns.h	/^  int castlingRights[COLOR_NB];$/;"	m	struct:Pawns::Entry
castlingRights	.\Stockfish-master\src\position.h	/^  int    castlingRights;$/;"	m	struct:StateInfo
castlingRightsMask	.\Stockfish-master\src\position.h	/^  int castlingRightsMask[SQUARE_NB];$/;"	m	class:Position
castlingRookSquare	.\Stockfish-master\src\position.h	/^  Square castlingRookSquare[CASTLING_RIGHT_NB];$/;"	m	class:Position
castling_impeded	.\Stockfish-master\src\position.h	/^inline bool Position::castling_impeded(CastlingRight cr) const {$/;"	f	class:Position
castling_rook_square	.\Stockfish-master\src\position.h	/^inline Square Position::castling_rook_square(CastlingRight cr) const {$/;"	f	class:Position
cbPtr_t	.\switch.h	/^typedef void (*cbPtr_t)(int sq, bool_t state);$/;"	t
charBackslash	.\specChars.c	/^specCharDefn charBackslash = &charBackslashArray;$/;"	v
charBackslashArray	.\specChars.c	/^const uint8_t charBackslashArray[8]        = { 0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00};$/;"	v
charLeftFilledArrow	.\specChars.c	/^specCharDefn charLeftFilledArrow = &charLeftFilledArrowArray;$/;"	v
charLeftFilledArrowArray	.\specChars.c	/^const uint8_t charLeftFilledArrowArray[8]  = { 0x02, 0x06, 0x0E, 0x1E, 0x0E, 0x06, 0x02, 0x00};$/;"	v
charRightFilledArrow	.\specChars.c	/^specCharDefn charRightFilledArrow = &charRightFilledArrowArray;$/;"	v
charRightFilledArrowArray	.\specChars.c	/^const uint8_t charRightFilledArrowArray[8] = { 0x08, 0x0C, 0x0E, 0x0F, 0x0E, 0x0C, 0x08, 0x00};$/;"	v
checkRow	.\switch.c	/^static uint8_t checkRow(uint8_t row, uint8_t intPin, uint8_t portAddress, uint8_t slaveAddress)$/;"	f	file:
checkSquares	.\Stockfish-master\src\position.h	/^  Bitboard checkSquares[PIECE_TYPE_NB];$/;"	m	struct:CheckInfo
checkValidMoveProgress	.\Archive\eventManager.c	/^static moveVal_t checkValidMoveProgress(moveEffects_t *moveEffects, int numMoves, BB dirtySquares, BB occupiedSquares, move_t **ret)$/;"	f	file:
checkValidMoveProgress	.\st_playerMove.c	/^static moveVal_t checkValidMoveProgress(moveEffects_t *moveEffects, int numMoves, BB dirtySquares, BB occupiedSquares, move_t **ret)$/;"	f	file:
check_blockers	.\Stockfish-master\src\position.cpp	/^Bitboard Position::check_blockers(Color c, Color kingColor) const {$/;"	f	class:Position
check_time	.\Stockfish-master\src\search.cpp	/^  void check_time() {$/;"	f	namespace:__anon30
checkers	.\Stockfish-master\src\position.h	/^inline Bitboard Position::checkers() const {$/;"	f	class:Position
checkersBB	.\Stockfish-master\src\position.h	/^  Bitboard   checkersBB;$/;"	m	struct:StateInfo
chess960	.\Stockfish-master\src\position.h	/^  bool chess960;$/;"	m	class:Position
chess960	.\options.h	/^   bool_t        chess960;$/;"	m	struct:gameOptions_s
chess960	.\types.h	/^    bool_t chess960;$/;"	m	struct:game_s
classify	.\Stockfish-master\src\bitbase.cpp	/^    Result classify(const std::vector<KPKPosition>& db)$/;"	f	struct:__anon16::KPKPosition
classify	.\Stockfish-master\src\bitbase.cpp	/^  Result KPKPosition::classify(const std::vector<KPKPosition>& db) {$/;"	f	class:__anon17::KPKPosition
clear	.\Stockfish-master\src\movepick.h	/^  void clear() { std::memset(table, 0, sizeof(table)); }$/;"	f	struct:Stats
clear	.\Stockfish-master\src\position.cpp	/^void Position::clear() {$/;"	f	class:Position
clear	.\Stockfish-master\src\search.cpp	/^    void clear() {$/;"	f	struct:__anon29::EasyMoveManager
clear	.\Stockfish-master\src\search.cpp	/^void Search::clear() {$/;"	f	class:Search
clear	.\Stockfish-master\src\tt.cpp	/^void TranspositionTable::clear() {$/;"	f	class:TranspositionTable
clearEvents	.\event.c	/^void clearEvents( evQueueIndex_t indx )$/;"	f
clearlsb	.\bitboard.h	36;"	d
clocks	.\types.h	/^   uint32_t clocks[2];  \/\/ Clock value when this position reached$/;"	m	struct:posHistory_s
closeBook	.\book.c	/^bookErr_t closeBook( void )$/;"	f
close_tb	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void close_tb(FD fd)$/;"	f	file:
clusterCount	.\Stockfish-master\src\tt.h	/^  size_t clusterCount;$/;"	m	class:TranspositionTable
col	.\display.c	/^   int    col;     \/\/ Display col (0-19)$/;"	m	struct:cursorInfo_s	file:
color_e	.\types.h	/^typedef enum color_e$/;"	g
color_of	.\Stockfish-master\src\types.h	/^inline Color color_of(Piece pc) {$/;"	f
color_t	.\types.h	/^}color_t;$/;"	t	typeref:enum:color_e
colors	.\types.h	/^	BB colors[2]; \/\/ bit boards for each color (color_t is used as offset)$/;"	m	struct:board_s
compStrategySetting	.\types.h	/^   compStrategySetting_t     compStrategySetting; \/\/ only used if type == TIME_NONE$/;"	m	struct:timeControl_s
compStrategySetting_s	.\types.h	/^typedef struct compStrategySetting_s$/;"	s
compStrategySetting_t	.\types.h	/^}compStrategySetting_t;$/;"	t	typeref:struct:compStrategySetting_s
compareKey	.\book.c	/^static U32 compareKey(U32 lower, U32 upper)$/;"	f	file:
completedDepth	.\Stockfish-master\src\thread.h	/^  Depth completedDepth;$/;"	m	class:Thread
computerMoveEntry	.\st_computerMove.c	/^void computerMoveEntry( event_t ev )$/;"	f
computerMoveExit	.\st_computerMove.c	/^void computerMoveExit( event_t ev )$/;"	f
computerMovePending	.\st_playingGame.c	/^bool_t computerMovePending = FALSE;$/;"	v
computerMove_computerPicked	.\st_computerMove.c	/^void computerMove_computerPicked( event_t ev)$/;"	f
computerMove_engineSelection	.\st_computerMove.c	/^static void computerMove_engineSelection( move_t mv, move_t ponder )$/;"	f	file:
computerStrategy_e	.\types.h	/^typedef enum computerStrategy_e$/;"	g
computerStrategy_t	.\types.h	/^}computerStrategy_t;$/;"	t	typeref:enum:computerStrategy_e
contains	.\Stockfish-master\src\movegen.h	/^  bool contains(Move move) const {$/;"	f	struct:MoveList
contents	.\display.c	/^   char          contents[NUM_LINES][LINE_LENGTH];$/;"	m	struct:display_s	file:
controlBits	.\display.c	/^uint8_t controlBits = 0;$/;"	v
convertCoordMove	.\util.c	/^move_t convertCoordMove( char *coord )$/;"	f
convertSqNumToCoord	.\util.c	/^char *convertSqNumToCoord(int sq)$/;"	f
convertTimeToString	.\Archive\eventManager.c	/^static char *convertTimeToString (uint32_t tenths )$/;"	f	file:
convertTimeToString	.\st_inGame.c	/^static char *convertTimeToString (uint32_t tenths )$/;"	f	file:
correctCastling	.\book.c	/^static void correctCastling(board_t *b, move_t *mv)$/;"	f	file:
count	.\Stockfish-master\src\position.h	/^template<PieceType Pt> inline int Position::count(Color c) const {$/;"	f	class:Position
counterMoves	.\Stockfish-master\src\thread.h	/^  MovesStats counterMoves;$/;"	m	class:Thread
counterMovesHistory	.\Stockfish-master\src\movepick.h	/^  const CounterMovesStats* counterMovesHistory;$/;"	m	class:MovePicker
countermove	.\Stockfish-master\src\movepick.h	/^  Move countermove;$/;"	m	class:MovePicker
createMenu	.\menu.c	/^menu_t *createMenu(char *title, uint16_t backEvent)$/;"	f
createPeriodSummary	.\st_timeOptionMenu.c	/^static char *createPeriodSummary( periodTimingSettings_t *settings )$/;"	f	file:
cs	.\Stockfish-master\src\thread_win32.h	/^  CRITICAL_SECTION cs;$/;"	m	struct:Mutex
cur	.\Stockfish-master\src\movepick.h	/^  ExtMove moves[MAX_MOVES], *cur = moves, *endMoves = moves;$/;"	m	class:MovePicker
currentMenu	.\Archive\eventManager.c	/^menu_t *currentMenu = NULL;$/;"	v
currentMenu	.\st_menus.c	/^static menu_t *currentMenu = NULL;$/;"	v	file:
currentMove	.\Stockfish-master\src\search.h	/^  Move currentMove;$/;"	m	struct:Search::Stack
currentState	.\hsm.h	/^   uint16_t            currentState;$/;"	m	struct:HSM_Handle_s
currentValue	.\Stockfish-master\src\uci.h	/^  std::string defaultValue, currentValue, type;$/;"	m	class:UCI::Option
cursor	.\display.c	/^   cursorInfo_t  cursor;$/;"	m	struct:display_s	file:
cursor	.\display.c	/^cursorInfo_t cursor;$/;"	v
cursorInfo_s	.\display.c	/^typedef struct cursorInfo_s$/;"	s	file:
cursorInfo_t	.\display.c	/^}cursorInfo_t;$/;"	t	typeref:struct:cursorInfo_s	file:
cursorLine	.\menu.h	/^   int        cursorLine;     \/\/ Line which contains currently selected item$/;"	m	struct:menu_s
d1	.\constants.h	102;"	d
d2	.\constants.h	103;"	d
d3	.\constants.h	104;"	d
d4	.\constants.h	105;"	d
d5	.\constants.h	106;"	d
d6	.\constants.h	107;"	d
d7	.\constants.h	108;"	d
d8	.\constants.h	109;"	d
darkSquares	.\constants.c	/^const BB darkSquares =$/;"	v
data	.\Stockfish-master\src\syzygy\tbcore.h	/^  char *data;$/;"	m	struct:DTZEntry_pawn
data	.\Stockfish-master\src\syzygy\tbcore.h	/^  char *data;$/;"	m	struct:DTZEntry_piece
data	.\Stockfish-master\src\syzygy\tbcore.h	/^  char *data;$/;"	m	struct:TBEntry
data	.\Stockfish-master\src\syzygy\tbcore.h	/^  char *data;$/;"	m	struct:TBEntry_pawn
data	.\Stockfish-master\src\syzygy\tbcore.h	/^  char *data;$/;"	m	struct:TBEntry_piece
data	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte *data;$/;"	m	struct:PairsData
data	.\hsm.h	/^   int          data;$/;"	m	struct:event_e
dataByte	.\display.c	/^uint8_t dataByte = 0;$/;"	v
dbg_hit_on	.\Stockfish-master\src\misc.cpp	/^void dbg_hit_on(bool b) { ++hits[0]; if (b) ++hits[1]; }$/;"	f
dbg_hit_on	.\Stockfish-master\src\misc.cpp	/^void dbg_hit_on(bool c, bool b) { if (c) dbg_hit_on(b); }$/;"	f
dbg_mean_of	.\Stockfish-master\src\misc.cpp	/^void dbg_mean_of(int v) { ++means[0]; means[1] += v; }$/;"	f
dbg_print	.\Stockfish-master\src\misc.cpp	/^void dbg_print() {$/;"	f
dcCandidates	.\Stockfish-master\src\position.h	/^  Bitboard dcCandidates;$/;"	m	struct:CheckInfo
debounceCounters	.\switch.c	/^static uint8_t  debounceCounters[64];$/;"	v	file:
debouncedState	.\switch.c	/^static uint64_t debouncedState = 0xFFFFFFFFFFFFFFFF;$/;"	v	file:
debruijn64	.\bitboard.c	/^static const U64 debruijn64 = 0x03f79d71b4cb0a89;$/;"	v	file:
debug	.\bcm2835.c	/^static uint8_t debug = 0;$/;"	v	file:
decompress_pairs	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static ubyte decompress_pairs(struct PairsData *d, uint64 idx)$/;"	f	file:
decompress_pairs	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static ubyte decompress_pairs(struct PairsData *d, uint64 idx)$/;"	f	file:
defaultValue	.\Stockfish-master\src\uci.h	/^  std::string defaultValue, currentValue, type;$/;"	m	class:UCI::Option
defineCharacter	.\display.c	/^void defineCharacter(uint8_t pos, specCharDefn data)$/;"	f
delay	.\bcm2835.h	926;"	d
delayMicroseconds	.\bcm2835.h	927;"	d
depth	.\Stockfish-master\src\movepick.h	/^  Depth depth;$/;"	m	class:MovePicker
depth	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
depth	.\Stockfish-master\src\tt.h	/^  Depth depth() const { return (Depth)depth8; }$/;"	f	struct:TTEntry
depth	.\types.h	/^   uint8_t  depth;$/;"	m	struct:compStrategySetting_s
depth8	.\Stockfish-master\src\tt.h	/^  int8_t   depth8;$/;"	m	struct:TTEntry
destroyMenu	.\menu.c	/^void destroyMenu(menu_t *menu)$/;"	f
diag	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte diag[] = {$/;"	v	file:
diagMenu	.\Archive\eventManager.c	/^menu_t *diagMenu = NULL;$/;"	v
diagMenu	.\st_diagMenu.c	/^menu_t *diagMenu = NULL;$/;"	v
diagMenuEntry	.\st_diagMenu.c	/^void diagMenuEntry( event_t ev )$/;"	f
diagMenuExit	.\st_diagMenu.c	/^void diagMenuExit( event_t ev )$/;"	f
diagSwitchEntry	.\st_diagSwitch.c	/^void diagSwitchEntry( event_t ev )$/;"	f
diagSwitchExit	.\st_diagSwitch.c	/^void diagSwitchExit( event_t ev )$/;"	f
diagSwitch_boardChange	.\st_diagSwitch.c	/^void diagSwitch_boardChange( event_t ev )$/;"	f
dir_e	.\types.h	/^typedef enum dir_e$/;"	g
dir_t	.\types.h	/^}dir_t;$/;"	t	typeref:enum:dir_e
dirtySquares	.\Archive\eventManager.c	/^   BB dirtySquares;      \/\/ Bitboard of squares that should see lifts\/drops for the given move$/;"	m	struct:moveEffect_s	file:
dirtySquares	.\Archive\eventManager.c	/^static BB dirtySquares = 0;$/;"	v	file:
dirtySquares	.\st_playerMove.c	/^   BB dirtySquares;      \/\/ Bitboard of squares that should see lifts\/drops for the given move$/;"	m	struct:moveEffect_s	file:
dirtySquares	.\st_playerMove.c	/^static uint64_t occupiedSquares, dirtySquares;$/;"	v	file:
disableText	.\Archive\eventManager.c	/^char* disableText = "Off";$/;"	v
discovered_check_candidates	.\Stockfish-master\src\position.h	/^inline Bitboard Position::discovered_check_candidates() const {$/;"	f	class:Position
dispInitialSetup	.\Archive\displayStrings.c	/^const displayMessage_t dispInitialSetup  = {"Set board to"    , "opening position"};$/;"	v
dispMenuGameOptions	.\Archive\displayStrings.c	/^const displayMenu_t dispMenuGameOptions = $/;"	v
dispMenuMain	.\Archive\displayStrings.c	/^const displayMenu_t dispMenuMain = $/;"	v
dispSplash1	.\Archive\displayStrings.c	/^const displayMessage_t dispSplash1 =       {"piChess"         , "by Todd Witters" };$/;"	v
dispSplash2	.\Archive\displayStrings.c	/^const displayMessage_t dispSplash2 =       {"powered by"      , "Stockfish"       };$/;"	v
dispStartRecovery	.\Archive\displayStrings.c	/^const displayMessage_t dispStartRecovery = {"Clear the board" , "to begin recovry"};$/;"	v
display	.\display.c	/^display_t display;$/;"	v
displayCap_e	.\Archive\displayStrings.h	/^typedef enum displayCap_e$/;"	g
displayCap_t	.\Archive\displayStrings.h	/^}displayCap_t;$/;"	t	typeref:enum:displayCap_e
displayClear	.\display.c	/^void displayClear( void  )$/;"	f
displayClearCursor	.\display.c	/^void displayClearCursor()$/;"	f
displayClearLine	.\display.c	/^void displayClearLine( int line )$/;"	f
displayIncrement	.\st_timeOptionMenu.c	/^static void displayIncrement( int sec, int line)$/;"	f	file:
displayInit	.\display.c	/^void displayInit( void )$/;"	f
displayLine_t	.\Archive\displayStrings.h	/^typedef char *displayLine_t;$/;"	t
displayMenu_s	.\Archive\displayStrings.h	/^typedef struct displayMenu_s$/;"	s
displayMenu_t	.\Archive\displayStrings.h	/^}displayMenu_t;$/;"	t	typeref:struct:displayMenu_s
displayMessage_s	.\Archive\displayStrings.h	/^typedef struct displayMessage_s$/;"	s
displayMessage_t	.\Archive\displayStrings.h	/^}displayMessage_t;$/;"	t	typeref:struct:displayMessage_s
displayMoves	.\st_timeOptionMenu.c	/^static void displayMoves( int moves )$/;"	f	file:
displayName	.\hsm.h	/^   char                *displayName;   \/\/ Optional name for debugging$/;"	m	struct:stateDef_s
displayPop	.\display.c	/^void displayPop( void )$/;"	f
displayPush	.\display.c	/^void displayPush( void )$/;"	f
displaySetCursor	.\display.c	/^void displaySetCursor( int line, int col, bool_t cursor, bool_t blink)$/;"	f
displaySplashScreen	.\Archive\eventManager.c	/^static void displaySplashScreen( void )$/;"	f	file:
displayStack	.\display.c	/^display_t displayStack[DISPLAY_STACK_DEPTH];$/;"	v
displayStackOffset	.\display.c	/^int displayStackOffset = 0;$/;"	v
displayTotalTime	.\st_timeOptionMenu.c	/^static void displayTotalTime( int min, int line )$/;"	f	file:
displayWriteChars	.\display.c	/^void displayWriteChars( int line, int offset, int len, char *data)$/;"	f
displayWriteLine	.\display.c	/^void displayWriteLine( int line, char *data, bool_t centered)$/;"	f
display_s	.\display.c	/^typedef struct display_s$/;"	s	file:
display_t	.\display.c	/^}display_t;$/;"	t	typeref:struct:display_s	file:
disposition	.\types.h	/^    gameDisposition_t disposition;$/;"	m	struct:game_s
distance	.\Stockfish-master\src\bitboard.h	/^template<> inline int distance<File>(Square x, Square y) { return distance(file_of(x), file_of(y)); }$/;"	f
distance	.\Stockfish-master\src\bitboard.h	/^template<> inline int distance<Rank>(Square x, Square y) { return distance(rank_of(x), rank_of(y)); }$/;"	f
distance	.\Stockfish-master\src\bitboard.h	/^template<> inline int distance<Square>(Square x, Square y) { return SquareDistance[x][y]; }$/;"	f
distance	.\Stockfish-master\src\bitboard.h	/^template<typename T> inline int distance(T x, T y) { return x < y ? y - x : x - y; }$/;"	f
do_castling	.\Stockfish-master\src\position.cpp	/^void Position::do_castling(Color us, Square from, Square& to, Square& rfrom, Square& rto) {$/;"	f	class:Position
do_king_safety	.\Stockfish-master\src\pawns.cpp	/^Score Entry::do_king_safety(const Position& pos, Square ksq) {$/;"	f	class:Pawns::Entry
do_move	.\Stockfish-master\src\position.cpp	/^void Position::do_move(Move m, StateInfo& newSt, bool givesCheck) {$/;"	f	class:Position
do_null_move	.\Stockfish-master\src\position.cpp	/^void Position::do_null_move(StateInfo& newSt) {$/;"	f	class:Position
drawEvenScreen	.\st_timeOptionMenu.c	/^static void drawEvenScreen( uint8_t period )$/;"	f	file:
drawGameScreen	.\Archive\eventManager.c	/^static void drawGameScreen( void )$/;"	f	file:
drawMenu	.\menu.c	/^void drawMenu(menu_t *menu)$/;"	f
drawOddsScreen	.\st_timeOptionMenu.c	/^static void drawOddsScreen( void )$/;"	f	file:
drawStatusScreen	.\st_timeOptionMenu.c	/^static void drawStatusScreen( void )$/;"	f	file:
drawUntimedScreen	.\st_timeOptionMenu.c	/^static void drawUntimedScreen( void )$/;"	f	file:
e1	.\constants.h	111;"	d
e2	.\constants.h	112;"	d
e3	.\constants.h	113;"	d
e4	.\constants.h	114;"	d
e5	.\constants.h	115;"	d
e6	.\constants.h	116;"	d
e7	.\constants.h	117;"	d
e8	.\constants.h	118;"	d
eQueIndex_e	.\event.h	/^typedef enum eQueIndex_e$/;"	g
easyMovePlayed	.\Stockfish-master\src\thread.h	/^  bool easyMovePlayed, failedLow;$/;"	m	struct:MainThread
eg	.\Stockfish-master\src\evaluate.cpp	/^  const struct Weight { int mg, eg; } Weights[] = {$/;"	m	struct:__anon21::Weight	file:
eg_value	.\Stockfish-master\src\types.h	/^inline Value eg_value(Score s) {$/;"	f
egtb	.\options.h	/^   bool_t  egtb;$/;"	m	struct:engineOptions_s
elapsed	.\Stockfish-master\src\timeman.h	/^  int elapsed() const { return int(Search::Limits.npmsec ? Threads.nodes_searched() : now() - startTime); }$/;"	f	class:TimeManagement
empty	.\Stockfish-master\src\position.h	/^inline bool Position::empty(Square s) const {$/;"	f	class:Position
enPassantCol	.\types.h	/^	U8 enPassantCol;  \/\/ 0-7 = a-h, and 8 = no enPassant$/;"	m	struct:board_s
enableText	.\Archive\eventManager.c	/^char* enableText = "On";$/;"	v
enabled	.\Stockfish-master\src\search.cpp	/^    bool enabled() const { return level < 20; }$/;"	f	struct:__anon29::Skill
enc_type	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte enc_type;$/;"	m	struct:DTZEntry_piece
enc_type	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte enc_type;$/;"	m	struct:TBEntry_piece
encode_pawn	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static uint64 encode_pawn(struct TBEntry_pawn *ptr, ubyte *norm, int *pos, int *factor)$/;"	f	file:
encode_piece	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static uint64 encode_piece(struct TBEntry_piece *ptr, ubyte *norm, int *pos, int *factor)$/;"	f	file:
end	.\Stockfish-master\src\movegen.h	/^  const ExtMove* end() const { return last; }$/;"	f	struct:MoveList
end	.\Stockfish-master\src\movepick.h	/^  ExtMove* end() { return endMoves; }$/;"	f	class:MovePicker
endBadCaptures	.\Stockfish-master\src\movepick.h	/^  ExtMove *endQuiets, *endBadCaptures = moves + MAX_MOVES - 1;$/;"	m	class:MovePicker
endMoves	.\Stockfish-master\src\movepick.h	/^  ExtMove moves[MAX_MOVES], *cur = moves, *endMoves = moves;$/;"	m	class:MovePicker
endQuiets	.\Stockfish-master\src\movepick.h	/^  ExtMove *endQuiets, *endBadCaptures = moves + MAX_MOVES - 1;$/;"	m	class:MovePicker
endReason_s	.\types.h	/^typedef enum endReason_s$/;"	g
endReason_t	.\types.h	/^}endReason_t;$/;"	t	typeref:enum:endReason_s
endgames	.\Stockfish-master\src\thread.h	/^  Endgames endgames;$/;"	m	class:Thread
engine	.\options.h	/^   engineOptions_t engine;$/;"	m	struct:options_s
engineEventHandler	.\Archive\eventManager.c	/^static void engineEventHandler( int param )$/;"	f	file:
engineOptionMenu	.\st_engineOptionMenu.c	/^menu_t *engineOptionMenu;$/;"	v
engineOptionMenuEntry	.\st_engineOptionMenu.c	/^void engineOptionMenuEntry( event_t ev )$/;"	f
engineOptionMenuExit	.\st_engineOptionMenu.c	/^void engineOptionMenuExit( event_t ev )$/;"	f
engineOptionsMenu_pickStrength	.\st_engineOptionMenu.c	/^static char *engineOptionsMenu_pickStrength( int dir )$/;"	f	file:
engineOptions_s	.\options.h	/^typedef struct engineOptions_s$/;"	s
engineOptions_t	.\options.h	/^}engineOptions_t;$/;"	t	typeref:struct:engineOptions_s
enginePollTask	.\sfInterface.c	/^static void *enginePollTask ( void *arg )$/;"	f	file:
enginePollThread	.\sfInterface.c	/^static pthread_t enginePollThread;$/;"	v	file:
engine_info	.\Stockfish-master\src\misc.cpp	/^const string engine_info(bool to_uci) {$/;"	f
enpassant	.\Stockfish-master\src\position.cpp	/^  Key enpassant[FILE_NB];$/;"	m	namespace:Zobrist	file:
enter	.\Archive\eventManager.c	/^   tranEnterFunc_t  enter[TOTAL_STATES];$/;"	m	struct:transFuncs_s	file:
enterComputerMove	.\Archive\eventManager.c	/^static void enterComputerMove( state_t from )$/;"	f	file:
enterGameOver	.\Archive\eventManager.c	/^static void enterGameOver( state_t from)$/;"	f	file:
enterHumanMove	.\Archive\eventManager.c	/^static void enterHumanMove( state_t from )$/;"	f	file:
enterHumanMoveForComp	.\Archive\eventManager.c	/^static void enterHumanMoveForComp( state_t from)$/;"	f	file:
enterInitialSetup	.\Archive\eventManager.c	/^static void enterInitialSetup( state_t from )$/;"	f	file:
enterSetup	.\Archive\eventManager.c	/^static void enterSetup( state_t from)$/;"	f	file:
enterTestJoystick	.\Archive\eventManager.c	/^static void enterTestJoystick( state_t from )$/;"	f	file:
enterTestSwitches	.\Archive\eventManager.c	/^static void enterTestSwitches( state_t from )$/;"	f	file:
enterTopMenus	.\Archive\eventManager.c	/^static void enterTopMenus( state_t from)$/;"	f	file:
entries	.\Archive\displayStrings.h	/^   displayLine_t  entries[];$/;"	m	struct:displayMenu_s
entry	.\Stockfish-master\src\syzygy\tbcore.h	/^  struct TBEntry *entry;$/;"	m	struct:DTZTableEntry	typeref:struct:DTZTableEntry::TBEntry
entry	.\Stockfish-master\src\tt.h	/^    TTEntry entry[ClusterSize];$/;"	m	struct:TranspositionTable::Cluster
entryFunc	.\hsm.h	/^   entryFunc_t          entryFunc;     \/\/ run on entry$/;"	m	struct:stateDef_s
entryFunc_t	.\hsm.h	/^typedef void   (*entryFunc_t)( event_t ev );$/;"	t
epSquare	.\Stockfish-master\src\position.h	/^  Square epSquare;$/;"	m	struct:StateInfo
ep_square	.\Stockfish-master\src\position.h	/^inline Square Position::ep_square() const {$/;"	f	class:Position
ev	.\event.h	/^   event_t ev;     \/\/ The event$/;"	m	struct:eventData_t
ev	.\hsm.h	/^   uint16_t       ev;       \/\/ The event trigger$/;"	m	struct:transDef_s
ev	.\hsm.h	/^   uint16_t     ev;$/;"	m	struct:event_e
ev	.\timer.h	/^   uint16_t             ev;$/;"	m	struct:timerEntry_s
evPopIndex	.\event.c	/^    int             evPopIndex;$/;"	m	struct:eventQueue_s	file:
evPushIndex	.\event.c	/^    int             evPushIndex;$/;"	m	struct:eventQueue_s	file:
evQueue	.\event.c	/^    event_t         evQueue[EVENT_QUEUE_SIZE];$/;"	m	struct:eventQueue_s	file:
evQueueIndex_t	.\event.h	/^}evQueueIndex_t;$/;"	t	typeref:enum:eQueIndex_e
eval	.\Stockfish-master\src\tt.h	/^  Value eval()  const { return (Value)eval16; }$/;"	f	struct:TTEntry
eval16	.\Stockfish-master\src\tt.h	/^  int16_t  eval16;$/;"	m	struct:TTEntry
eval_init	.\Stockfish-master\src\evaluate.cpp	/^  void eval_init(const Position& pos, EvalInfo& ei) {$/;"	f	namespace:__anon21
evaluate	.\Stockfish-master\src\evaluate.cpp	/^Value Eval::evaluate(const Position& pos) {$/;"	f	class:Eval
evaluate	.\Stockfish-master\src\material.h	/^  Value evaluate(const Position& pos) const { return (*evaluationFunction)(pos); }$/;"	f	struct:Material::Entry
evaluate	.\Stockfish-master\src\pawns.cpp	/^  Score evaluate(const Position& pos, Pawns::Entry* e) {$/;"	f	namespace:__anon27
evaluate_initiative	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_initiative(const Position& pos, int asymmetry, Value eg) {$/;"	f	namespace:__anon21
evaluate_king	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_king(const Position& pos, const EvalInfo& ei) {$/;"	f	namespace:__anon21
evaluate_passed_pawns	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_passed_pawns(const Position& pos, const EvalInfo& ei) {$/;"	f	namespace:__anon21
evaluate_pieces	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_pieces(const Position& pos, EvalInfo& ei, Score* mobility,$/;"	f	namespace:__anon21
evaluate_pieces	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_pieces< true, WHITE, KING>(const Position&, EvalInfo&, Score*, const Bitboard*) { return SCORE_ZERO; }$/;"	f	namespace:__anon21
evaluate_pieces	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_pieces<false, WHITE, KING>(const Position&, EvalInfo&, Score*, const Bitboard*) { return SCORE_ZERO; }$/;"	f	namespace:__anon21
evaluate_scale_factor	.\Stockfish-master\src\evaluate.cpp	/^  ScaleFactor evaluate_scale_factor(const Position& pos, const EvalInfo& ei, Score score) {$/;"	f	namespace:__anon21
evaluate_space	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_space(const Position& pos, const EvalInfo& ei) {$/;"	f	namespace:__anon21
evaluate_threats	.\Stockfish-master\src\evaluate.cpp	/^  Score evaluate_threats(const Position& pos, const EvalInfo& ei) {$/;"	f	namespace:__anon21
evaluationFunction	.\Stockfish-master\src\material.h	/^  EndgameBase<Value>* evaluationFunction;$/;"	m	struct:Material::Entry
eventData	.\Archive\eventManager.c	/^static eventData_t eventData;$/;"	v	file:
eventData_t	.\event.h	/^typedef struct eventData_t$/;"	s
eventData_t	.\event.h	/^}eventData_t;$/;"	t	typeref:struct:eventData_t
eventId_e	.\hsmDefs.h	/^typedef enum eventId_e$/;"	g
eventId_t	.\hsmDefs.h	/^}eventId_t;$/;"	t	typeref:enum:eventId_e
eventManagerInit	.\Archive\eventManager.c	/^void eventManagerInit( void )$/;"	f
eventManagerTask	.\Archive\eventManager.c	/^static void *eventManagerTask ( void *arg )$/;"	f	file:
eventManagerThread	.\Archive\eventManager.c	/^static pthread_t eventManagerThread;$/;"	v	file:
eventName	.\hsmDefs.c	/^const char *eventName[] =$/;"	v
eventQueue	.\event.c	/^eventQueue_t eventQueue[EVQ_TOTAL];$/;"	v
eventQueue_s	.\event.c	/^typedef struct eventQueue_s$/;"	s	file:
eventQueue_t	.\event.c	/^}eventQueue_t;$/;"	t	typeref:struct:eventQueue_s	file:
event_e	.\hsm.h	/^typedef struct event_e$/;"	s
event_t	.\hsm.h	/^}event_t;$/;"	t	typeref:struct:event_e
excludedMove	.\Stockfish-master\src\search.h	/^  Move excludedMove;$/;"	m	struct:Search::Stack
exclusion	.\Stockfish-master\src\position.cpp	/^  Key exclusion;$/;"	m	namespace:Zobrist	file:
exclusion_key	.\Stockfish-master\src\position.cpp	/^Key Position::exclusion_key() const { return st->key ^ Zobrist::exclusion; }$/;"	f	class:Position
exit	.\Archive\eventManager.c	/^   tranExitFunc_t   exit[TOTAL_STATES];$/;"	m	struct:transFuncs_s	file:
exit	.\Stockfish-master\src\thread.cpp	/^void ThreadPool::exit() {$/;"	f	class:ThreadPool
exit	.\Stockfish-master\src\thread.h	/^  bool exit, searching;$/;"	m	class:Thread
exitFunc	.\hsm.h	/^   exitFunc_t           exitFunc;      \/\/ run on exit$/;"	m	struct:stateDef_s
exitFunc_t	.\hsm.h	/^typedef void   (*exitFunc_t)( event_t ev );$/;"	t
exitInit	.\Archive\eventManager.c	/^static state_t exitInit( state_t to)$/;"	f	file:
exitTestSwitches	.\Archive\eventManager.c	/^static state_t exitTestSwitches( state_t from )$/;"	f	file:
exitTopMenus	.\Archive\eventManager.c	/^static state_t exitTopMenus( state_t to)$/;"	f	file:
exitingGameEntry	.\st_exitingGame.c	/^void exitingGameEntry( event_t ev )$/;"	f
exitingGameExit	.\st_exitingGame.c	/^void exitingGameExit( event_t ev )$/;"	f
expectedPosKey	.\Stockfish-master\src\search.cpp	/^    Key expectedPosKey;$/;"	m	struct:__anon29::EasyMoveManager	file:
extract_ponder_from_tt	.\Stockfish-master\src\search.cpp	/^bool RootMove::extract_ponder_from_tt(Position& pos)$/;"	f	class:RootMove
f1	.\constants.h	120;"	d
f2	.\constants.h	121;"	d
f3	.\constants.h	122;"	d
f4	.\constants.h	123;"	d
f5	.\constants.h	124;"	d
f6	.\constants.h	125;"	d
f7	.\constants.h	126;"	d
f8	.\constants.h	127;"	d
factor	.\Stockfish-master\src\material.h	/^  uint8_t factor[COLOR_NB];$/;"	m	struct:Material::Entry
factor	.\Stockfish-master\src\syzygy\tbcore.h	/^    int factor[2][TBPIECES];$/;"	m	struct:TBEntry_pawn::__anon31
factor	.\Stockfish-master\src\syzygy\tbcore.h	/^    int factor[TBPIECES];$/;"	m	struct:DTZEntry_pawn::__anon32
factor	.\Stockfish-master\src\syzygy\tbcore.h	/^  int factor[2][TBPIECES];$/;"	m	struct:TBEntry_piece
factor	.\Stockfish-master\src\syzygy\tbcore.h	/^  int factor[TBPIECES];$/;"	m	struct:DTZEntry_piece
failedLow	.\Stockfish-master\src\thread.h	/^  bool easyMovePlayed, failedLow;$/;"	m	struct:MainThread
fds	.\sfInterface.c	/^struct pollfd fds[1];$/;"	v	typeref:struct:pollfd
fen	.\Stockfish-master\src\position.cpp	/^const string Position::fen() const {$/;"	f	class:Position
fenErr_e	.\board.h	/^typedef enum fenErr_e$/;"	g
fenErr_t	.\board.h	/^}fenErr_t;$/;"	t	typeref:enum:fenErr_e
file	.\Stockfish-master\src\misc.cpp	/^  ofstream file;$/;"	m	class:__anon24::Logger	file:
file	.\Stockfish-master\src\syzygy\tbcore.h	/^  } file[4];$/;"	m	struct:DTZEntry_pawn	typeref:struct:DTZEntry_pawn::__anon32
file	.\Stockfish-master\src\syzygy\tbcore.h	/^  } file[4];$/;"	m	struct:TBEntry_pawn	typeref:struct:TBEntry_pawn::__anon31
fileMask	.\constants.c	/^const BB fileMask[8] =$/;"	v
file_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard file_bb(File f) {$/;"	f
file_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard file_bb(Square s) {$/;"	f
file_of	.\Stockfish-master\src\types.h	/^inline File file_of(Square s) {$/;"	f
file_to_file	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte file_to_file[] = {$/;"	v	file:
findFirstKeyMatch	.\book.c	/^static U32 findFirstKeyMatch( U64 val)$/;"	f	file:
findIndexForEvent	.\hsm.c	/^static uint16_t findIndexForEvent(const transDef_t *table, uint16_t tableSize, uint16_t ev )$/;"	f	file:
findKey	.\hsm.c	/^static uint16_t findKey(const transDef_t *table, uint16_t key, uint16_t min, uint16_t max)$/;"	f	file:
findLca	.\hsm.c	/^static uint16_t findLca(const HSM_Handle_t *hsm, uint16_t stateA, uint16_t stateB)$/;"	f	file:
findLineFromAToB	.\hsm.c	/^static uint16_t findLineFromAToB(const HSM_Handle_t *hsm, uint16_t stateA, uint16_t stateB )$/;"	f	file:
findMoves	.\moves.c	/^int findMoves(board_t *brd, move_t *moveList)$/;"	f
first_entry	.\Stockfish-master\src\tt.h	/^  TTEntry* first_entry(const Key key) const {$/;"	f	class:TranspositionTable
flags	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte flags; \/\/ accurate, mapped, side$/;"	m	struct:DTZEntry_piece
flags	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte flags[4];$/;"	m	struct:DTZEntry_pawn
flap	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte flap[] = {$/;"	v	file:
flashThread	.\led.c	/^static pthread_t flashThread;$/;"	v	file:
flip	.\Stockfish-master\src\position.cpp	/^void Position::flip() {$/;"	f	class:Position
flipdiag	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte flipdiag[] = {$/;"	v	file:
forward_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard forward_bb(Color c, Square s) {$/;"	f
free_dtz_entry	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void free_dtz_entry(struct TBEntry *entry)$/;"	f	file:
free_wdl_entry	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void free_wdl_entry(struct TBEntry *entry)$/;"	f	file:
from	.\hsm.h	/^   uint16_t       from;     \/\/ The originating state$/;"	m	struct:transDef_s
from	.\types.h	/^	unsigned short from             :6; \/\/ index of originating square.$/;"	m	struct:move_s
from_sq	.\Stockfish-master\src\types.h	/^inline Square from_sq(Move m) {$/;"	f
frontmost_sq	.\Stockfish-master\src\bitboard.h	/^inline Square frontmost_sq(Color c, Bitboard b) { return c == WHITE ? msb(b) : lsb(b); }$/;"	f
futility_margin	.\Stockfish-master\src\search.cpp	/^  Value futility_margin(Depth d) { return Value(200 * d); }$/;"	f	namespace:__anon29
g1	.\constants.h	129;"	d
g2	.\constants.h	130;"	d
g3	.\constants.h	131;"	d
g4	.\constants.h	132;"	d
g5	.\constants.h	133;"	d
g6	.\constants.h	134;"	d
g7	.\constants.h	135;"	d
g8	.\constants.h	136;"	d
game	.\Archive\eventManager.c	/^static game_t game;$/;"	v	file:
game	.\options.h	/^   gameOptions_t     game;$/;"	m	struct:options_s
game	.\st_inGame.c	/^game_t game;$/;"	v
gameDisposition_e	.\types.h	/^typedef enum gameDisposition_e$/;"	g
gameDisposition_t	.\types.h	/^}gameDisposition_t;$/;"	t	typeref:enum:gameDisposition_e
gameOptionMenu	.\st_gameOptionMenu.c	/^menu_t *gameOptionMenu = NULL;$/;"	v
gameOptionMenuEntry	.\st_gameOptionMenu.c	/^void gameOptionMenuEntry( event_t ev )$/;"	f
gameOptionMenuExit	.\st_gameOptionMenu.c	/^void gameOptionMenuExit( event_t ev )$/;"	f
gameOptionsMenu_pickBlackPlayer	.\st_gameOptionMenu.c	/^static char* gameOptionsMenu_pickBlackPlayer( int dir )   \/\/ 0 = return current, 1 = set\/return next, -1 = set\/return prev.$/;"	f	file:
gameOptionsMenu_pickBook	.\st_gameOptionMenu.c	/^static char* gameOptionsMenu_pickBook( int dir )$/;"	f	file:
gameOptionsMenu_pickWhitePlayer	.\st_gameOptionMenu.c	/^static char* gameOptionsMenu_pickWhitePlayer( int dir )   \/\/ 0 = return current, 1 = set\/return next, -1 = set\/return prev.$/;"	f	file:
gameOptions_s	.\options.h	/^typedef struct gameOptions_s$/;"	s
gameOptions_t	.\options.h	/^}gameOptions_t;$/;"	t	typeref:struct:gameOptions_s
gamePhase	.\Stockfish-master\src\material.h	/^  Phase gamePhase;$/;"	m	struct:Material::Entry
gamePly	.\Stockfish-master\src\position.h	/^  int gamePly;$/;"	m	class:Position
game_phase	.\Stockfish-master\src\material.h	/^  Phase game_phase() const { return gamePhase; }$/;"	f	struct:Material::Entry
game_phase	.\Stockfish-master\src\position.cpp	/^Phase Position::game_phase() const {$/;"	f	class:Position
game_ply	.\Stockfish-master\src\position.h	/^inline int Position::game_ply() const {$/;"	f	class:Position
game_s	.\types.h	/^typedef struct game_s$/;"	s
game_t	.\types.h	/^}game_t;$/;"	t	typeref:struct:game_s
genBound8	.\Stockfish-master\src\tt.h	/^  uint8_t  genBound8;$/;"	m	struct:TTEntry
generate	.\Stockfish-master\src\movegen.cpp	/^ExtMove* generate(const Position& pos, ExtMove* moveList) {$/;"	f
generate	.\Stockfish-master\src\movegen.cpp	/^ExtMove* generate<EVASIONS>(const Position& pos, ExtMove* moveList) {$/;"	f
generate	.\Stockfish-master\src\movegen.cpp	/^ExtMove* generate<LEGAL>(const Position& pos, ExtMove* moveList) {$/;"	f
generate	.\Stockfish-master\src\movegen.cpp	/^ExtMove* generate<QUIET_CHECKS>(const Position& pos, ExtMove* moveList) {$/;"	f
generate_all	.\Stockfish-master\src\movegen.cpp	/^  ExtMove* generate_all(const Position& pos, ExtMove* moveList, Bitboard target,$/;"	f	namespace:__anon25
generate_castling	.\Stockfish-master\src\movegen.cpp	/^  ExtMove* generate_castling(const Position& pos, ExtMove* moveList, Color us, const CheckInfo* ci) {$/;"	f	namespace:__anon25
generate_moves	.\Stockfish-master\src\movegen.cpp	/^  ExtMove* generate_moves(const Position& pos, ExtMove* moveList, Color us,$/;"	f	namespace:__anon25
generate_next_stage	.\Stockfish-master\src\movepick.cpp	/^void MovePicker::generate_next_stage() {$/;"	f	class:MovePicker
generate_pawn_moves	.\Stockfish-master\src\movegen.cpp	/^  ExtMove* generate_pawn_moves(const Position& pos, ExtMove* moveList,$/;"	f	namespace:__anon25
generation	.\Stockfish-master\src\tt.h	/^  uint8_t generation() const { return generation8; }$/;"	f	class:TranspositionTable
generation8	.\Stockfish-master\src\tt.h	/^  uint8_t generation8; \/\/ Size must be not bigger than TTEntry::genBound8$/;"	m	class:TranspositionTable
get	.\Stockfish-master\src\search.cpp	/^    Move get(Key key) const {$/;"	f	struct:__anon29::EasyMoveManager
getBestMove	.\book.c	/^bookErr_t getBestMove  ( board_t *b, move_t *mv )$/;"	f
getEvent	.\event.c	/^event_t *getEvent( evQueueIndex_t indx )$/;"	f
getFEN	.\board.c	/^char *getFEN(const board_t *b)$/;"	f
getLSBindex	.\bitboard.c	/^int getLSBindex(U64 bb) {$/;"	f
getMSBindex	.\bitboard.c	/^int getMSBindex(U64 bb) {$/;"	f
getQueueSem	.\event.c	/^sem_t *getQueueSem(evQueueIndex_t indx)$/;"	f
getRandMove	.\book.c	/^bookErr_t getRandMove  ( board_t *b, move_t *mv )$/;"	f
getSwitchStates	.\switch.c	/^static uint64_t getSwitchStates( void )$/;"	f	file:
gives_check	.\Stockfish-master\src\position.cpp	/^bool Position::gives_check(Move m, const CheckInfo& ci) const {$/;"	f	class:Position
go	.\Stockfish-master\src\uci.cpp	/^  void go(const Position& pos, istringstream& is) {$/;"	f	namespace:__anon34
gpioInit	.\gpio.c	/^void gpioInit( void )$/;"	f
graceTime	.\types.h	/^    uint16_t graceTime;$/;"	m	struct:game_s
graceTimeForComputerMove	.\options.h	/^   uint16_t      graceTimeForComputerMove;  \/\/ ignored if no computer player$/;"	m	struct:gameOptions_s
guard	.\hsm.h	/^   guardFunc_t    guard;    \/\/ The guard condition.  If non-NULL, must return true to make transition$/;"	m	struct:transDef_s
guardFunc_t	.\hsm.h	/^typedef bool_t (*guardFunc_t)( event_t ev );$/;"	t
h1	.\constants.h	138;"	d
h2	.\constants.h	139;"	d
h3	.\constants.h	140;"	d
h4	.\constants.h	141;"	d
h5	.\constants.h	142;"	d
h6	.\constants.h	143;"	d
h7	.\constants.h	144;"	d
h8	.\constants.h	145;"	d
halfMoves	.\types.h	/^	U16 halfMoves;  \/\/ # of half moves since last irreversible move$/;"	m	struct:board_s
has_pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte has_pawns;$/;"	m	struct:DTZEntry_pawn
has_pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte has_pawns;$/;"	m	struct:DTZEntry_piece
has_pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte has_pawns;$/;"	m	struct:TBEntry
has_pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte has_pawns;$/;"	m	struct:TBEntry_pawn
has_pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte has_pawns;$/;"	m	struct:TBEntry_piece
has_repeated	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static int has_repeated(StateInfo *st)$/;"	f	file:
hash	.\book.h	/^    U64    hash;$/;"	m	struct:__anon13
hash	.\types.h	/^	U64 hash;$/;"	m	struct:board_s
hashfull	.\Stockfish-master\src\tt.cpp	/^int TranspositionTable::hashfull() const$/;"	f	class:TranspositionTable
history	.\Stockfish-master\src\movepick.h	/^  const HistoryStats& history;$/;"	m	class:MovePicker
history	.\Stockfish-master\src\thread.h	/^  HistoryStats history;$/;"	m	class:Thread
hits	.\Stockfish-master\src\misc.cpp	/^static int64_t hits[2], means[2];$/;"	v	file:
i2cInit	.\i2c.c	/^void i2cInit( void )$/;"	f
i2cSendCommand	.\i2c.c	/^void i2cSendCommand( uint8_t slaveAddress, uint8_t *command, uint8_t len )$/;"	f
i2cSendReceive	.\i2c.c	/^void i2cSendReceive( uint8_t slaveAddress, uint8_t *command, uint8_t cmdLen, uint8_t *rsp, uint8_t rspLen)$/;"	f
i2c_byte_wait_us	.\bcm2835.c	/^static int i2c_byte_wait_us = 0;$/;"	v	file:
i2c_command	.\display.c	/^uint8_t i2c_command[2];$/;"	v
idle_loop	.\Stockfish-master\src\thread.cpp	/^void Thread::idle_loop() {$/;"	f	class:Thread
idx	.\Stockfish-master\src\thread.h	/^  size_t idx, PVIdx;$/;"	m	class:Thread
idx	.\Stockfish-master\src\uci.h	/^  size_t idx;$/;"	m	class:UCI::Option
idxbits	.\Stockfish-master\src\syzygy\tbcore.h	/^  int idxbits;$/;"	m	struct:PairsData
imbalance	.\Stockfish-master\src\material.cpp	/^  int imbalance(const int pieceCount[][PIECE_TYPE_NB]) {$/;"	f	namespace:__anon23
imbalance	.\Stockfish-master\src\material.h	/^  Score imbalance() const { return make_score(value, value); }$/;"	f	struct:Material::Entry
in	.\Stockfish-master\src\misc.cpp	/^  Tie in, out;$/;"	m	class:__anon24::Logger	file:
inGameEntry	.\st_inGame.c	/^void inGameEntry( event_t ev )$/;"	f
inGameExit	.\st_inGame.c	/^void inGameExit( event_t ev )$/;"	f
inGameMenu	.\st_inGameMenu.c	/^menu_t *inGameMenu = NULL;$/;"	v
inGameMenuEntry	.\st_inGameMenu.c	/^void inGameMenuEntry( event_t ev )$/;"	f
inGameMenuExit	.\st_inGameMenu.c	/^void inGameMenuExit( event_t ev )$/;"	f
inGamePickSubstate	.\st_inGame.c	/^uint16_t inGamePickSubstate( event_t ev)$/;"	f
inGame_SetPosition	.\st_inGame.c	/^void inGame_SetPosition( const char *FEN)$/;"	f
inGame_moveClockTick	.\st_inGame.c	/^void inGame_moveClockTick( event_t ev)$/;"	f
inGame_udpateClocks	.\st_inGame.c	/^void inGame_udpateClocks( void )$/;"	f
in_front_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard in_front_bb(Color c, Rank r) {$/;"	f
inc	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
increment	.\types.h	/^   uint8_t  increment; \/\/ in seconds$/;"	m	struct:periodTimingSettings_s
index	.\Stockfish-master\src\bitbase.cpp	/^  unsigned index(Color us, Square bksq, Square wksq, Square psq) {$/;"	f	namespace:__anon16
index	.\Stockfish-master\src\position.h	/^  int index[SQUARE_NB];$/;"	m	class:Position
index64	.\bitboard.c	/^static const int index64[64] = {$/;"	v	file:
indextable	.\Stockfish-master\src\syzygy\tbcore.h	/^  char *indextable;$/;"	m	struct:PairsData
infinite	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
init	.\Stockfish-master\src\bitbase.cpp	/^void Bitbases::init() {$/;"	f	class:Bitbases
init	.\Stockfish-master\src\bitboard.cpp	/^void Bitboards::init() {$/;"	f	class:Bitboards
init	.\Stockfish-master\src\evaluate.cpp	/^void Eval::init() {$/;"	f	class:Eval
init	.\Stockfish-master\src\pawns.cpp	/^void init()$/;"	f	namespace:Pawns
init	.\Stockfish-master\src\position.cpp	/^void Position::init() {$/;"	f	class:Position
init	.\Stockfish-master\src\psqt.cpp	/^void init() {$/;"	f	namespace:PSQT
init	.\Stockfish-master\src\search.cpp	/^void Search::init() {$/;"	f	class:Search
init	.\Stockfish-master\src\syzygy\tbcore.cpp	/^void Tablebases::init(const std::string& path)$/;"	f	class:Tablebases
init	.\Stockfish-master\src\thread.cpp	/^void ThreadPool::init() {$/;"	f	class:ThreadPool
init	.\Stockfish-master\src\timeman.cpp	/^void TimeManagement::init(Search::LimitsType& limits, Color us, int ply)$/;"	f	class:TimeManagement
init	.\Stockfish-master\src\ucioption.cpp	/^void init(OptionsMap& o) {$/;"	f	namespace:UCI
initEvent	.\event.c	/^void initEvent( void )$/;"	f
initPosSetupEntry	.\st_initPosSetup.c	/^void initPosSetupEntry( event_t ev)$/;"	f
initPosSetupExit	.\st_initPosSetup.c	/^void initPosSetupExit( event_t ev)$/;"	f
initPosSetup_boardChange	.\st_initPosSetup.c	/^void initPosSetup_boardChange( event_t ev)$/;"	f
init_indices	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void init_indices(void)$/;"	f	file:
init_magics	.\Stockfish-master\src\bitboard.cpp	/^  void init_magics(Bitboard table[], Bitboard* attacks[], Bitboard magics[],$/;"	f	namespace:__anon19
init_table_dtz	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int init_table_dtz(struct TBEntry *entry)$/;"	f	file:
init_table_wdl	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int init_table_wdl(struct TBEntry *entry, char *str)$/;"	f	file:
init_tb	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void init_tb(char *str)$/;"	f	file:
initialized	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static bool initialized = false;$/;"	v	file:
insertIndex	.\moves.c	/^static int insertIndex;$/;"	v	file:
insert_pv_in_tt	.\Stockfish-master\src\search.cpp	/^void RootMove::insert_pv_in_tt(Position& pos) {$/;"	f	class:RootMove
insertion_sort	.\Stockfish-master\src\movepick.cpp	/^  void insertion_sort(ExtMove* begin, ExtMove* end)$/;"	f	namespace:__anon26
invdiag	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte invdiag[] = {$/;"	v	file:
invflap	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte invflap[] = {$/;"	v	file:
invptwist	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte invptwist[] = {$/;"	v	file:
invtriangle	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte invtriangle[] = {$/;"	v	file:
isBookOpen	.\book.c	/^bool_t isBookOpen( void )$/;"	f
isStatePress	.\util.c	/^bool_t isStatePress(event_t ev )$/;"	f
is_KBPsKs	.\Stockfish-master\src\material.cpp	/^  bool is_KBPsKs(const Position& pos, Color us) {$/;"	f	namespace:__anon23
is_KQKRPs	.\Stockfish-master\src\material.cpp	/^  bool is_KQKRPs(const Position& pos, Color us) {$/;"	f	namespace:__anon23
is_KXK	.\Stockfish-master\src\material.cpp	/^  bool is_KXK(const Position& pos, Color us) {$/;"	f	namespace:__anon23
is_chess960	.\Stockfish-master\src\position.h	/^inline bool Position::is_chess960() const {$/;"	f	class:Position
is_draw	.\Stockfish-master\src\position.cpp	/^bool Position::is_draw() const {$/;"	f	class:Position
is_little_endian	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^bool is_little_endian() {$/;"	f
is_ok	.\Stockfish-master\src\types.h	/^inline bool is_ok(Move m) {$/;"	f
is_ok	.\Stockfish-master\src\types.h	/^inline bool is_ok(Square s) {$/;"	f
itemCount	.\menu.h	/^   int        itemCount;      \/\/ Total items in following list$/;"	m	struct:menu_s
itemValuePicker_t	.\menu.h	/^typedef char*  (*itemValuePicker_t)  ( int dir );   \/\/ 0 = return current, 1 = set\/return next, -1 = set\/return prev.$/;"	t
items	.\menu.h	/^   menuItem_t *items;         \/\/ A list of items.  First item with NULL for the text marks the end of the list$/;"	m	struct:menu_s
key	.\Stockfish-master\src\endgame.cpp	/^  Key key(const string& code, Color c) {$/;"	f	namespace:__anon20
key	.\Stockfish-master\src\material.h	/^  Key key;$/;"	m	struct:Material::Entry
key	.\Stockfish-master\src\pawns.h	/^  Key key;$/;"	m	struct:Pawns::Entry
key	.\Stockfish-master\src\position.h	/^  Key        key;$/;"	m	struct:StateInfo
key	.\Stockfish-master\src\position.h	/^inline Key Position::key() const {$/;"	f	class:Position
key	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key;$/;"	m	struct:DTZEntry_pawn
key	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key;$/;"	m	struct:DTZEntry_piece
key	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key;$/;"	m	struct:TBEntry
key	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key;$/;"	m	struct:TBEntry_pawn
key	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key;$/;"	m	struct:TBEntry_piece
key	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key;$/;"	m	struct:TBHashEntry
key	.\book.c	/^static U64 key;$/;"	v	file:
key1	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key1;$/;"	m	struct:DTZTableEntry
key16	.\Stockfish-master\src\tt.h	/^  uint16_t key16;$/;"	m	struct:TTEntry
key2	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 key2;$/;"	m	struct:DTZTableEntry
key_after	.\Stockfish-master\src\position.cpp	/^Key Position::key_after(Move m) const {$/;"	f	class:Position
killers	.\Stockfish-master\src\movepick.h	/^  ExtMove killers[3];$/;"	m	class:MovePicker
killers	.\Stockfish-master\src\search.h	/^  Move killers[2];$/;"	m	struct:Search::Stack
kingAdjacentZoneAttacksCount	.\Stockfish-master\src\evaluate.cpp	/^    int kingAdjacentZoneAttacksCount[COLOR_NB];$/;"	m	struct:__anon21::EvalInfo	file:
kingAttackersCount	.\Stockfish-master\src\evaluate.cpp	/^    int kingAttackersCount[COLOR_NB];$/;"	m	struct:__anon21::EvalInfo	file:
kingAttackersWeight	.\Stockfish-master\src\evaluate.cpp	/^    int kingAttackersWeight[COLOR_NB];$/;"	m	struct:__anon21::EvalInfo	file:
kingCoverage	.\constants.c	/^const BB kingCoverage[64] =$/;"	v
kingRing	.\Stockfish-master\src\evaluate.cpp	/^    Bitboard kingRing[COLOR_NB];$/;"	m	struct:__anon21::EvalInfo	file:
kingSafety	.\Stockfish-master\src\pawns.h	/^  Score kingSafety[COLOR_NB];$/;"	m	struct:Pawns::Entry
kingSquares	.\Stockfish-master\src\pawns.h	/^  Square kingSquares[COLOR_NB];$/;"	m	struct:Pawns::Entry
king_safety	.\Stockfish-master\src\pawns.h	/^  Score king_safety(const Position& pos, Square ksq)  {$/;"	f	struct:Pawns::Entry
knightCoverage	.\constants.c	/^const BB knightCoverage[64] =$/;"	v
ksq	.\Stockfish-master\src\bitbase.cpp	/^    Square ksq[COLOR_NB], psq;$/;"	m	struct:__anon16::KPKPosition	file:
ksq	.\Stockfish-master\src\position.h	/^  Square   ksq;$/;"	m	struct:CheckInfo
last	.\Stockfish-master\src\movegen.h	/^  ExtMove moveList[MAX_MOVES], *last;$/;"	m	struct:MoveList
lastBitBoard	.\switch.c	/^static uint64_t lastBitBoard = 0;$/;"	v	file:
lastMoveText	.\Archive\eventManager.c	/^char lastMoveText[8];$/;"	v
ledBlink	.\led.c	/^   unsigned char ledBlink;$/;"	m	struct:led_row_t	file:
ledRowData	.\led.c	/^led_row_t ledRowData[8];$/;"	v
ledState	.\led.c	/^   unsigned char ledState;$/;"	m	struct:led_row_t	file:
led_row_t	.\led.c	/^typedef struct led_row_t$/;"	s	file:
led_row_t	.\led.c	/^}led_row_t;$/;"	t	typeref:struct:led_row_t	file:
legal	.\Stockfish-master\src\position.cpp	/^bool Position::legal(Move m, Bitboard pinned) const {$/;"	f	class:Position
legalMoves	.\Archive\eventManager.c	/^static move_t legalMoves[200];$/;"	v	file:
legalMoves	.\st_playerMove.c	/^static move_t        legalMoves[200];$/;"	v	file:
level	.\Stockfish-master\src\search.cpp	/^    int level;$/;"	m	struct:__anon29::Skill	file:
lightSquares	.\constants.c	/^const BB lightSquares =$/;"	v
line	.\display.c	/^   int    line;    \/\/ Display line (0-3)$/;"	m	struct:cursorInfo_s	file:
listBookMoves	.\book.c	/^bookErr_t listBookMoves( board_t *b )$/;"	f
loadOptions	.\options.c	/^void loadOptions( options_t *options )$/;"	f
load_dtz_table	.\Stockfish-master\src\syzygy\tbcore.cpp	/^void load_dtz_table(char *str, uint64 key1, uint64 key2)$/;"	f
local	.\hsm.h	/^   bool_t         local;    \/\/ When to\/from are direct ancestors\/decendents, choose type of transition$/;"	m	struct:transDef_s
lock	.\Stockfish-master\src\thread_win32.h	/^  void lock() { EnterCriticalSection(&cs); }$/;"	f	struct:Mutex
log	.\Stockfish-master\src\misc.cpp	/^  int log(int c, const char* prefix) {$/;"	f	struct:__anon24::Tie
logBuf	.\Stockfish-master\src\misc.cpp	/^  streambuf *buf, *logBuf;$/;"	m	struct:__anon24::Tie	file:
loop	.\Stockfish-master\src\uci.cpp	/^void UCI::loop(int argc, char* argv[]) {$/;"	f	class:UCI
lower	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte lower[] = {$/;"	v	file:
lsb	.\Stockfish-master\src\bitboard.cpp	/^Square lsb(Bitboard b) {$/;"	f
lsb	.\Stockfish-master\src\bitboard.h	/^inline Square lsb(Bitboard b) { \/\/ Assembly code by Heinz van Saanen$/;"	f
lsb	.\Stockfish-master\src\bitboard.h	/^inline Square lsb(Bitboard b) {$/;"	f
lsb	.\bitboard.h	35;"	d
lsb32	.\Stockfish-master\src\bitboard.h	/^inline int lsb32(uint32_t v) {$/;"	f
magic_index	.\Stockfish-master\src\bitboard.h	/^inline unsigned magic_index(Square s, Bitboard occupied) {$/;"	f
main	.\Archive\testHsm.c	/^int main ( void )$/;"	f
main	.\Stockfish-master\src\main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	.\Stockfish-master\src\thread.h	/^  MainThread* main() { return static_cast<MainThread*>(at(0)); }$/;"	f	struct:ThreadPool
main	.\bcm2835.c	/^int main(int argc, char **argv)$/;"	f
main	.\main.c	/^int main ( void )$/;"	f
mainMenu	.\Archive\eventManager.c	/^menu_t *mainMenu = NULL;$/;"	v
mainMenu	.\st_mainMenu.c	/^static menu_t *mainMenu = NULL;$/;"	v	file:
mainMenuEntry	.\st_mainMenu.c	/^void mainMenuEntry( event_t ev )$/;"	f
mainMenuExit	.\st_mainMenu.c	/^void mainMenuExit( event_t ev )$/;"	f
make	.\Stockfish-master\src\types.h	/^inline Move make(Square from, Square to, PieceType pt = KNIGHT) {$/;"	f
make_move	.\Stockfish-master\src\types.h	/^inline Move make_move(Square from, Square to) {$/;"	f
make_piece	.\Stockfish-master\src\types.h	/^inline Piece make_piece(Color c, PieceType pt) {$/;"	f
make_promotions	.\Stockfish-master\src\movegen.cpp	/^  ExtMove* make_promotions(ExtMove* moveList, Square to, const CheckInfo* ci) {$/;"	f	namespace:__anon25
make_score	.\Stockfish-master\src\types.h	/^inline Score make_score(int mg, int eg) {$/;"	f
make_square	.\Stockfish-master\src\types.h	/^inline Square make_square(File f, Rank r) {$/;"	f
malloc_aligned	.\bcm2835.c	/^void *malloc_aligned(size_t size)$/;"	f
map	.\Stockfish-master\src\endgame.h	/^  Map<T>& map() {$/;"	f	class:Endgames
map	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte *map;$/;"	m	struct:DTZEntry_pawn
map	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte *map;$/;"	m	struct:DTZEntry_piece
map_file	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static char *map_file(const char *name, const char *suffix, uint64 *mapping)$/;"	f	file:
map_idx	.\Stockfish-master\src\syzygy\tbcore.h	/^  ushort map_idx[4];$/;"	m	struct:DTZEntry_piece
map_idx	.\Stockfish-master\src\syzygy\tbcore.h	/^  ushort map_idx[4][4];$/;"	m	struct:DTZEntry_pawn
mapmem	.\bcm2835.c	/^static void *mapmem(const char *msg, size_t size, int fd, off_t off)$/;"	f	file:
mapping	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 mapping;$/;"	m	struct:DTZEntry_pawn
mapping	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 mapping;$/;"	m	struct:DTZEntry_piece
mapping	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 mapping;$/;"	m	struct:TBEntry
mapping	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 mapping;$/;"	m	struct:TBEntry_pawn
mapping	.\Stockfish-master\src\syzygy\tbcore.h	/^  uint64 mapping;$/;"	m	struct:TBEntry_piece
maps	.\Stockfish-master\src\endgame.h	/^  std::pair<Map<Value>, Map<ScaleFactor>> maps;$/;"	m	class:Endgames
mate	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
mate_in	.\Stockfish-master\src\types.h	/^inline Value mate_in(int ply) {$/;"	f
mated_in	.\Stockfish-master\src\types.h	/^inline Value mated_in(int ply) {$/;"	f
materialCount	.\types.h	/^	U16 materialCount[2]; \/\/ running tally of material count for each color (color_t used as offset)$/;"	m	struct:board_s
materialKey	.\Stockfish-master\src\position.h	/^  Key    materialKey;$/;"	m	struct:StateInfo
materialTable	.\Stockfish-master\src\thread.h	/^  Material::Table materialTable;$/;"	m	class:Thread
material_key	.\Stockfish-master\src\position.h	/^inline Key Position::material_key() const {$/;"	f	class:Position
max	.\Stockfish-master\src\uci.h	/^  int min, max;$/;"	m	class:UCI::Option
maxPly	.\Stockfish-master\src\thread.h	/^  int maxPly, callsCnt;$/;"	m	class:Thread
maximum	.\Stockfish-master\src\timeman.h	/^  int maximum() const { return maximumTime; }$/;"	f	class:TimeManagement
maximumTime	.\Stockfish-master\src\timeman.h	/^  int maximumTime;$/;"	m	class:TimeManagement
me	.\Stockfish-master\src\evaluate.cpp	/^    Material::Entry* me;$/;"	m	struct:__anon21::EvalInfo	file:
means	.\Stockfish-master\src\misc.cpp	/^static int64_t hits[2], means[2];$/;"	v	file:
mem	.\Stockfish-master\src\tt.h	/^  void* mem;$/;"	m	class:TranspositionTable
menuAddItem	.\menu.c	/^bool_t menuAddItem(menu_t *menu,$/;"	f
menuDeleteItem	.\menu.c	/^bool_t menuDeleteItem(menu_t *menu, char *text)$/;"	f
menuEventHandler	.\Archive\eventManager.c	/^static void menuEventHandler(menuEvent_t ev)$/;"	f	file:
menuItem_s	.\menu.h	/^typedef struct menuItem_s$/;"	s
menuItem_t	.\menu.h	/^}menuItem_t;$/;"	t	typeref:struct:menuItem_s
menuPickSubstate	.\st_menus.c	/^uint16_t menuPickSubstate(event_t ev)$/;"	f
menuProcessButtonPos	.\menu.c	/^void menuProcessButtonPos(menu_t *menu, buttonPos_t pos)$/;"	f
menuProcessButtonPress	.\menu.c	/^void menuProcessButtonPress(menu_t *menu)$/;"	f
menuRegisterButtonEvents	.\st_menus.c	/^void menuRegisterButtonEvents(menu_t *menu)$/;"	f
menuReset	.\menu.c	/^void menuReset(menu_t *menu)$/;"	f
menu_s	.\menu.h	/^typedef struct menu_s$/;"	s
menu_t	.\menu.h	/^}menu_t;$/;"	t	typeref:struct:menu_s
menusExit	.\st_menus.c	/^void menusExit( event_t ev)$/;"	f
menus_buttonPos	.\st_menus.c	/^void menus_buttonPos( event_t ev )$/;"	f
menus_buttonState_pressed	.\st_menus.c	/^void menus_buttonState_pressed( event_t ev )$/;"	f
mg	.\Stockfish-master\src\evaluate.cpp	/^  const struct Weight { int mg, eg; } Weights[] = {$/;"	m	struct:__anon21::Weight	file:
mg_value	.\Stockfish-master\src\types.h	/^inline Value mg_value(Score s) {$/;"	f
mid	.\book.c	/^static U32 mid;$/;"	v	file:
min	.\Stockfish-master\src\uci.h	/^  int min, max;$/;"	m	class:UCI::Option
min_attacker	.\Stockfish-master\src\position.cpp	/^PieceType min_attacker(const Bitboard* bb, Square to, Bitboard stmAttackers,$/;"	f	namespace:__anon28
min_attacker	.\Stockfish-master\src\position.cpp	/^PieceType min_attacker<KING>(const Bitboard*, Square, Bitboard, Bitboard&, Bitboard&) {$/;"	f	namespace:__anon28
min_len	.\Stockfish-master\src\syzygy\tbcore.h	/^  int min_len;$/;"	m	struct:PairsData
modifying	.\types.h	/^    U8      modifying;      \/\/ Tracks recursion levels that modify this$/;"	m	struct:moveList_s
more_than_one	.\Stockfish-master\src\bitboard.h	/^inline bool more_than_one(Bitboard b) {$/;"	f
move	.\Archive\eventManager.c	/^   move_t move;          \/\/ A legal move$/;"	m	struct:moveEffect_s	file:
move	.\Stockfish-master\src\movegen.h	/^  Move move;$/;"	m	struct:ExtMove
move	.\Stockfish-master\src\tt.h	/^  Move  move()  const { return (Move )move16; }$/;"	f	struct:TTEntry
move	.\Stockfish-master\src\uci.cpp	/^string UCI::move(Move m, bool chess960) {$/;"	f	class:UCI
move	.\board.c	/^revMove_t move(board_t *b, const move_t m)$/;"	f
move	.\st_playerMove.c	/^   move_t move;          \/\/ A legal move$/;"	m	struct:moveEffect_s	file:
move	.\types.h	/^	move_t move;$/;"	m	struct:revMov_s
move	.\types.h	/^   move_t   move;       \/\/ The move that was selected from this position$/;"	m	struct:posHistory_s
move16	.\Stockfish-master\src\tt.h	/^  uint16_t move16;$/;"	m	struct:TTEntry
moveCount	.\Stockfish-master\src\search.h	/^  int moveCount;$/;"	m	struct:Search::Stack
moveEffect_s	.\Archive\eventManager.c	/^typedef struct moveEffect_s$/;"	s	file:
moveEffect_s	.\st_playerMove.c	/^typedef struct moveEffect_s$/;"	s	file:
moveEffects	.\Archive\eventManager.c	/^static moveEffects_t moveEffects[200];$/;"	v	file:
moveEffects	.\st_playerMove.c	/^static moveEffects_t moveEffects[200];$/;"	v	file:
moveEffects_t	.\Archive\eventManager.c	/^}moveEffects_t;$/;"	t	typeref:struct:moveEffect_s	file:
moveEffects_t	.\st_playerMove.c	/^}moveEffects_t;$/;"	t	typeref:struct:moveEffect_s	file:
moveForComputerEntry	.\st_moveForComputer.c	/^void moveForComputerEntry( event_t ev )$/;"	f
moveForComputerExit	.\st_moveForComputer.c	/^void moveForComputerExit( event_t ev )$/;"	f
moveForComputer_boardChange	.\st_moveForComputer.c	/^void moveForComputer_boardChange( event_t ev)$/;"	f
moveIndex	.\moves.c	/^static int moveIndex;$/;"	v	file:
moveList	.\Stockfish-master\src\movegen.h	/^  ExtMove moveList[MAX_MOVES], *last;$/;"	m	struct:MoveList
moveList_s	.\types.h	/^typedef struct moveList_s$/;"	s
moveList_t	.\types.h	/^}moveList_t;$/;"	t	typeref:struct:moveList_s
moveNumber	.\types.h	/^	U16 moveNumber; \/\/ The move number about to be made$/;"	m	struct:board_s
movePiece	.\board.c	/^static void movePiece (board_t *b, U8 fromSq, U8 toSq, piece_t p, color_t c)$/;"	f	file:
moveRecord	.\types.h	/^    char moveRecord[MAX_MOVES_IN_GAME * 5 + 16 + 1];$/;"	m	struct:game_s
moveToSAN	.\moves.c	/^char *moveToSAN(move_t mv, board_t *b)$/;"	f
moveVal_t	.\Archive\eventManager.c	/^typedef enum moveVal_t$/;"	g	file:
moveVal_t	.\Archive\eventManager.c	/^}moveVal_t;$/;"	t	typeref:enum:moveVal_t	file:
moveVal_t	.\st_playerMove.c	/^typedef enum moveVal_t$/;"	g	file:
moveVal_t	.\st_playerMove.c	/^}moveVal_t;$/;"	t	typeref:enum:moveVal_t	file:
move_importance	.\Stockfish-master\src\timeman.cpp	/^  double move_importance(int ply) {$/;"	f	namespace:__anon33
move_piece	.\Stockfish-master\src\position.h	/^inline void Position::move_piece(Color c, PieceType pt, Square from, Square to) {$/;"	f	class:Position
move_s	.\types.h	/^typedef struct move_s$/;"	s
move_t	.\types.h	/^}move_t;$/;"	t	typeref:struct:move_s
moved_piece	.\Stockfish-master\src\position.h	/^inline Piece Position::moved_piece(Move m) const {$/;"	f	class:Position
moves	.\Stockfish-master\src\movepick.h	/^  ExtMove moves[MAX_MOVES], *cur = moves, *endMoves = moves;$/;"	m	class:MovePicker
moves	.\types.h	/^    move_t *moves;          \/\/ pointer to move list array.  NULL if not yet generated OR checkmate\/stalemate position$/;"	m	struct:moveList_s
moves	.\types.h	/^   uint8_t  moves;     \/\/ moves in this period.  0 = sudden death.$/;"	m	struct:periodTimingSettings_s
movestogo	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
movetime	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
msb	.\Stockfish-master\src\bitboard.cpp	/^Square msb(Bitboard b) {$/;"	f
msb	.\Stockfish-master\src\bitboard.h	/^inline Square msb(Bitboard b) {$/;"	f
mustMove	.\st_moveForComputer.c	/^uint64_t mustMove;$/;"	v
mutex	.\Stockfish-master\src\thread.h	/^  Mutex mutex;$/;"	m	class:Thread
mutex	.\event.c	/^    pthread_mutex_t mutex;$/;"	m	struct:eventQueue_s	file:
mv	.\book.h	/^    move_t mv;$/;"	m	struct:__anon13
myStateDef	.\hsmDefs.c	/^stateDef_t myStateDef[] =$/;"	v
myTransDef	.\hsmDefs.c	/^transDef_t myTransDef[] =$/;"	v
nativeThread	.\Stockfish-master\src\thread.h	/^  std::thread nativeThread;$/;"	m	class:Thread
new_search	.\Stockfish-master\src\tt.h	/^  void new_search() { generation8 += 4; } \/\/ Lower 2 bits are used by Bound$/;"	f	class:TranspositionTable
next_move	.\Stockfish-master\src\movepick.cpp	/^Move MovePicker::next_move() {$/;"	f	class:MovePicker
nodes	.\Stockfish-master\src\position.h	/^  uint64_t nodes;$/;"	m	class:Position
nodes	.\Stockfish-master\src\search.h	/^  int64_t nodes;$/;"	m	struct:Search::LimitsType
nodes_searched	.\Stockfish-master\src\position.h	/^inline uint64_t Position::nodes_searched() const {$/;"	f	class:Position
nodes_searched	.\Stockfish-master\src\thread.cpp	/^int64_t ThreadPool::nodes_searched() {$/;"	f	class:ThreadPool
nonPawnMaterial	.\Stockfish-master\src\position.h	/^  Value  nonPawnMaterial[COLOR_NB];$/;"	m	struct:StateInfo
non_pawn_material	.\Stockfish-master\src\position.h	/^inline Value Position::non_pawn_material(Color c) const {$/;"	f	class:Position
norm	.\Stockfish-master\src\syzygy\tbcore.h	/^    ubyte norm[2][TBPIECES];$/;"	m	struct:TBEntry_pawn::__anon31
norm	.\Stockfish-master\src\syzygy\tbcore.h	/^    ubyte norm[TBPIECES];$/;"	m	struct:DTZEntry_pawn::__anon32
norm	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte norm[2][TBPIECES];$/;"	m	struct:TBEntry_piece
norm	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte norm[TBPIECES];$/;"	m	struct:DTZEntry_piece
normalize	.\Stockfish-master\src\endgame.cpp	/^  Square normalize(const Position& pos, Color strongSide, Square sq) {$/;"	f	namespace:__anon20
notAfile	.\bitboard.h	22;"	d
notHfile	.\bitboard.h	23;"	d
now	.\Stockfish-master\src\misc.h	/^inline TimePoint now() {$/;"	f
npmsec	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
num	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte num;$/;"	m	struct:DTZEntry_pawn
num	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte num;$/;"	m	struct:DTZEntry_piece
num	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte num;$/;"	m	struct:TBEntry
num	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte num;$/;"	m	struct:TBEntry_pawn
num	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte num;$/;"	m	struct:TBEntry_piece
numEntries	.\book.c	/^U32 numEntries = 0;$/;"	v
numLegalMoves	.\types.h	/^    short   numLegalMoves;  \/\/ Number of legal moves from this position.  Determines size of moves and links arrays.$/;"	m	struct:moveList_s
num_paths	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int num_paths = 0;$/;"	v	file:
occupiedSquares	.\Archive\eventManager.c	/^   BB occupiedSquares;   \/\/ Bitboard of the occupied squares at the conclusion of the move$/;"	m	struct:moveEffect_s	file:
occupiedSquares	.\Archive\eventManager.c	/^static BB occupiedSquares = 0;$/;"	v	file:
occupiedSquares	.\st_moveForComputer.c	/^uint64_t occupiedSquares;$/;"	v
occupiedSquares	.\st_playerMove.c	/^   BB occupiedSquares;   \/\/ Bitboard of the occupied squares at the conclusion of the move$/;"	m	struct:moveEffect_s	file:
occupiedSquares	.\st_playerMove.c	/^static uint64_t occupiedSquares, dirtySquares;$/;"	v	file:
offdiag	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const signed char offdiag[] = {$/;"	v	file:
offset	.\Stockfish-master\src\syzygy\tbcore.h	/^  ushort *offset;$/;"	m	struct:PairsData
on	.\display.c	/^   bool_t on;      \/\/ None of the other fields are valid if this is false$/;"	m	struct:cursorInfo_s	file:
onMoveMenu	.\Archive\eventManager.c	/^menu_t *onMoveMenu = NULL;$/;"	v
on_change	.\Stockfish-master\src\uci.h	/^  OnChange on_change;$/;"	m	class:UCI::Option
on_clear_hash	.\Stockfish-master\src\ucioption.cpp	/^void on_clear_hash(const Option&) { Search::clear(); }$/;"	f	namespace:UCI
on_hash_size	.\Stockfish-master\src\ucioption.cpp	/^void on_hash_size(const Option& o) { TT.resize(o); }$/;"	f	namespace:UCI
on_logger	.\Stockfish-master\src\ucioption.cpp	/^void on_logger(const Option& o) { start_logger(o); }$/;"	f	namespace:UCI
on_tb_path	.\Stockfish-master\src\ucioption.cpp	/^void on_tb_path(const Option& o) { Tablebases::init(o); }$/;"	f	namespace:UCI
on_threads	.\Stockfish-master\src\ucioption.cpp	/^void on_threads(const Option&) { Threads.read_uci_options(); }$/;"	f	namespace:UCI
openBook	.\book.c	/^bookErr_t openBook( char *file )$/;"	f
open_tb	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static FD open_tb(const char *str, const char *suffix)$/;"	f	file:
openingBookPicker	.\Archive\eventManager.c	/^char* openingBookPicker( int dir )   \/\/ 0 = return current, 1 = set\/return next, -1 = set\/return prev.$/;"	f
operator &	.\Stockfish-master\src\bitboard.h	/^inline Bitboard operator&(Bitboard b, Square s) {$/;"	f
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KBPKB>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KBPKN>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KBPPKB>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KBPsK>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KNPK>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KNPKB>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KPKP>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KPsK>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KQKRPs>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KRPKB>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KRPKR>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^ScaleFactor Endgame<KRPPKRP>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KBNK>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KPK>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KQKP>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KQKR>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KRKB>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KRKN>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KRKP>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^Value Endgame<KXK>::operator()(const Position& pos) const {$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\endgame.cpp	/^template<> Value Endgame<KNNK>::operator()(const Position&) const { return VALUE_DRAW; }$/;"	f	class:Endgame
operator ()	.\Stockfish-master\src\ucioption.cpp	/^bool CaseInsensitiveLess::operator() (const string& s1, const string& s2) const {$/;"	f	class:UCI::CaseInsensitiveLess
operator *	.\Stockfish-master\src\evaluate.cpp	/^  Score operator*(Score s, const Weight& w) {$/;"	f	namespace:__anon21
operator +	.\Stockfish-master\src\types.h	/^inline Value operator+(Value v, int i) { return Value(int(v) + i); }$/;"	f
operator +=	.\Stockfish-master\src\types.h	/^inline Value& operator+=(Value& v, int i) { return v = v + i; }$/;"	f
operator -	.\Stockfish-master\src\types.h	/^inline Value operator-(Value v, int i) { return Value(int(v) - i); }$/;"	f
operator -=	.\Stockfish-master\src\types.h	/^inline Value& operator-=(Value& v, int i) { return v = v - i; }$/;"	f
operator /	.\Stockfish-master\src\types.h	/^inline Score operator\/(Score s, int i) {$/;"	f
operator <	.\Stockfish-master\src\movegen.h	/^inline bool operator<(const ExtMove& f, const ExtMove& s) {$/;"	f
operator <	.\Stockfish-master\src\search.h	/^  bool operator<(const RootMove& m) const { return m.score < score; } \/\/ Descending sort$/;"	f	struct:Search::RootMove
operator <<	.\Stockfish-master\src\evaluate.cpp	/^    std::ostream& operator<<(std::ostream& os, Term t) {$/;"	f	namespace:__anon21::Trace
operator <<	.\Stockfish-master\src\misc.cpp	/^std::ostream& operator<<(std::ostream& os, SyncCout sc) {$/;"	f
operator <<	.\Stockfish-master\src\position.cpp	/^std::ostream& operator<<(std::ostream& os, const Position& pos) {$/;"	f
operator <<	.\Stockfish-master\src\ucioption.cpp	/^std::ostream& operator<<(std::ostream& os, const OptionsMap& om) {$/;"	f	namespace:UCI
operator <<	.\Stockfish-master\src\ucioption.cpp	/^void Option::operator<<(const Option& o) {$/;"	f	class:UCI::Option
operator =	.\Stockfish-master\src\movegen.h	/^  void operator=(Move m) { move = m; }$/;"	f	struct:ExtMove
operator =	.\Stockfish-master\src\position.cpp	/^Position& Position::operator=(const Position& pos) {$/;"	f	class:Position
operator =	.\Stockfish-master\src\ucioption.cpp	/^Option& Option::operator=(const string& v) {$/;"	f	class:UCI::Option
operator ==	.\Stockfish-master\src\search.h	/^  bool operator==(const Move& m) const { return pv[0] == m; }$/;"	f	struct:Search::RootMove
operator Move	.\Stockfish-master\src\movegen.h	/^  operator Move() const { return move; }$/;"	f	struct:ExtMove
operator Result	.\Stockfish-master\src\bitbase.cpp	/^    operator Result() const { return result; }$/;"	f	struct:__anon16::KPKPosition
operator []	.\Stockfish-master\src\misc.h	/^  Entry* operator[](Key key) { return &table[(uint32_t)key & (Size - 1)]; }$/;"	f	struct:HashTable
operator []	.\Stockfish-master\src\movepick.h	/^  T* operator[](Piece pc) { return table[pc]; }$/;"	f	struct:Stats
operator []	.\Stockfish-master\src\movepick.h	/^  const T* operator[](Piece pc) const { return table[pc]; }$/;"	f	struct:Stats
operator ^	.\Stockfish-master\src\bitboard.h	/^inline Bitboard operator^(Bitboard b, Square s) {$/;"	f
operator ^=	.\Stockfish-master\src\bitboard.h	/^inline Bitboard& operator^=(Bitboard& b, Square s) {$/;"	f
operator int	.\Stockfish-master\src\ucioption.cpp	/^Option::operator int() const {$/;"	f	class:UCI::Option
operator std::string	.\Stockfish-master\src\ucioption.cpp	/^Option::operator std::string() const {$/;"	f	class:UCI::Option
operator |	.\Stockfish-master\src\bitboard.h	/^inline Bitboard operator|(Bitboard b, Square s) {$/;"	f
operator |	.\Stockfish-master\src\types.h	/^inline CastlingRight operator|(Color c, CastlingSide s) {$/;"	f
operator |=	.\Stockfish-master\src\bitbase.cpp	/^  Result& operator|=(Result& r, Result v) { return r = Result(r | v); }$/;"	f	namespace:__anon16
operator |=	.\Stockfish-master\src\bitboard.h	/^inline Bitboard& operator|=(Bitboard& b, Square s) {$/;"	f
operator ~	.\Stockfish-master\src\types.h	/^inline Color operator~(Color c) {$/;"	f
operator ~	.\Stockfish-master\src\types.h	/^inline Square operator~(Square s) {$/;"	f
opposite_bishops	.\Stockfish-master\src\position.h	/^inline bool Position::opposite_bishops() const {$/;"	f	class:Position
opposite_colors	.\Stockfish-master\src\types.h	/^inline bool opposite_colors(Square s1, Square s2) {$/;"	f
optimumTime	.\Stockfish-master\src\timeman.h	/^  int optimumTime;$/;"	m	class:TimeManagement
optionMenu	.\st_optionMenu.c	/^menu_t *optionMenu = NULL;$/;"	v
optionMenuEntry	.\st_optionMenu.c	/^void optionMenuEntry( event_t ev )$/;"	f
optionMenuExit	.\st_optionMenu.c	/^void optionMenuExit( event_t ev )$/;"	f
options	.\Archive\eventManager.c	/^options_t options;$/;"	v
options	.\options.c	/^options_t options;$/;"	v
options_s	.\options.h	/^typedef struct options_s$/;"	s
options_t	.\options.h	/^}options_t;$/;"	t	typeref:struct:options_s
out	.\Stockfish-master\src\misc.cpp	/^  Tie in, out;$/;"	m	class:__anon24::Logger	file:
overflow	.\Stockfish-master\src\misc.cpp	/^  int overflow(int c) { return log(buf->sputc((char)c), "<< "); }$/;"	f	struct:__anon24::Tie
pa_flags	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static ubyte pa_flags[5] = { 8, 0, 0, 0, 4 };$/;"	v	file:
padding	.\Stockfish-master\src\tt.h	/^    char padding[2]; \/\/ Align to a divisor of the cache line size$/;"	m	struct:TranspositionTable::Cluster
param	.\event.h	/^   int     param;  \/\/ param depends upon event...$/;"	m	struct:eventData_t
parent	.\hsm.h	/^   uint16_t             parent;        \/\/ The parent state.  Use TOTAL_STATES for topmost state only$/;"	m	struct:stateDef_s
passedPawns	.\Stockfish-master\src\pawns.h	/^  Bitboard passedPawns[COLOR_NB];$/;"	m	struct:Pawns::Entry
passed_pawn_mask	.\Stockfish-master\src\bitboard.h	/^inline Bitboard passed_pawn_mask(Color c, Square s) {$/;"	f
passed_pawns	.\Stockfish-master\src\pawns.h	/^  Bitboard passed_pawns(Color c) const { return passedPawns[c]; }$/;"	f	struct:Pawns::Entry
path_string	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static char *path_string = NULL;$/;"	v	file:
paths	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static char **paths = NULL;$/;"	v	file:
pawnAttacks	.\Stockfish-master\src\pawns.h	/^  Bitboard pawnAttacks[COLOR_NB];$/;"	m	struct:Pawns::Entry
pawnAttacksSpan	.\Stockfish-master\src\pawns.h	/^  Bitboard pawnAttacksSpan[COLOR_NB];$/;"	m	struct:Pawns::Entry
pawnKey	.\Stockfish-master\src\position.h	/^  Key    pawnKey;$/;"	m	struct:StateInfo
pawnSpan	.\Stockfish-master\src\pawns.h	/^  int pawnSpan[COLOR_NB];$/;"	m	struct:Pawns::Entry
pawn_asymmetry	.\Stockfish-master\src\pawns.h	/^  int pawn_asymmetry() const { return asymmetry; }$/;"	f	struct:Pawns::Entry
pawn_attack_span	.\Stockfish-master\src\bitboard.h	/^inline Bitboard pawn_attack_span(Color c, Square s) {$/;"	f
pawn_attacks	.\Stockfish-master\src\pawns.h	/^  Bitboard pawn_attacks(Color c) const { return pawnAttacks[c]; }$/;"	f	struct:Pawns::Entry
pawn_attacks_span	.\Stockfish-master\src\pawns.h	/^  Bitboard pawn_attacks_span(Color c) const { return pawnAttacksSpan[c]; }$/;"	f	struct:Pawns::Entry
pawn_file	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int pawn_file(struct TBEntry_pawn *ptr, int *pos)$/;"	f	file:
pawn_key	.\Stockfish-master\src\position.h	/^inline Key Position::pawn_key() const {$/;"	f	class:Position
pawn_passed	.\Stockfish-master\src\position.h	/^inline bool Position::pawn_passed(Color c, Square s) const {$/;"	f	class:Position
pawn_push	.\Stockfish-master\src\types.h	/^inline Square pawn_push(Color c) {$/;"	f
pawn_span	.\Stockfish-master\src\pawns.h	/^  int pawn_span(Color c) const { return pawnSpan[c]; }$/;"	f	struct:Pawns::Entry
pawnidx	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int pawnidx[5][24];$/;"	v	file:
pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte pawns[2];$/;"	m	struct:DTZEntry_pawn
pawns	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte pawns[2];$/;"	m	struct:TBEntry_pawn
pawnsOnSquares	.\Stockfish-master\src\pawns.h	/^  int pawnsOnSquares[COLOR_NB][COLOR_NB]; \/\/ [color][light\/dark squares]$/;"	m	struct:Pawns::Entry
pawnsTable	.\Stockfish-master\src\thread.h	/^  Pawns::Table pawnsTable;$/;"	m	class:Thread
pawns_on_same_color_squares	.\Stockfish-master\src\pawns.h	/^  int pawns_on_same_color_squares(Color c, Square s) const {$/;"	f	struct:Pawns::Entry
pawns_score	.\Stockfish-master\src\pawns.h	/^  Score pawns_score() const { return score; }$/;"	f	struct:Pawns::Entry
pchr	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static char pchr[] = {'K', 'Q', 'R', 'B', 'N', 'P'};$/;"	v	file:
perft	.\Stockfish-master\src\search.cpp	/^uint64_t Search::perft(Position& pos, Depth depth) {$/;"	f	class:Search
period	.\st_timeOptionMenu.c	/^uint8_t period;$/;"	v
periodTimingSettings_s	.\types.h	/^typedef struct periodTimingSettings_s$/;"	s
periodTimingSettings_t	.\types.h	/^}periodTimingSettings_t;$/;"	t	typeref:struct:periodTimingSettings_s
pext	.\Stockfish-master\src\types.h	78;"	d
pext	.\Stockfish-master\src\types.h	80;"	d
pfactor	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int pfactor[5][4];$/;"	v	file:
pi	.\Stockfish-master\src\evaluate.cpp	/^    Pawns::Entry* pi;$/;"	m	struct:__anon21::EvalInfo	file:
pickRow	.\st_timeOptionMenu.c	/^uint8_t pickRow;$/;"	v
pick_best	.\Stockfish-master\src\movepick.cpp	/^  Move pick_best(ExtMove* begin, ExtMove* end)$/;"	f	namespace:__anon26
pick_best	.\Stockfish-master\src\search.cpp	/^  Move Skill::pick_best(size_t multiPV) {$/;"	f	class:__anon30::Skill
picker	.\menu.h	/^   itemValuePicker_t  picker;       \/\/ modifies\/returns value to display right justifed at end of line.$/;"	m	struct:menuItem_s
pickerFunc	.\hsm.h	/^   substatePickerFunc_t pickerFunc;    \/\/ Called to choose a substate when transition target is a container state$/;"	m	struct:stateDef_s
pieceCount	.\Stockfish-master\src\position.h	/^  int pieceCount[COLOR_NB][PIECE_TYPE_NB];$/;"	m	class:Position
pieceDropDebounce	.\options.h	/^   uint16_t pieceDropDebounce;$/;"	m	struct:boardOptions_s
pieceLiftDebounce	.\options.h	/^   uint16_t pieceLiftDebounce;$/;"	m	struct:boardOptions_s
pieceList	.\Stockfish-master\src\position.h	/^  Square pieceList[COLOR_NB][PIECE_TYPE_NB][16];$/;"	m	class:Position
pieceValue	.\constants.c	/^const int pieceValue[5] = {1, 3, 3, 5, 9};$/;"	v
piece_e	.\types.h	/^typedef enum piece_e$/;"	g
piece_on	.\Stockfish-master\src\position.h	/^inline Piece Position::piece_on(Square s) const {$/;"	f	class:Position
piece_t	.\types.h	/^}piece_t;$/;"	t	typeref:enum:piece_e
pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pieces() const {$/;"	f	class:Position
pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pieces(Color c) const {$/;"	f	class:Position
pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pieces(Color c, PieceType pt) const {$/;"	f	class:Position
pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pieces(Color c, PieceType pt1, PieceType pt2) const {$/;"	f	class:Position
pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pieces(PieceType pt) const {$/;"	f	class:Position
pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pieces(PieceType pt1, PieceType pt2) const {$/;"	f	class:Position
pieces	.\Stockfish-master\src\syzygy\tbcore.h	/^    ubyte pieces[2][TBPIECES];$/;"	m	struct:TBEntry_pawn::__anon31
pieces	.\Stockfish-master\src\syzygy\tbcore.h	/^    ubyte pieces[TBPIECES];$/;"	m	struct:DTZEntry_pawn::__anon32
pieces	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte pieces[2][TBPIECES];$/;"	m	struct:TBEntry_piece
pieces	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte pieces[TBPIECES];$/;"	m	struct:DTZEntry_piece
pieces	.\types.h	/^	BB pieces[6]; \/\/ bit boards for each piece type (piece_t is used as offset)$/;"	m	struct:board_s
pinned	.\Stockfish-master\src\position.h	/^  Bitboard pinned;$/;"	m	struct:CheckInfo
pinnedPieces	.\Stockfish-master\src\evaluate.cpp	/^    Bitboard pinnedPieces[COLOR_NB];$/;"	m	struct:__anon21::EvalInfo	file:
pinned_pieces	.\Stockfish-master\src\position.h	/^inline Bitboard Position::pinned_pieces(Color c) const {$/;"	f	class:Position
playedMoves	.\types.h	/^    int playedMoves;  \/\/ total number of half-moves already made in game$/;"	m	struct:game_s
playerMoveEntry	.\st_playerMove.c	/^void playerMoveEntry( event_t ev )$/;"	f
playerMoveExit	.\st_playerMove.c	/^void playerMoveExit( event_t ev )$/;"	f
playerMoves_boardChange	.\st_playerMove.c	/^void playerMoves_boardChange( event_t ev)$/;"	f
player_e	.\options.h	/^typedef enum player_e$/;"	g
player_t	.\options.h	/^}player_t;$/;"	t	typeref:enum:player_e
playersMenu	.\Archive\eventManager.c	/^menu_t *playersMenu = NULL;$/;"	v
playingGameEntry	.\st_playingGame.c	/^void playingGameEntry( event_t ev )$/;"	f
playingGameExit	.\st_playingGame.c	/^void playingGameExit( event_t ev )$/;"	f
playingGamePickSubstate	.\st_playingGame.c	/^uint16_t playingGamePickSubstate( event_t ev)$/;"	f
playingGame_processSelectedMove	.\st_playingGame.c	/^void playingGame_processSelectedMove( move_t mv)$/;"	f
pliesFromNull	.\Stockfish-master\src\position.h	/^  int    pliesFromNull;$/;"	m	struct:StateInfo
ply	.\Stockfish-master\src\search.h	/^  int ply;$/;"	m	struct:Search::Stack
pollingOn	.\switch.c	/^static bool_t pollingOn = FALSE;$/;"	v	file:
ponder	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
ponder	.\options.h	/^   bool_t  ponder;$/;"	m	struct:engineOptions_s
pop_lsb	.\Stockfish-master\src\bitboard.h	/^inline Square pop_lsb(Bitboard* b) {$/;"	f
popcount	.\Stockfish-master\src\bitcount.h	/^inline int popcount<CNT_32>(Bitboard b) {$/;"	f
popcount	.\Stockfish-master\src\bitcount.h	/^inline int popcount<CNT_32_MAX15>(Bitboard b) {$/;"	f
popcount	.\Stockfish-master\src\bitcount.h	/^inline int popcount<CNT_64>(Bitboard b) {$/;"	f
popcount	.\Stockfish-master\src\bitcount.h	/^inline int popcount<CNT_64_MAX15>(Bitboard b) {$/;"	f
popcount	.\Stockfish-master\src\bitcount.h	/^inline int popcount<CNT_HW_POPCNT>(Bitboard b) {$/;"	f
pos	.\Stockfish-master\src\movepick.h	/^  const Position& pos;$/;"	m	class:MovePicker
posHash	.\types.h	/^   U64      posHash;    \/\/ The hash value of this position$/;"	m	struct:posHistory_s
posHistory	.\types.h	/^    posHistory_t posHistory[MAX_MOVES_IN_GAME];$/;"	m	struct:game_s
posHistory_s	.\types.h	/^typedef struct posHistory_s$/;"	s
posHistory_t	.\types.h	/^}posHistory_t;$/;"	t	typeref:struct:posHistory_s
pos_is_ok	.\Stockfish-master\src\position.cpp	/^bool Position::pos_is_ok(int* failedStep) const {$/;"	f	class:Position
position	.\Stockfish-master\src\uci.cpp	/^  void position(Position& pos, istringstream& is) {$/;"	f	namespace:__anon34
positionHistory	.\board.c	/^U64 positionHistory[POSITION_HISTORY_SIZE];$/;"	v
positionIndex	.\board.c	/^int positionIndex = 0;$/;"	v
precomp	.\Stockfish-master\src\syzygy\tbcore.h	/^    struct PairsData *precomp;$/;"	m	struct:DTZEntry_pawn::__anon32	typeref:struct:DTZEntry_pawn::__anon32::PairsData
precomp	.\Stockfish-master\src\syzygy\tbcore.h	/^    struct PairsData *precomp[2];$/;"	m	struct:TBEntry_pawn::__anon31	typeref:struct:TBEntry_pawn::__anon31::PairsData
precomp	.\Stockfish-master\src\syzygy\tbcore.h	/^  struct PairsData *precomp;$/;"	m	struct:DTZEntry_piece	typeref:struct:DTZEntry_piece::PairsData
precomp	.\Stockfish-master\src\syzygy\tbcore.h	/^  struct PairsData *precomp[2];$/;"	m	struct:TBEntry_piece	typeref:struct:TBEntry_piece::PairsData
prefetch	.\Stockfish-master\src\misc.cpp	/^void prefetch(void* addr) {$/;"	f
prefetch	.\Stockfish-master\src\misc.cpp	/^void prefetch(void*) {}$/;"	f
pressEvent	.\menu.h	/^   int                pressEvent;   \/\/ If button pressed, return this value$/;"	m	struct:menuItem_s
pretty	.\Stockfish-master\src\bitboard.cpp	/^const std::string Bitboards::pretty(Bitboard b) {$/;"	f	class:Bitboards
prevDropDeb	.\st_diagSwitch.c	/^uint16_t prevLiftDeb, prevDropDeb;$/;"	v
prevLiftDeb	.\st_diagSwitch.c	/^uint16_t prevLiftDeb, prevDropDeb;$/;"	v
prevState	.\Archive\eventManager.c	/^static state_t prevState = ST_INIT;$/;"	v	file:
previous	.\Stockfish-master\src\position.h	/^  StateInfo* previous;$/;"	m	struct:StateInfo
previousScore	.\Stockfish-master\src\search.h	/^  Value previousScore = -VALUE_INFINITE;$/;"	m	struct:Search::RootMove
priorCastleBits	.\types.h	/^	unsigned short priorCastleBits  :4; \/\/ status of castle bits prior to move being made$/;"	m	struct:revMov_s
priorEnPassant	.\types.h	/^	unsigned short priorEnPassant   :4; \/\/ previous status of enPassant$/;"	m	struct:revMov_s
priorHalfMoveCnt	.\types.h	/^	unsigned short priorHalfMoveCnt;    \/\/ previous value of half-move counter$/;"	m	struct:revMov_s
priorZobristEnPassantCol	.\types.h	/^	unsigned short priorZobristEnPassantCol;$/;"	m	struct:revMov_s
probe	.\Stockfish-master\src\bitbase.cpp	/^bool Bitbases::probe(Square wksq, Square wpsq, Square bksq, Color us) {$/;"	f	class:Bitbases
probe	.\Stockfish-master\src\endgame.h	/^  EndgameBase<T>* probe(Key key) {$/;"	f	class:Endgames
probe	.\Stockfish-master\src\material.cpp	/^Entry* probe(const Position& pos) {$/;"	f	namespace:Material
probe	.\Stockfish-master\src\pawns.cpp	/^Entry* probe(const Position& pos) {$/;"	f	namespace:Pawns
probe	.\Stockfish-master\src\tt.cpp	/^TTEntry* TranspositionTable::probe(const Key key, bool& found) const {$/;"	f	class:TranspositionTable
probe_ab	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static int probe_ab(Position& pos, int alpha, int beta, int *success)$/;"	f	file:
probe_dtz	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^int Tablebases::probe_dtz(Position& pos, int *success)$/;"	f	class:Tablebases
probe_dtz_no_ep	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static int probe_dtz_no_ep(Position& pos, int *success)$/;"	f	file:
probe_dtz_table	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static int probe_dtz_table(Position& pos, int wdl, int *success)$/;"	f	file:
probe_wdl	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^int Tablebases::probe_wdl(Position& pos, int *success)$/;"	f	class:Tablebases
probe_wdl_table	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static int probe_wdl_table(Position& pos, int *success)$/;"	f	file:
promote	.\types.h	/^	unsigned short promote          :3; \/\/ piece pawn promotes to (ignored unless PAWN moves into promoting row)$/;"	m	struct:move_s
promotion_type	.\Stockfish-master\src\types.h	/^inline PieceType promotion_type(Move m) {$/;"	f
prt_str	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static void prt_str(Position& pos, char *str, int mirror)$/;"	f	file:
pseudo_legal	.\Stockfish-master\src\position.cpp	/^bool Position::pseudo_legal(const Move m) const {$/;"	f	class:Position
psq	.\Stockfish-master\src\bitbase.cpp	/^    Square ksq[COLOR_NB], psq;$/;"	m	struct:__anon16::KPKPosition	file:
psq	.\Stockfish-master\src\position.cpp	/^  Key psq[COLOR_NB][PIECE_TYPE_NB][SQUARE_NB];$/;"	m	namespace:Zobrist	file:
psq	.\Stockfish-master\src\position.h	/^  Score  psq;$/;"	m	struct:StateInfo
psq	.\Stockfish-master\src\psqt.cpp	/^Score psq[COLOR_NB][PIECE_TYPE_NB][SQUARE_NB];$/;"	m	namespace:PSQT	file:
psq_score	.\Stockfish-master\src\position.h	/^inline Score Position::psq_score() const {$/;"	f	class:Position
ptr	.\Stockfish-master\src\syzygy\tbcore.h	/^  struct TBEntry *ptr;$/;"	m	struct:TBHashEntry	typeref:struct:TBHashEntry::TBEntry
ptwist	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte ptwist[] = {$/;"	v	file:
putEvent	.\event.c	/^void putEvent(evQueueIndex_t indx, event_t *evData)$/;"	f
put_piece	.\Stockfish-master\src\position.h	/^inline void Position::put_piece(Color c, PieceType pt, Square s) {$/;"	f	class:Position
pv	.\Stockfish-master\src\search.cpp	/^    Move pv[3];$/;"	m	struct:__anon29::EasyMoveManager	file:
pv	.\Stockfish-master\src\search.cpp	/^string UCI::pv(const Position& pos, Depth depth, Value alpha, Value beta) {$/;"	f	class:UCI
pv	.\Stockfish-master\src\search.h	/^  Move* pv;$/;"	m	struct:Search::Stack
pv	.\Stockfish-master\src\search.h	/^  std::vector<Move> pv;$/;"	m	struct:Search::RootMove
pv_instability	.\Stockfish-master\src\timeman.h	/^  void pv_instability(double bestMoveChanges) { unstablePvFactor = 1 + bestMoveChanges; }$/;"	f	class:TimeManagement
qsearch	.\Stockfish-master\src\search.cpp	/^  Value qsearch(Position& pos, Stack* ss, Value alpha, Value beta, Depth depth) {$/;"	f	namespace:__anon30
rand	.\Stockfish-master\src\misc.h	/^  template<typename T> T rand() { return T(rand64()); }$/;"	f	class:PRNG
rand64	.\Stockfish-master\src\misc.h	/^  uint64_t rand64() {$/;"	f	class:PRNG
rank_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard rank_bb(Rank r) {$/;"	f
rank_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard rank_bb(Square s) {$/;"	f
rank_of	.\Stockfish-master\src\types.h	/^inline Rank rank_of(Square s) {$/;"	f
ray	.\constants.c	/^const BB ray[8][64] =$/;"	v
razor_margin	.\Stockfish-master\src\search.cpp	/^  const int razor_margin[4] = { 483, 570, 603, 554 };$/;"	m	namespace:__anon29	file:
readPositionRecord	.\book.c	/^static void readPositionRecord(U32 offset, candidate_t *c)$/;"	f	file:
read_uci_options	.\Stockfish-master\src\thread.cpp	/^void ThreadPool::read_uci_options() {$/;"	f	class:ThreadPool
ready	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte ready;$/;"	m	struct:DTZEntry_pawn
ready	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte ready;$/;"	m	struct:DTZEntry_piece
ready	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte ready;$/;"	m	struct:TBEntry
ready	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte ready;$/;"	m	struct:TBEntry_pawn
ready	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte ready;$/;"	m	struct:TBEntry_piece
recaptureSquare	.\Stockfish-master\src\movepick.h	/^  Square recaptureSquare;$/;"	m	class:MovePicker
reduction	.\Stockfish-master\src\search.cpp	/^  template <bool PvNode> Depth reduction(bool i, Depth d, int mn) {$/;"	f	namespace:__anon29
rel	.\timer.h	/^   uint32_t            rel;$/;"	m	struct:timerEntry_s
relative_rank	.\Stockfish-master\src\types.h	/^inline Rank relative_rank(Color c, Rank r) {$/;"	f
relative_rank	.\Stockfish-master\src\types.h	/^inline Rank relative_rank(Color c, Square s) {$/;"	f
relative_square	.\Stockfish-master\src\types.h	/^inline Square relative_square(Color c, Square s) {$/;"	f
remaining	.\Stockfish-master\src\timeman.cpp	/^  int remaining(int myTime, int movesToGo, int ply, int slowMover)$/;"	f	namespace:__anon33
removePiece	.\board.c	/^void removePiece(board_t *b, U8 sq, piece_t p, color_t c)$/;"	f
remove_piece	.\Stockfish-master\src\position.h	/^inline void Position::remove_piece(Color c, PieceType pt, Square s) {$/;"	f	class:Position
repeatCounter	.\switch.c	/^static uint8_t repeatCounter = 0;$/;"	v	file:
repeatDelay	.\switch.c	/^static uint8_t repeatDelay = 0;$/;"	v	file:
repeatInterval	.\switch.c	/^static uint8_t repeatInterval = 0;$/;"	v	file:
resetCalls	.\Stockfish-master\src\thread.h	/^  std::atomic_bool resetCalls;$/;"	m	class:Thread
resize	.\Stockfish-master\src\tt.cpp	/^void TranspositionTable::resize(size_t mbSize) {$/;"	f	class:TranspositionTable
result	.\Stockfish-master\src\bitbase.cpp	/^    Result result;$/;"	m	struct:__anon16::KPKPosition	file:
revMov_s	.\types.h	/^typedef struct revMov_s$/;"	s
revMove	.\types.h	/^   revMove_t   revMove;    \/\/ The undo information to go back to the previous position$/;"	m	struct:posHistory_s
revMove_t	.\types.h	/^}revMove_t;$/;"	t	typeref:struct:revMov_s
reverseBitOrder64	.\util.c	/^uint64_t reverseBitOrder64( uint64_t input)$/;"	f
reverseBytes	.\book.c	/^static U64 reverseBytes( U64 input)$/;"	f	file:
reverseIndex64	.\bitboard.c	/^const int reverseIndex64[64] = {$/;"	v
right	.\Stockfish-master\src\types.h	/^  right = C == WHITE ? S == QUEEN_SIDE ? WHITE_OOO : WHITE_OO$/;"	m	struct:MakeCastling
rightEvent	.\menu.h	/^   int                rightEvent;   \/\/ If right, return this value.  IGNORED if picker is not NULL$/;"	m	struct:menuItem_s
rollDown	.\display.c	/^void rollDown( char *data, bool_t centered, bool_t keepTopLine)$/;"	f
rollUp	.\display.c	/^void rollUp( char *data, bool_t centered, bool_t keepTopLine)$/;"	f
rootDepth	.\Stockfish-master\src\thread.h	/^  Depth rootDepth;$/;"	m	class:Thread
rootMoves	.\Stockfish-master\src\thread.h	/^  Search::RootMoveVector rootMoves;$/;"	m	class:Thread
rootPos	.\Stockfish-master\src\thread.h	/^  Position rootPos;$/;"	m	class:Thread
root_probe	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^bool Tablebases::root_probe(Position& pos, Search::RootMoveVector& rootMoves, Value& score)$/;"	f	class:Tablebases
root_probe_wdl	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^bool Tablebases::root_probe_wdl(Position& pos, Search::RootMoveVector& rootMoves, Value& score)$/;"	f	class:Tablebases
rowDirty	.\led.c	/^   unsigned char rowDirty;$/;"	m	struct:led_row_t	file:
rowMask	.\constants.c	/^const BB rowMask[8] =$/;"	v
rowOffset	.\display.c	/^const uint8_t rowOffset[4] = { 0x00, 0x40, 0x14, 0x54 };$/;"	v
rule50	.\Stockfish-master\src\position.h	/^  int    rule50;$/;"	m	struct:StateInfo
rule50_count	.\Stockfish-master\src\position.h	/^inline int Position::rule50_count() const {$/;"	f	class:Position
s	.\Stockfish-master\src\misc.h	/^  uint64_t s;$/;"	m	class:PRNG
sampleState	.\switch.c	/^static uint64_t sampleState = 0;$/;"	v	file:
save	.\Stockfish-master\src\tt.h	/^  void save(Key k, Value v, Bound b, Depth d, Move m, Value ev, uint8_t g) {$/;"	f	struct:TTEntry
saveOptions	.\options.c	/^void saveOptions( const options_t *options )$/;"	f
scale_factor	.\Stockfish-master\src\material.h	/^  ScaleFactor scale_factor(const Position& pos, Color c) const {$/;"	f	struct:Material::Entry
scalingFunction	.\Stockfish-master\src\material.h	/^  EndgameBase<ScaleFactor>* scalingFunction[COLOR_NB]; \/\/ Could be one for each$/;"	m	struct:Material::Entry
score	.\Stockfish-master\src\movepick.cpp	/^void MovePicker::score<CAPTURES>() {$/;"	f	class:MovePicker
score	.\Stockfish-master\src\movepick.cpp	/^void MovePicker::score<EVASIONS>() {$/;"	f	class:MovePicker
score	.\Stockfish-master\src\movepick.cpp	/^void MovePicker::score<QUIETS>() {$/;"	f	class:MovePicker
score	.\Stockfish-master\src\pawns.h	/^  Score score;$/;"	m	struct:Pawns::Entry
score	.\Stockfish-master\src\search.h	/^  Value score = -VALUE_INFINITE;$/;"	m	struct:Search::RootMove
scores	.\Stockfish-master\src\evaluate.cpp	/^    double scores[TERM_NB][COLOR_NB][PHASE_NB];$/;"	m	namespace:__anon21::Trace	file:
search	.\Stockfish-master\src\search.cpp	/^  Value search(Position& pos, Stack* ss, Value alpha, Value beta, Depth depth, bool cutNode) {$/;"	f	namespace:__anon30
search	.\Stockfish-master\src\search.cpp	/^void MainThread::search() {$/;"	f	class:MainThread
search	.\Stockfish-master\src\search.cpp	/^void Thread::search() {$/;"	f	class:Thread
searching	.\Stockfish-master\src\thread.h	/^  bool exit, searching;$/;"	m	class:Thread
searchmoves	.\Stockfish-master\src\search.h	/^  std::vector<Move> searchmoves;$/;"	m	struct:Search::LimitsType
see	.\Stockfish-master\src\position.cpp	/^Value Position::see(Move m) const {$/;"	f	class:Position
see_sign	.\Stockfish-master\src\position.cpp	/^Value Position::see_sign(Move m) const {$/;"	f	class:Position
selectedColor	.\Archive\eventManager.c	/^static color_t selectedColor;$/;"	v	file:
selectedItem	.\menu.h	/^   int        selectedItem;   \/\/ Currently selected item$/;"	m	struct:menu_s
selectedPiece	.\Archive\eventManager.c	/^static piece_t selectedPiece;$/;"	v	file:
sem	.\event.c	/^    sem_t           sem;$/;"	m	struct:eventQueue_s	file:
semiopenFiles	.\Stockfish-master\src\pawns.h	/^  int semiopenFiles[COLOR_NB];$/;"	m	struct:Pawns::Entry
semiopen_file	.\Stockfish-master\src\pawns.h	/^  int semiopen_file(Color c, File f) const {$/;"	f	struct:Pawns::Entry
semiopen_side	.\Stockfish-master\src\pawns.h	/^  int semiopen_side(Color c, File f, bool leftSide) const {$/;"	f	struct:Pawns::Entry
sendString	.\display.c	/^static void sendString( char *data, uint8_t line, uint8_t col, uint8_t len )$/;"	f	file:
set	.\Stockfish-master\src\position.cpp	/^void Position::set(const string& fenStr, bool isChess960, Thread* th) {$/;"	f	class:Position
setBoard	.\board.c	/^fenErr_t setBoard(board_t *brd, const char *FEN)$/;"	f
setButtonRepeat	.\switch.c	/^void setButtonRepeat(uint8_t delay, uint8_t interval)$/;"	f
setDefaultOptions	.\options.c	/^static void setDefaultOptions( options_t *options )$/;"	f	file:
set_castling_right	.\Stockfish-master\src\position.cpp	/^void Position::set_castling_right(Color c, Square rfrom) {$/;"	f	class:Position
set_nodes_searched	.\Stockfish-master\src\position.h	/^inline void Position::set_nodes_searched(uint64_t n) {$/;"	f	class:Position
set_norm_pawn	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void set_norm_pawn(struct TBEntry_pawn *ptr, ubyte *norm, ubyte *pieces)$/;"	f	file:
set_norm_piece	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void set_norm_piece(struct TBEntry_piece *ptr, ubyte *norm, ubyte *pieces)$/;"	f	file:
set_state	.\Stockfish-master\src\position.cpp	/^void Position::set_state(StateInfo* si) const {$/;"	f	class:Position
setoption	.\Stockfish-master\src\uci.cpp	/^  void setoption(istringstream& is) {$/;"	f	namespace:__anon34
settingsMenu	.\Archive\eventManager.c	/^menu_t *settingsMenu = NULL;$/;"	v
setup_pairs	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static struct PairsData *setup_pairs(unsigned char *data, uint64 tb_size, uint64 *size, unsigned char **next, ubyte *flags, int wdl)$/;"	f	file:
setup_pieces_pawn	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void setup_pieces_pawn(struct TBEntry_pawn *ptr, unsigned char *data, uint64 *tb_size, int f)$/;"	f	file:
setup_pieces_pawn_dtz	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void setup_pieces_pawn_dtz(struct DTZEntry_pawn *ptr, unsigned char *data, uint64 *tb_size, int f)$/;"	f	file:
setup_pieces_piece	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void setup_pieces_piece(struct TBEntry_piece *ptr, unsigned char *data, uint64 *tb_size)$/;"	f	file:
setup_pieces_piece_dtz	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void setup_pieces_piece_dtz(struct DTZEntry_piece *ptr, unsigned char *data, uint64 *tb_size)$/;"	f	file:
sfPipe	.\sfInterface.c	/^FILE *sfPipe = NULL;$/;"	v
shelter_storm	.\Stockfish-master\src\pawns.cpp	/^Value Entry::shelter_storm(const Position& pos, Square ksq) {$/;"	f	class:Pawns::Entry
shiftE	.\bitboard.h	27;"	d
shiftN	.\bitboard.h	26;"	d
shiftNE	.\bitboard.h	30;"	d
shiftNW	.\bitboard.h	31;"	d
shiftS	.\bitboard.h	25;"	d
shiftSE	.\bitboard.h	32;"	d
shiftSW	.\bitboard.h	33;"	d
shiftW	.\bitboard.h	28;"	d
shift_bb	.\Stockfish-master\src\bitboard.h	/^inline Bitboard shift_bb(Bitboard b) {$/;"	f
showDiffs	.\st_initPosSetup.c	/^static void showDiffs( void )$/;"	f	file:
side	.\Stockfish-master\src\position.cpp	/^  Key side;$/;"	m	namespace:Zobrist	file:
sideToMove	.\Stockfish-master\src\position.h	/^  Color sideToMove;$/;"	m	class:Position
side_to_move	.\Stockfish-master\src\position.h	/^inline Color Position::side_to_move() const {$/;"	f	class:Position
size	.\Stockfish-master\src\movegen.h	/^  size_t size() const { return last - moveList; }$/;"	f	struct:MoveList
sizetable	.\Stockfish-master\src\syzygy\tbcore.h	/^  ushort *sizetable;$/;"	m	struct:PairsData
skipEarlyPruning	.\Stockfish-master\src\search.h	/^  bool skipEarlyPruning;$/;"	m	struct:Search::Stack
sleepCondition	.\Stockfish-master\src\thread.h	/^  ConditionVariable sleepCondition;$/;"	m	class:Thread
sliding_attack	.\Stockfish-master\src\bitboard.cpp	/^  Bitboard sliding_attack(Square deltas[], Square sq, Bitboard occupied) {$/;"	f	namespace:__anon19
sparse_rand	.\Stockfish-master\src\misc.h	/^  template<typename T> T sparse_rand()$/;"	f	class:PRNG
specCharDefn	.\specChars.h	/^typedef const uint8_t (*specCharDefn)[8];$/;"	t
specialized_eval_exists	.\Stockfish-master\src\material.h	/^  bool specialized_eval_exists() const { return evaluationFunction != nullptr; }$/;"	f	struct:Material::Entry
splashScreenEntry	.\st_splashScreen.c	/^void splashScreenEntry( event_t ev)$/;"	f
splashScreenExit	.\st_splashScreen.c	/^void splashScreenExit( event_t ev)$/;"	f
square	.\Stockfish-master\src\position.h	/^template<PieceType Pt> inline Square Position::square(Color c) const {$/;"	f	class:Position
square	.\Stockfish-master\src\uci.cpp	/^std::string UCI::square(Square s) {$/;"	f	class:UCI
squareMask	.\constants.c	/^const BB squareMask[64] =$/;"	v
squares	.\Stockfish-master\src\position.h	/^template<PieceType Pt> inline const Square* Position::squares(Color c) const {$/;"	f	class:Position
ss	.\Stockfish-master\src\movepick.h	/^  Search::Stack* ss;$/;"	m	class:MovePicker
st	.\Stockfish-master\src\position.h	/^  StateInfo* st;$/;"	m	class:Position
stableCnt	.\Stockfish-master\src\search.cpp	/^    int stableCnt;$/;"	m	struct:__anon29::EasyMoveManager	file:
stage	.\Stockfish-master\src\movepick.h	/^  int stage;$/;"	m	class:MovePicker
start	.\Stockfish-master\src\misc.cpp	/^  static void start(bool b) {$/;"	f	class:__anon24::Logger
startGame	.\Archive\eventManager.c	/^static void startGame( void )$/;"	f	file:
startPos	.\types.h	/^    char *startPos;$/;"	m	struct:game_s
startState	.\Stockfish-master\src\position.h	/^  StateInfo startState;$/;"	m	class:Position
startString	.\board.c	/^const char *startString = "rnbqkbnr\/pppppppp\/8\/8\/8\/8\/PPPPPPPP\/RNBQKBNR w KQkq - 0 1";$/;"	v
startTime	.\Stockfish-master\src\search.h	/^  TimePoint startTime;$/;"	m	struct:Search::LimitsType
startTime	.\Stockfish-master\src\timeman.h	/^  TimePoint startTime;$/;"	m	class:TimeManagement
start_logger	.\Stockfish-master\src\misc.cpp	/^void start_logger(bool b) { Logger::start(b); }$/;"	f
start_searching	.\Stockfish-master\src\thread.cpp	/^void Thread::start_searching(bool resume) {$/;"	f	class:Thread
start_thinking	.\Stockfish-master\src\thread.cpp	/^void ThreadPool::start_thinking(const Position& pos, const LimitsType& limits,$/;"	f	class:ThreadPool
state	.\Archive\eventManager.c	/^static state_t state = ST_INIT;$/;"	v	file:
stateCount	.\hsm.h	/^   uint16_t            stateCount;$/;"	m	struct:HSM_Handle_s
stateDef_s	.\hsm.h	/^typedef struct stateDef_s$/;"	s
stateDef_t	.\hsm.h	/^}stateDef_t;$/;"	t	typeref:struct:stateDef_s
stateId_e	.\hsmDefs.h	/^typedef enum stateId_e$/;"	g
stateId_t	.\hsmDefs.h	/^}stateId_t;$/;"	t	typeref:enum:stateId_e
stateNames	.\Archive\eventManager.c	/^char *stateNames[TOTAL_STATES] =$/;"	v
state_e	.\Archive\eventManager.c	/^typedef enum state_e$/;"	g	file:
state_t	.\Archive\eventManager.c	/^}state_t;$/;"	t	typeref:enum:state_e	file:
states	.\hsm.h	/^   const stateDef_t   *states;$/;"	m	struct:HSM_Handle_s
staticEval	.\Stockfish-master\src\search.h	/^  Value staticEval;$/;"	m	struct:Search::Stack
stop	.\Stockfish-master\src\search.h	/^  std::atomic_bool stop, stopOnPonderhit;$/;"	m	struct:Search::SignalsType
stopOnPonderhit	.\Stockfish-master\src\search.h	/^  std::atomic_bool stop, stopOnPonderhit;$/;"	m	struct:Search::SignalsType
strength	.\options.h	/^   uint8_t strength;$/;"	m	struct:engineOptions_s
strongSide	.\Stockfish-master\src\endgame.h	/^  Color strongSide, weakSide;$/;"	m	struct:Endgame
strong_side	.\Stockfish-master\src\endgame.h	/^  Color strong_side() const { return strongSide; }$/;"	f	struct:Endgame
subState	.\Archive\eventManager.c	/^static uint8_t subState = 0;$/;"	v	file:
subState	.\st_timeOptionMenu.c	/^timeSettingSubstate_t subState;$/;"	v
subfactor	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int subfactor(int k, int n)$/;"	f	file:
substatePickerFunc_t	.\hsm.h	/^typedef uint16_t (*substatePickerFunc_t)(event_t ev);$/;"	t
switchChanged	.\switch.c	/^static void switchChanged(int sq, bool_t state)$/;"	f	file:
switchInit	.\switch.c	/^void switchInit( void )$/;"	f
switchPoll	.\switch.c	/^void switchPoll ( void )$/;"	f
switchStateTable	.\switch.c	/^static const buttonPos_t switchStateTable[16] =$/;"	v	file:
symlen	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte *symlen;$/;"	m	struct:PairsData
symmetric	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte symmetric;$/;"	m	struct:DTZEntry_pawn
symmetric	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte symmetric;$/;"	m	struct:DTZEntry_piece
symmetric	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte symmetric;$/;"	m	struct:TBEntry
symmetric	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte symmetric;$/;"	m	struct:TBEntry_pawn
symmetric	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte symmetric;$/;"	m	struct:TBEntry_piece
sympat	.\Stockfish-master\src\syzygy\tbcore.h	/^  ubyte *sympat;$/;"	m	struct:PairsData
sync	.\Stockfish-master\src\misc.cpp	/^  int sync() { return logBuf->pubsync(), buf->pubsync(); }$/;"	f	struct:__anon24::Tie
sync_cout	.\Stockfish-master\src\misc.h	60;"	d
sync_endl	.\Stockfish-master\src\misc.h	61;"	d
table	.\Stockfish-master\src\misc.h	/^  std::vector<Entry> table = std::vector<Entry>(Size);$/;"	m	struct:HashTable
table	.\Stockfish-master\src\movepick.h	/^  T table[PIECE_NB][SQUARE_NB];$/;"	m	struct:Stats
table	.\Stockfish-master\src\tt.h	/^  Cluster* table;$/;"	m	class:TranspositionTable
targetBrd	.\Archive\eventManager.c	/^static board_t targetBrd;$/;"	v	file:
testInCheck	.\board.c	/^bool_t testInCheck( board_t *b )$/;"	f
testValidBoard	.\board.c	/^boardErr_t testValidBoard(board_t *b)$/;"	f
text	.\menu.h	/^   char               *text;        \/\/ Text for this item.  NULL used to terminate list.$/;"	m	struct:menuItem_s
thisKey	.\book.c	/^static U64 thisKey;$/;"	v	file:
thisThread	.\Stockfish-master\src\position.h	/^  Thread* thisThread;$/;"	m	class:Position
this_thread	.\Stockfish-master\src\position.h	/^inline Thread* Position::this_thread() const {$/;"	f	class:Position
threshold	.\Stockfish-master\src\movepick.h	/^  Value threshold;$/;"	m	class:MovePicker
time	.\Stockfish-master\src\search.h	/^  int time[COLOR_NB], inc[COLOR_NB], npmsec, movestogo, depth, movetime, mate, infinite, ponder;$/;"	m	struct:Search::LimitsType
timeControl	.\options.h	/^   timeControl_t timeControl;$/;"	m	struct:gameOptions_s
timeControl_s	.\types.h	/^typedef struct timeControl_s$/;"	s
timeControl_t	.\types.h	/^}timeControl_t;$/;"	t	typeref:struct:timeControl_s
timeInMs	.\types.h	/^   uint32_t timeInMs;$/;"	m	struct:compStrategySetting_s
timeOptionMenuButtonHandler	.\st_timeOptionMenu.c	/^void timeOptionMenuButtonHandler( event_t ev)$/;"	f
timeOptionMenuEntry	.\st_timeOptionMenu.c	/^void timeOptionMenuEntry( event_t ev )$/;"	f
timeOptionMenuExit	.\st_timeOptionMenu.c	/^void timeOptionMenuExit( event_t ev )$/;"	f
timeSettingMenu	.\Archive\eventManager.c	/^menu_t *timeSettingMenu = NULL;$/;"	v
timeSettingSubstate_e	.\st_timeOptionMenu.c	/^typedef enum timeSettingSubstate_e$/;"	g	file:
timeSettingSubstate_t	.\st_timeOptionMenu.c	/^}timeSettingSubstate_t;$/;"	t	typeref:enum:timeSettingSubstate_e	file:
timeSettings	.\types.h	/^   periodTimingSettings_t timeSettings[3];$/;"	m	struct:timeControl_s
time_to_pick	.\Stockfish-master\src\search.cpp	/^    bool time_to_pick(Depth depth) const { return depth \/ ONE_PLY == 1 + level; }$/;"	f	struct:__anon29::Skill
timerData	.\timer.c	/^static timerEntry_t    timerData[TMR_TOTAL_TIMERS];$/;"	v	file:
timerDataMutex	.\timer.c	/^static pthread_mutex_t timerDataMutex;$/;"	v	file:
timerEntry_s	.\timer.h	/^typedef struct timerEntry_s$/;"	s
timerEntry_t	.\timer.h	/^}timerEntry_t;$/;"	t	typeref:struct:timerEntry_s
timerErr_e	.\timer.h	/^typedef enum timerErr_e$/;"	g
timerErr_t	.\timer.h	/^}timerErr_t;$/;"	t	typeref:enum:timerErr_e
timerEventHandler	.\Archive\eventManager.c	/^static void timerEventHandler( int tmr )$/;"	f	file:
timerGetVal	.\timer.c	/^timerErr_t timerGetVal( timerRef_t id, uint32_t *val)$/;"	f
timerInit	.\timer.c	/^timerErr_t timerInit( void )$/;"	f
timerKill	.\timer.c	/^timerErr_t timerKill( timerRef_t id )$/;"	f
timerRef_e	.\timer.h	/^typedef enum timerRef_e$/;"	g
timerRef_t	.\timer.h	/^}timerRef_t;$/;"	t	typeref:enum:timerRef_e
timerSem	.\timer.c	/^static sem_t           timerSem;$/;"	v	file:
timerStart	.\timer.c	/^timerErr_t timerStart( timerRef_t id, uint32_t val, uint32_t rel, uint16_t ev)$/;"	f
timerTask	.\timer.c	/^static void *timerTask ( void *arg )$/;"	f	file:
timerThread	.\timer.c	/^static pthread_t       timerThread;$/;"	v	file:
timerTic	.\timer.c	/^static void timerTic( void )$/;"	f	file:
timersignalhandler	.\timer.c	/^static void timersignalhandler()$/;"	f	file:
timingType_e	.\types.h	/^typedef enum timingType_e$/;"	g
timingType_t	.\types.h	/^}timingType_t;$/;"	t	typeref:enum:timingType_e
title	.\Archive\displayStrings.h	/^   displayLine_t  title;$/;"	m	struct:displayMenu_s
title	.\menu.h	/^   char       *title;         \/\/ Menu title (if any).  If not NULL, this title will always appear on top line of display$/;"	m	struct:menu_s
to	.\hsm.h	/^   uint16_t       to;       \/\/ The target state (NULL_STATE_ID if handled internally)$/;"	m	struct:transDef_s
to	.\types.h	/^	unsigned short to               :6; \/\/ index of target square$/;"	m	struct:move_s
toMove	.\types.h	/^	color_t toMove; \/\/ Which color is on move$/;"	m	struct:board_s
to_cp	.\Stockfish-master\src\evaluate.cpp	/^    double to_cp(Value v) { return double(v) \/ PawnValueEg; }$/;"	f	namespace:__anon21::Trace
to_move	.\Stockfish-master\src\uci.cpp	/^Move UCI::to_move(const Position& pos, string& str) {$/;"	f	class:UCI
to_sq	.\Stockfish-master\src\types.h	/^inline Square to_sq(Move m) {$/;"	f
top	.\Archive\displayStrings.h	/^   displayLine_t top;$/;"	m	struct:displayMessage_s
topEntry	.\st_top.c	/^void topEntry( event_t ev )$/;"	f
topPickSubstate	.\st_top.c	/^uint16_t topPickSubstate(event_t ev)$/;"	f
totalLegalMoves	.\Archive\eventManager.c	/^static int totalLegalMoves = 0;$/;"	v	file:
totalLegalMoves	.\st_playerMove.c	/^static int totalLegalMoves = 0;$/;"	v	file:
totalTime	.\types.h	/^   uint16_t totalTime; \/\/ in seconds$/;"	m	struct:periodTimingSettings_s
trace	.\Stockfish-master\src\evaluate.cpp	/^std::string Eval::trace(const Position& pos) {$/;"	f	class:Eval
tranEnterFunc_t	.\Archive\eventManager.c	/^typedef void    (* tranEnterFunc_t )( state_t from );$/;"	t	file:
tranExitFunc_t	.\Archive\eventManager.c	/^typedef state_t (* tranExitFunc_t  )( state_t to   );$/;"	t	file:
transCount	.\hsm.h	/^   uint16_t            transCount;$/;"	m	struct:HSM_Handle_s
transDefCount	.\hsmDefs.c	/^const uint16_t transDefCount = (sizeof(myTransDef)\/sizeof(myTransDef[0]));$/;"	v
transDef_s	.\hsm.h	/^typedef struct transDef_s$/;"	s
transDef_t	.\hsm.h	/^}transDef_t;$/;"	t	typeref:struct:transDef_s
transFuncs_s	.\Archive\eventManager.c	/^typedef struct transFuncs_s$/;"	s	file:
transFuncs_t	.\Archive\eventManager.c	/^}transFuncs_t;$/;"	t	typeref:struct:transFuncs_s	file:
transState	.\Archive\eventManager.c	/^static void transState( state_t to)$/;"	f	file:
transTable	.\Archive\eventManager.c	/^transFuncs_t transTable =$/;"	v
transitions	.\hsm.h	/^   const transDef_t   *transitions;$/;"	m	struct:HSM_Handle_s
traverseCompositeState	.\hsm.c	/^static HSM_Error_t traverseCompositeState(HSM_Handle_t *hsm )$/;"	f	file:
triangle	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static const ubyte triangle[] = {$/;"	v	file:
ttMove	.\Stockfish-master\src\movepick.h	/^  Move ttMove;$/;"	m	class:MovePicker
type	.\Stockfish-master\src\uci.h	/^  std::string defaultValue, currentValue, type;$/;"	m	class:UCI::Option
type	.\types.h	/^   computerStrategy_t type;$/;"	m	struct:compStrategySetting_s
type	.\types.h	/^   timingType_t           type;$/;"	m	struct:timeControl_s
type_of	.\Stockfish-master\src\types.h	/^inline MoveType type_of(Move m) {$/;"	f
type_of	.\Stockfish-master\src\types.h	/^inline PieceType type_of(Piece pc)  {$/;"	f
ubyte	.\Stockfish-master\src\syzygy\tbcore.h	/^typedef unsigned char ubyte;$/;"	t
udpateGameDisplayClocks	.\Archive\eventManager.c	/^static void udpateGameDisplayClocks( void )$/;"	f	file:
uflow	.\Stockfish-master\src\misc.cpp	/^  int uflow() { return log(buf->sbumpc(), ">> "); }$/;"	f	struct:__anon24::Tie
uint32	.\Stockfish-master\src\syzygy\tbcore.h	/^typedef unsigned int uint32;$/;"	t
uint64	.\Stockfish-master\src\syzygy\tbcore.h	/^typedef unsigned long long uint64;$/;"	t
underflow	.\Stockfish-master\src\misc.cpp	/^  int underflow() { return buf->sgetc(); }$/;"	f	struct:__anon24::Tie
undo_move	.\Stockfish-master\src\position.cpp	/^void Position::undo_move(Move m) {$/;"	f	class:Position
undo_null_move	.\Stockfish-master\src\position.cpp	/^void Position::undo_null_move() {$/;"	f	class:Position
unlock	.\Stockfish-master\src\thread_win32.h	/^  void unlock() { LeaveCriticalSection(&cs); }$/;"	f	struct:Mutex
unmap_file	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void unmap_file(char *data, uint64 mapping)$/;"	f	file:
unmap_file	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static void unmap_file(char *data, uint64 size)$/;"	f	file:
unmapmem	.\bcm2835.c	/^static void unmapmem(void **pmem, size_t size)$/;"	f	file:
unmove	.\board.c	/^void unmove(board_t *b, const revMove_t m)$/;"	f
unstablePvFactor	.\Stockfish-master\src\timeman.h	/^  double unstablePvFactor;$/;"	m	class:TimeManagement
update	.\Stockfish-master\src\movepick.h	/^  void update(Piece pc, Square to, Move m) {$/;"	f	struct:Stats
update	.\Stockfish-master\src\movepick.h	/^  void update(Piece pc, Square to, Value v) {$/;"	f	struct:Stats
update	.\Stockfish-master\src\search.cpp	/^    void update(Position& pos, const std::vector<Move>& newPv) {$/;"	f	struct:__anon29::EasyMoveManager
updateGameDisplayBanner	.\Archive\eventManager.c	/^static void updateGameDisplayBanner( void )$/;"	f	file:
updateGameDisplayClockLegend	.\Archive\eventManager.c	/^static void updateGameDisplayClockLegend( void )$/;"	f	file:
updateGameDisplayLastMove	.\Archive\eventManager.c	/^static void updateGameDisplayLastMove( void )$/;"	f	file:
updateGameDisplayMaterial	.\Archive\eventManager.c	/^static void updateGameDisplayMaterial( void )$/;"	f	file:
update_pv	.\Stockfish-master\src\search.cpp	/^  void update_pv(Move* pv, Move move, Move* childPv) {$/;"	f	namespace:__anon30
update_stats	.\Stockfish-master\src\search.cpp	/^  void update_stats(const Position& pos, Stack* ss, Move move,$/;"	f	namespace:__anon30
us	.\Stockfish-master\src\bitbase.cpp	/^    Color us;$/;"	m	struct:__anon16::KPKPosition	file:
useOpeningBook	.\options.h	/^   bool_t        useOpeningBook;            \/\/ ignored if chess960 == true$/;"	m	struct:gameOptions_s
use_time_management	.\Stockfish-master\src\search.h	/^  bool use_time_management() const {$/;"	f	struct:Search::LimitsType
ushort	.\Stockfish-master\src\syzygy\tbcore.h	/^typedef unsigned short ushort;$/;"	t
val	.\timer.h	/^   uint32_t            val;$/;"	m	struct:timerEntry_s
validateOptions	.\options.c	/^static void validateOptions( options_t *options )$/;"	f	file:
value	.\Stockfish-master\src\material.h	/^  int16_t value;$/;"	m	struct:Material::Entry
value	.\Stockfish-master\src\movegen.h	/^  Value value;$/;"	m	struct:ExtMove
value	.\Stockfish-master\src\tt.h	/^  Value value() const { return (Value)value16; }$/;"	f	struct:TTEntry
value	.\Stockfish-master\src\uci.cpp	/^string UCI::value(Value v) {$/;"	f	class:UCI
value16	.\Stockfish-master\src\tt.h	/^  int16_t  value16;$/;"	m	struct:TTEntry
value_from_tt	.\Stockfish-master\src\search.cpp	/^  Value value_from_tt(Value v, int ply) {$/;"	f	namespace:__anon30
value_to_tt	.\Stockfish-master\src\search.cpp	/^  Value value_to_tt(Value v, int ply) {$/;"	f	namespace:__anon30
verify_material	.\Stockfish-master\src\endgame.cpp	/^  bool verify_material(const Position& pos, Color c, Value npm, int pawnsCnt) {$/;"	f	namespace:__anon20
wIncrement	.\types.h	/^    uint32_t wIncrement;$/;"	m	struct:game_s
wait	.\Stockfish-master\src\thread.cpp	/^void Thread::wait(std::atomic_bool& condition) {$/;"	f	class:Thread
wait_for_search_finished	.\Stockfish-master\src\thread.cpp	/^void Thread::wait_for_search_finished() {$/;"	f	class:Thread
wdl_to_Value	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static Value wdl_to_Value[5] = {$/;"	v	file:
wdl_to_dtz	.\Stockfish-master\src\syzygy\tbprobe.cpp	/^static int wdl_to_dtz[] = {$/;"	v	file:
wdl_to_map	.\Stockfish-master\src\syzygy\tbcore.cpp	/^static int wdl_to_map[5] = { 1, 3, 0, 2, 0 };$/;"	v	file:
weakSide	.\Stockfish-master\src\endgame.h	/^  Color strongSide, weakSide;$/;"	m	struct:Endgame
weight	.\book.h	/^    U16    weight;$/;"	m	struct:__anon13
white	.\options.h	/^   player_t      white;$/;"	m	struct:gameOptions_s
wtime	.\types.h	/^    uint32_t wtime;$/;"	m	struct:game_s
zobristEnPassantCol	.\types.h	/^	U8 zobristEnPassantCol; \/\/ 0-7  differs from enPassantCol in that it must have adjacent pawn$/;"	m	struct:board_s
zobristTable	.\zobrist.c	/^U64 zobristTable[781] =$/;"	v
~Logger	.\Stockfish-master\src\misc.cpp	/^ ~Logger() { start(false); }$/;"	f	class:__anon24::Logger	file:
~Mutex	.\Stockfish-master\src\thread_win32.h	/^ ~Mutex() { DeleteCriticalSection(&cs); }$/;"	f	struct:Mutex
~Thread	.\Stockfish-master\src\thread.cpp	/^Thread::~Thread() {$/;"	f	class:Thread
~TranspositionTable	.\Stockfish-master\src\tt.h	/^ ~TranspositionTable() { free(mem); }$/;"	f	class:TranspositionTable
